// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DBufferDecalShared.ush: Common definitions for DBuffer decals
=============================================================================*/

#pragma once

// all values that are output by the forward rendering pass
struct FDBufferData
{
	// 0..1, premultiplied with ColorOpacity
	float3 PreMulColor;
	// 0:opaque ..1:see through
	float ColorOpacity;

	// -1..1, premultiplied with NormalOpacity
	float3 PreMulWorldNormal;
	// 0:opaque ..1:see through
	float NormalOpacity;

	// 0..1, premultiplied with RoughnessOpacity
	float PreMulRoughness;
	// 0..1, premultiplied with RoughnessOpacity
	float PreMulMetallic;
	// 0..1, premultiplied with RoughnessOpacity
	float PreMulSpecular;
	// 0:opaque ..1:see through
	float RoughnessOpacity;
};

/** Populates DBufferA, DBufferB, DBufferC as float4 and puts opacity in alpha for frame buffer blending */
// @param MultiOpacity .x: Color, .y:Normal, .z:Roughness/Metallic/Specular
void EncodeDBufferData(FGBufferData GBufferData, float3 MultiOpacity,
	out float4 DBufferA,
	out float4 DBufferB,
	out float4 DBufferC)
{
	// UNORM 4 channel
	DBufferA = float4(GBufferData.BaseColor, MultiOpacity.x);

	// UNORM 4 channel, 128/255 represents 0
	DBufferB = float4(GBufferData.WorldNormal * 0.5f + 128.0f/255.0f, MultiOpacity.y);

	// UNORM 4 channel
	DBufferC = float4(GBufferData.Metallic, GBufferData.Specular, GBufferData.Roughness, MultiOpacity.z);
}

/** Populates FDBufferData */
FDBufferData DecodeDBufferData(
	float4 DBufferA,
	float4 DBufferB,
	float4 DBufferC)
{
	FDBufferData ret;

	// UNORM 4 channel
	ret.PreMulColor = DBufferA.rgb;
	ret.ColorOpacity = DBufferA.a;

	// UNORM 4 channel, 128/255 represents 0
	ret.PreMulWorldNormal = DBufferB.rgb * 2 - (256.0 / 255.0);
	ret.NormalOpacity = DBufferB.a;

	// UNORM 4 channel
	ret.PreMulMetallic = DBufferC.r;
	ret.PreMulSpecular = DBufferC.g;
	ret.PreMulRoughness = DBufferC.b;
	ret.RoughnessOpacity = DBufferC.a;

	return ret;
}

#if SUPPORTS_INDEPENDENT_SAMPLERS
	// Share samplers to give artists more
	#define OpaqueBasePassDBufferATextureSampler OpaqueBasePass.DBufferATextureSampler
	#define OpaqueBasePassDBufferBTextureSampler OpaqueBasePass.DBufferATextureSampler
	#define OpaqueBasePassDBufferCTextureSampler OpaqueBasePass.DBufferATextureSampler
#else
	#define OpaqueBasePassDBufferATextureSampler OpaqueBasePass.DBufferATextureSampler
	#define OpaqueBasePassDBufferBTextureSampler OpaqueBasePass.DBufferBTextureSampler
	#define OpaqueBasePassDBufferCTextureSampler OpaqueBasePass.DBufferCTextureSampler
#endif

// Returns a bitmask of DBuffer targets that contain valid data for this pixel.
// @param BufferUV - UV space in the DBuffer textures
uint GetDBufferTargetMask(uint2 PixelPos)
{
#if USE_DBUFFER && ENABLE_DBUFFER_TEXTURES && !RAYHITGROUPSHADER && !LUMEN_CARD_CAPTURE

	#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
		return DecodeRTWriteMask(PixelPos, OpaqueBasePass.DBufferRenderMask, 3);
	#elif PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK
		uint Mask = OpaqueBasePass.DBufferRenderMask.Load(uint3(PixelPos, 0));
		return Mask > 0 ? 0x07 : 0x00;
	#else
		return 0x07;
	#endif

#else
	return 0;
#endif
}

// @param BufferUV - UV space in the DBuffer textures
FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit)
{
	// Setup default values, which mean that no decals are present in DBuffer
	float4 DBufferA = float4(0.0, 0.0, 0.0, 1.0);
	float4 DBufferB = float4(128.0f / 255.0f, 128.f / 255.5f, 128.f / 255.5f, 1.0);
	float4 DBufferC = float4(0.0, 0.0, 0.0, 1.0);

#if USE_DBUFFER && ENABLE_DBUFFER_TEXTURES && !RAYHITGROUPSHADER && !LUMEN_CARD_CAPTURE
	BRANCH
	if (RTMaskBit & 0x1)
	{
		DBufferA = Texture2DSampleLevel(OpaqueBasePass.DBufferATexture, OpaqueBasePassDBufferATextureSampler, BufferUV, 0);
	}

	BRANCH
	if (RTMaskBit & 0x2)
	{
		DBufferB = Texture2DSampleLevel(OpaqueBasePass.DBufferBTexture, OpaqueBasePassDBufferBTextureSampler, BufferUV, 0);
	}

	BRANCH
	if (RTMaskBit & 0x4)
	{
		DBufferC = Texture2DSampleLevel(OpaqueBasePass.DBufferCTexture, OpaqueBasePassDBufferCTextureSampler, BufferUV, 0);
	}
#endif

	return DecodeDBufferData(DBufferA, DBufferB, DBufferC);
}

/** Populates DBufferA, DBufferB, DBufferC as float4 and puts opacity in alpha for frame buffer blending */
void ApplyDBufferData(
	FDBufferData DBufferData, inout float3 WorldNormal, inout float3 SubsurfaceColor, inout float Roughness, 
	inout float3 BaseColor, inout float Metallic, inout float Specular )
{
#if (MATERIALDECALRESPONSEMASK & 0x1)
	BaseColor = BaseColor * DBufferData.ColorOpacity + DBufferData.PreMulColor;
	SubsurfaceColor *= DBufferData.ColorOpacity;
#endif

#if (MATERIALDECALRESPONSEMASK & 0x2)
	// We normalise the normal to get smoother visual result (it helps to avoid having D_GGX explodes toward infinity, and matches DecodeGBufferData)
	WorldNormal = normalize(WorldNormal * DBufferData.NormalOpacity + DBufferData.PreMulWorldNormal);
#endif

#if (MATERIALDECALRESPONSEMASK & 0x4)
	Roughness = Roughness * DBufferData.RoughnessOpacity + DBufferData.PreMulRoughness;
	Metallic = Metallic * DBufferData.RoughnessOpacity + DBufferData.PreMulMetallic;
	Specular = Specular * DBufferData.RoughnessOpacity + DBufferData.PreMulSpecular;
#endif
}
