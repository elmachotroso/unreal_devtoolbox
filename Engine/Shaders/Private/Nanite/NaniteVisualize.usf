// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneData.ush"
#include "../DeferredShadingCommon.ush"
#include "../ColorMap.ush"
#include "../Visualization.ush"
#include "../VirtualShadowMaps/VirtualShadowMapStaticCaching.ush"

#include "NaniteDataDecode.ush"
#include "NaniteAttributeDecode.ush"

RWTexture2D<float4>		DebugOutput;
Texture2D<UlongType>	VisBuffer64;
Texture2D<UlongType>	DbgBuffer64;
Texture2D<uint>			DbgBuffer32;
Texture2D<float>		SceneDepth;
Texture2D<uint>			MaterialResolve;
Texture2D<uint>			MaterialComplexity;
ByteAddressBuffer		MaterialSlotTable;
ByteAddressBuffer		MaterialDepthTable;
ByteAddressBuffer		MaterialHitProxyTable;

int4					VisualizeConfig;
int4					VisualizeScales;

// TODO: Try N.V to improve shading look
float3 ApplySobelFilter(uint2 PixelPosXY, uint DepthInt, float3 Color, float3 OutlineColor, bool bDarkOutline)
{
	// Sobel edge detect depth
	static int SobelX[] =
	{
		1, 0, -1,
		2, 0, -2,
		1, 0, -1
	};

	static int SobelY[] =
	{
		 1,  2,  1,
		 0,  0,  0,
		-1, -2, -1
	};

	static uint2 UVSample[] =
	{
		{-1,  1},  {0,  1},  {1,  1},
		{-1,  0},  {0,  0},  {1,  0},
		{-1, -1},  {0, -1},  {1, -1}
	};

	float3 DepthGradX = float3(0.0f, 0.0f, 0.0f);
	float3 DepthGradY = float3(0.0f, 0.0f, 0.0f);

	uint DepthIntCurrent;
	uint VisibleClusterIndexCurrent;
	uint TriIndexCurrent;

	for (uint Tap = 0; Tap < 9; ++Tap)
	{
		const UlongType VisPixelCurrent = VisBuffer64[PixelPosXY + UVSample[Tap]];
		UnpackVisPixel(VisPixelCurrent, DepthIntCurrent, VisibleClusterIndexCurrent, TriIndexCurrent);

		float SampleDensityDepth = log2( ConvertFromDeviceZ(asfloat(DepthIntCurrent)) + 1.0 ) * 10.0;

		DepthGradX += SobelX[Tap] * SampleDensityDepth;
		DepthGradY += SobelY[Tap] * SampleDensityDepth;
	}

	// Build outline from depth
	float3 DepthOutline = max(abs(DepthGradX), abs(DepthGradY));

	float3 CombineColor;
	if( bDarkOutline )
		CombineColor = Color * ( 1.0 - DepthOutline * 0.25 );
	else
		CombineColor = Color + DepthOutline * 0.25 * OutlineColor;

	return saturate(CombineColor);
}

uint GetVisualizeMode()
{
	return VisualizeConfig.x;
}

float GetOverdrawScale()
{
	return clamp(float(VisualizeScales.x), 0.0f, 100.0f) / 100.0f;
}

float GetComplexityScale()
{
	return clamp(float(VisualizeScales.y), 0.0f, 100.0f) / 100.0f;
}

bool GetCompositeWithSceneDepth()
{
	return VisualizeConfig.z != 0;
}

bool ShouldApplySobelFilter()
{
	return VisualizeConfig.w != 0;
}

[numthreads(8, 8, 1)]
void VisualizeCS(uint3 DTID : SV_DispatchThreadID, uint3 GID : SV_GroupID)
{
	const uint2 PixelPos = DTID.xy;
	const uint2 TilePos  = GID.xy; // 8x8 tile 2D coord

	const UlongType VisPixel = VisBuffer64[PixelPos];

	uint DepthInt;
	uint VisibleClusterIndex;
	uint TriIndex;
	UnpackVisPixel(VisPixel, DepthInt, VisibleClusterIndex, TriIndex);

	FNaniteView NaniteView = GetNaniteView( 0 );

	bool IsNanitePixel = false;
	bool IsDecalReceiver = false;
	uint ResolvedMaterialSlot = 0;
	UnpackMaterialResolve(MaterialResolve[PixelPos], IsNanitePixel, IsDecalReceiver, ResolvedMaterialSlot);

	const float3 Velocity = float3(0.0f, 0.0f, 0.0f);

	float3 Result = float3(0, 0, 0);
	float3 OutlineColor = 1;
	bool bDarkOutline = false;

	if (VisibleClusterIndex != 0xFFFFFFFF && (!GetCompositeWithSceneDepth() | IsNanitePixel))
	{
		// Nanite Pixel

		UlongType DbgPixel = DbgBuffer64[PixelPos];
		uint DebugDepthInt;
		uint DebugValueMax;
		UnpackDbgPixel(DbgPixel, DebugDepthInt, DebugValueMax);
		uint DebugValueAdd = DbgBuffer32[PixelPos];

		FVisibleCluster VisibleCluster           = GetVisibleCluster(VisibleClusterIndex);
		FInstanceSceneData InstanceData          = GetInstanceSceneData(VisibleCluster, false);
		FInstanceDynamicData InstanceDynamicData = CalculateInstanceDynamicData(NaniteView, InstanceData);
		FPrimitiveSceneData PrimitiveData        = GetPrimitiveData(InstanceData.PrimitiveId);
		FCluster Cluster                         = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);

		const uint3 TriIndices = ReadTriangleIndices(Cluster, TriIndex);

		const float3 PointLocal0 = DecodePosition(TriIndices.x, Cluster);
		const float3 PointLocal1 = DecodePosition(TriIndices.y, Cluster);
		const float3 PointLocal2 = DecodePosition(TriIndices.z, Cluster);

		const float4 PointClip0 = mul(float4(PointLocal0, 1), InstanceDynamicData.LocalToClip);
		const float4 PointClip1 = mul(float4(PointLocal1, 1), InstanceDynamicData.LocalToClip);
		const float4 PointClip2 = mul(float4(PointLocal2, 1), InstanceDynamicData.LocalToClip);

		const float2 PixelClip = (PixelPos + 0.5 - View.ViewRectMin.xy) * View.ViewSizeAndInvSize.zw * float2(2, -2) + float2(-1, 1);

		// Calculate perspective correct barycentric coordinates with screen derivatives
		const FBarycentrics Barycentrics = CalculateTriangleBarycentrics(PixelClip, PointClip0, PointClip1, PointClip2, View.ViewSizeAndInvSize.zw);

		const FNaniteAttributeData AttributeData = GetAttributeData(
			Cluster,
			TriIndices,
			PointLocal0,
			PointLocal1,
			PointLocal2,
			Barycentrics,
			InstanceData,
			NANITE_MAX_UVS
		);

		const int HierarchyOffset = InstanceData.NaniteHierarchyOffset;
		const uint VisualizeMode = GetVisualizeMode();

		// Note: The mode is no longer a bitmask at this point, just a single visualization mode.

		if (VisualizeMode == VISUALIZE_TRIANGLES)
		{
			Result = IntToColor(TriIndex);
			Result = Result * 0.8 + 0.2;
			bDarkOutline = true;
		}
		else if (VisualizeMode == VISUALIZE_CLUSTERS)
		{
			Result = IntToColor(VisibleCluster.ClusterIndex);
			Result = Result * 0.8 + 0.2;
			bDarkOutline = true;
		}
		else if (VisualizeMode == VISUALIZE_GROUPS)
		{
			Result = IntToColor(Cluster.GroupIndex);
		}
		else if (VisualizeMode == VISUALIZE_PAGES)
		{
			Result = IntToColor(VisibleCluster.PageIndex);
		}
		else if (VisualizeMode == VISUALIZE_PRIMITIVES)
		{
			Result = IntToColor(InstanceData.PrimitiveId) * 0.8;
		}
		else if (VisualizeMode == VISUALIZE_INSTANCES)
		{
			Result = IntToColor(VisibleCluster.InstanceId) * 0.8;
		}
		else if (VisualizeMode == VISUALIZE_RASTER_MODE)
		{
			Result = ( IntToColor(DebugValueMax) * 0.75 + 0.25 ) * ( IntToColor(TriIndex).x * 0.5 + 0.5 );
		}
		else if (VisualizeMode == VISUALIZE_OVERDRAW)
		{
			const float OverdrawScale = GetOverdrawScale();
			const float OverdrawCount = DebugValueAdd; // Num of evaluations per pixel
			const float OverdrawColor = 1 - exp2( -OverdrawCount * OverdrawScale );
			Result = ColorMapInferno(OverdrawColor);
		}
		else if (VisualizeMode == VISUALIZE_HIERARCHY_OFFSET)
		{
			Result = IntToColor(HierarchyOffset);
		}
		else if (VisualizeMode == VISUALIZE_MATERIAL_MODE)
		{
			Result = IsMaterialFastPath(Cluster) ? float3(0, 1, 0) : float3(1, 0, 0);
		}
		else if (VisualizeMode == VISUALIZE_MATERIAL_INDEX)
		{
			Result = IntToColor(GetRelativeMaterialIndex(Cluster, TriIndex));
		}
		else if (VisualizeMode == VISUALIZE_MATERIAL_DEPTH)
		{
			//const uint MaterialSlot = GetMaterialSlot(Cluster, InstanceData.PrimitiveId, TriIndex, MaterialSlotTable);
			const uint MaterialSlot = ResolvedMaterialSlot;
			const uint MaterialDepthId = GetMaterialDepthId(MaterialSlot, MaterialDepthTable);
			Result = IntToColor(MaterialDepthId);
		}
		else if (VisualizeMode == VISUALIZE_MATERIAL_COMPLEXITY)
		{
			const uint TileMaterialCount = MaterialComplexity[TilePos];
			const float ComplexityScale = GetComplexityScale();
			const float ComplexityCount = TileMaterialCount; // Num of unique materials per tile
			const float ComplexityColor = 1.0f - exp2(-ComplexityCount * ComplexityScale);
			Result = ColorMapTurbo(ComplexityColor);
		}
	#if USE_EDITOR_SHADERS
		else if (VisualizeMode == VISUALIZE_HIT_PROXY_DEPTH)
		{
			if ((InstanceData.Flags & INSTANCE_SCENE_DATA_FLAG_HAS_EDITOR_DATA) != 0u)
			{
				Result = IntToColor(InstanceData.EditorData.HitProxyPacked);
			}
			else
			{
				Result = IntToColor(GetMaterialHitProxyId(Cluster, InstanceData.PrimitiveId, TriIndex, MaterialHitProxyTable));
			}
		}
	#endif
		else if (VisualizeMode == VISUALIZE_NANITE_MASK)
		{
			Result = float3(0, 1, 0);
		}
		else if (VisualizeMode == VISUALIZE_LIGHTMAP_UVS)
		{
			const float2 LightmapUVs = AttributeData.TexCoords[PrimitiveData.LightmapUVIndex];
			Result = float3(LightmapUVs.x, LightmapUVs.y, 0);
		}
		else if (VisualizeMode == VISUALIZE_LIGHTMAP_UV_INDEX)
		{
			Result = IntToColor(PrimitiveData.LightmapUVIndex);
		}
		else if (VisualizeMode == VISUALIZE_LIGHTMAP_DATA_INDEX)
		{
			Result = IntToColor(PrimitiveData.LightmapDataIndex);
		}
		else if (VisualizeMode == VISUALIZE_POSITION_BITS)
		{
			const uint NumBits = Cluster.PosBits.x + Cluster.PosBits.y + Cluster.PosBits.z;

			if (NumBits <= 30)
			{
				Result = lerp(float3(0.0f, 1.0f, 0.0f), float3(1.0f, 1.0f, 1.0f), NumBits / 30.0f);
			}
			else
			{
				Result = lerp(float3(1.0f, 1.0f, 1.0f), float3(1.0f, 0.0f, 0.0f), (NumBits - 30) / (float)(3 * 16 - 30));
			}
		}
		else if (VisualizeMode == VISUALIZE_VSM_STATIC_CACHING)
		{
			Result = ShouldCacheInstanceAsStatic(InstanceData) ? float3(0, 1, 0) : float3(1, 0, 0);
		}
	}
	else
	{
		// Non-Nanite Pixel

		if (GetVisualizeMode() == VISUALIZE_NANITE_MASK)
		{
			if (SceneDepth[PixelPos] > 0.0f) // only visualize written fragments
			{
				Result = float3(1, 0, 0);
			}
		}
	}

	if (ShouldApplySobelFilter() && (!GetCompositeWithSceneDepth() | IsNanitePixel))
	{
		Result = ApplySobelFilter(PixelPos, DepthInt, Result, OutlineColor, bDarkOutline);
	}

	DebugOutput[PixelPos] = float4(Result, 0);
}
