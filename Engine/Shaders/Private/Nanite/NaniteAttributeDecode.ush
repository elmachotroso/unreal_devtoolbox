// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "NaniteDataDecode.ush"

struct FNaniteAttributeData
{
	/** Interpolated vertex color, in linear color space. */
	half4 VertexColor;
	half4 VertexColor_DDX;
	half4 VertexColor_DDY;

	/** Orthonormal rotation-only transform from tangent space to world space. */
	half3x3 TangentToWorld;

	float2 TexCoords[NANITE_MAX_UVS];
	float2 TexCoords_DDX[NANITE_MAX_UVS];
	float2 TexCoords_DDY[NANITE_MAX_UVS];

	half UnMirrored;
};

#define SIZEOF_UV_RANGE	32
struct FUVRange
{
	int2	Min;
	uint2	GapStart;
	uint2	GapLength;
	int		Precision;
};


FUVRange UnpackUVRange(uint4 Data[2])
{
	FUVRange Range;
	Range.Min = (int2)Data[0].xy;
	Range.GapStart = Data[0].zw;
	Range.GapLength = Data[1].xy;
	Range.Precision = Data[1].z;
	return Range;
}

FUVRange GetUVRange(ByteAddressBuffer InputBuffer, uint StartOffset, uint Index)
{
	uint Offset = StartOffset + Index * SIZEOF_UV_RANGE;
	uint4 Data[2];
	Data[0] = InputBuffer.Load4(Offset);
	Data[1] = InputBuffer.Load4(Offset + 16);
	return UnpackUVRange(Data);
}

FUVRange GetUVRange(RWByteAddressBuffer InputBuffer, uint StartOffset, uint Index)
{
	uint Offset = StartOffset + Index * SIZEOF_UV_RANGE;
	uint4 Data[2];
	Data[0] = InputBuffer.Load4(Offset);
	Data[1] = InputBuffer.Load4(Offset + 16);
	return UnpackUVRange(Data);
}

float2 UnpackTexCoord(uint2 Packed, FUVRange UVRange)
{
	uint2 T = Packed + ((Packed > UVRange.GapStart) ? UVRange.GapLength : 0u);

	const float Scale = asfloat(asint(1.0f) - (UVRange.Precision << 23));
	return float2((int2)T + UVRange.Min) * Scale;
}

float3 UnpackNormal(uint Packed, uint Bits)
{
	uint Mask = BitFieldMaskU32(Bits, 0);
	float2 F = uint2(BitFieldExtractU32(Packed, Bits, 0), BitFieldExtractU32(Packed, Bits, Bits)) * (2.0f / Mask) - 1.0f;
	float3 N = float3(F.xy, 1.0 - abs(F.x) - abs(F.y));
	float T = saturate(-N.z);
	N.xy += N.xy >= 0.0 ? -T : T;
	return N;
}

struct FBarycentrics
{
	float3 UVW;
	float3 UVW_dx;
	float3 UVW_dy;
};

/** Calculates perspective correct barycentric coordinates and partial derivatives using screen derivatives. */
FBarycentrics CalculateTriangleBarycentrics(float2 PixelClip, float4 PointClip0, float4 PointClip1, float4 PointClip2, float2 ViewInvSize)
{
	FBarycentrics Result;

	float3 Pos0 = PointClip0.xyz / PointClip0.w;
	float3 Pos1 = PointClip1.xyz / PointClip1.w;
	float3 Pos2 = PointClip2.xyz / PointClip2.w;

	float3 RcpW = rcp(float3(PointClip0.w, PointClip1.w, PointClip2.w));

	float3 Pos120X = float3(Pos1.x, Pos2.x, Pos0.x);
	float3 Pos120Y = float3(Pos1.y, Pos2.y, Pos0.y);
	float3 Pos201X = float3(Pos2.x, Pos0.x, Pos1.x);
	float3 Pos201Y = float3(Pos2.y, Pos0.y, Pos1.y);

	float3 C_dx = Pos201Y - Pos120Y;
	float3 C_dy = Pos120X - Pos201X;

	float3 C = C_dx * (PixelClip.x - Pos120X) + C_dy * (PixelClip.y - Pos120Y);	// Evaluate the 3 edge functions
	float3 G = C * RcpW;

	float H = dot(C, RcpW);
	float RcpH = rcp(H);

	// UVW = C * RcpW / dot(C, RcpW)
	Result.UVW = G * RcpH;

	// Texture coordinate derivatives:
	// UVW = G / H where G = C * RcpW and H = dot(C, RcpW)
	// UVW' = (G' * H - G * H') / H^2
	// float2 TexCoordDX = UVW_dx.y * TexCoord10 + UVW_dx.z * TexCoord20;
	// float2 TexCoordDY = UVW_dy.y * TexCoord10 + UVW_dy.z * TexCoord20;
	float3 G_dx = C_dx * RcpW;
	float3 G_dy = C_dy * RcpW;

	float H_dx = dot(C_dx, RcpW);
	float H_dy = dot(C_dy, RcpW);

	Result.UVW_dx = (G_dx * H - G * H_dx) * (RcpH * RcpH) * ( 2.0f * ViewInvSize.x);
	Result.UVW_dy = (G_dy * H - G * H_dy) * (RcpH * RcpH) * (-2.0f * ViewInvSize.y);

	return Result;
}

uint CalculateMaxAttributeBits(uint NumTexCoordInterpolators)
{
	return (2 * NANITE_NORMAL_QUANTIZATION_BITS + 4 * NANITE_MAX_COLOR_QUANTIZATION_BITS + NumTexCoordInterpolators * (2 * NANITE_MAX_TEXCOORD_QUANTIZATION_BITS));
}

bool IsMaterialFastPath(FCluster InCluster)
{
	return (InCluster.Material0Length > 0);
}

uint GetRelativeMaterialIndex(FCluster InCluster, uint InTriIndex)
{
	uint MaterialIndex = 0xFFFFFFFF;

	BRANCH
	if (IsMaterialFastPath(InCluster))
	{
		if (InTriIndex < InCluster.Material0Length)
		{
			MaterialIndex = InCluster.Material0Index;
		}
		else if (InTriIndex < (InCluster.Material0Length + InCluster.Material1Length))
		{
			MaterialIndex = InCluster.Material1Index;
		}
		else
		{
			MaterialIndex = InCluster.Material2Index;
		}
	}
	else
	{
		uint TableOffset = InCluster.PageBaseAddress + InCluster.MaterialTableOffset * 4;
		LOOP for (uint TableEntry = 0; TableEntry < InCluster.MaterialTableLength; ++TableEntry)
		{
			uint EncodedRange = ClusterPageData.Load(TableOffset);
			TableOffset += 4;

			// uint32 TriStart      :  8; // max 128 triangles
			// uint32 TriLength     :  8; // max 128 triangles
			// uint32 MaterialIndex :  6; // max  64 materials
			// uint32 Padding       : 10;

			const uint TriStart  = BitFieldExtractU32(EncodedRange, 8, 0);
			const uint TriLength = BitFieldExtractU32(EncodedRange, 8, 8);
			if (InTriIndex >= TriStart && InTriIndex < (TriStart + TriLength))
			{
				MaterialIndex = BitFieldExtractU32(EncodedRange, 6, 16);
				break;
			}
		}
	}

	return MaterialIndex;
}

uint RemapMaterialIndexToOffset(uint InPrimitiveIndex, uint InMaterialIndex)
{
	// Remap local primitive material indices (i.e. 0...8) to global indices of all primitives in current scene
	const uint MaxMaterials = 64;
	const uint RemapOffset = (InPrimitiveIndex * MaxMaterials * 4) + (InMaterialIndex * 4);
	return RemapOffset;
}

uint RemapMaterialIndexToId(uint InPrimitiveIndex, uint InMaterialIndex, ByteAddressBuffer InMaterialTable)
{
	const uint RemapOffset = RemapMaterialIndexToOffset(InPrimitiveIndex, InMaterialIndex);
	const uint MaterialId = InMaterialTable.Load(RemapOffset);
	return MaterialId;
}

uint GetMaterialSlot(
	FCluster InCluster,
	uint InPrimitiveIndex,
	uint InTriIndex,
	ByteAddressBuffer InMaterialSlotTable)
{
	const uint RelativeMaterialIndex = GetRelativeMaterialIndex(InCluster, InTriIndex);
	const uint MaterialSlot = RemapMaterialIndexToId(InPrimitiveIndex, RelativeMaterialIndex, InMaterialSlotTable);
	return MaterialSlot;
}

uint GetMaterialDepthId(
	uint InMaterialSlot,
	ByteAddressBuffer InMaterialDepthTable)
{
	const uint MaterialDepthId = InMaterialDepthTable.Load(InMaterialSlot * 4);
	return MaterialDepthId;
}

uint GetMaterialHitProxyId(
	FCluster InCluster,
	uint InPrimitiveIndex,
	uint InTriIndex,
	ByteAddressBuffer InMaterialHitProxyTable)
{
	const uint RelativeMaterialIndex = GetRelativeMaterialIndex(InCluster, InTriIndex);
	const uint MaterialHitProxyId = RemapMaterialIndexToId(InPrimitiveIndex, RelativeMaterialIndex, InMaterialHitProxyTable);
	return MaterialHitProxyId;
}

uint GetMaterialBucketIdFromDepth(float Depth)
{
	return (uint)(Depth * NANITE_MAX_STATE_BUCKET_ID);
}

// TODO: We should really expose the derivative types from the material compiler and use them instead.
struct FTexCoord
{
	float2 Value;
	float2 DDX;
	float2 DDY;
};

FTexCoord InterpolateTexCoord(float2 TexCoord0, float2 TexCoord1, float2 TexCoord2, FBarycentrics Barycentrics)
{
	float2 TexCoord10 = TexCoord1 - TexCoord0;
	float2 TexCoord20 = TexCoord2 - TexCoord0;

	FTexCoord Result;
	Result.Value		= TexCoord0 + Barycentrics.UVW.y * TexCoord10 + Barycentrics.UVW.z * TexCoord20;
	Result.DDX			= Barycentrics.UVW_dx.y * TexCoord10 + Barycentrics.UVW_dx.z * TexCoord20;
	Result.DDY			= Barycentrics.UVW_dy.y * TexCoord10 + Barycentrics.UVW_dy.z * TexCoord20;
	return Result;
}

FNaniteAttributeData GetAttributeData(
	FCluster Cluster,
	uint3 TriIndices,
	float3 PointLocal0,
	float3 PointLocal1,
	float3 PointLocal2,
	FBarycentrics Barycentrics,
	FInstanceSceneData InstanceData,
	uint CompileTimeMaxTexCoords
)
{
	FNaniteAttributeData AttributeData = (FNaniteAttributeData)0;

	// Unpack and interpolate attributes
	uint DecodeInfoOffset = Cluster.PageBaseAddress + Cluster.DecodeInfoOffset;
	uint AttributeDataOffset = Cluster.PageBaseAddress + Cluster.AttributeOffset;

	// Always process first UV set. Even if it isn't used, we might still need TangentToWorld.
	CompileTimeMaxTexCoords = max(1, min(NANITE_MAX_UVS, CompileTimeMaxTexCoords));

	// Unpack normal
#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
	uint3 ReadOffset = AttributeDataOffset + TriIndices * Cluster.BitsPerAttribute / 8;
	float3 TangentZ0 = asfloat(ClusterPageData.Load3(ReadOffset.x));
	float3 TangentZ1 = asfloat(ClusterPageData.Load3(ReadOffset.y));
	float3 TangentZ2 = asfloat(ClusterPageData.Load3(ReadOffset.z));
	ReadOffset += 12;
#else
	const uint MaxAttributeBits = CalculateMaxAttributeBits(CompileTimeMaxTexCoords);

	FBitStreamReaderState AttributeStream0 = BitStreamReader_Create_Aligned(AttributeDataOffset, TriIndices.x * Cluster.BitsPerAttribute, MaxAttributeBits);
	FBitStreamReaderState AttributeStream1 = BitStreamReader_Create_Aligned(AttributeDataOffset, TriIndices.y * Cluster.BitsPerAttribute, MaxAttributeBits);
	FBitStreamReaderState AttributeStream2 = BitStreamReader_Create_Aligned(AttributeDataOffset, TriIndices.z * Cluster.BitsPerAttribute, MaxAttributeBits);

	uint NormalBits0 = BitStreamReader_Read_RO(ClusterPageData, AttributeStream0, 2 * NANITE_NORMAL_QUANTIZATION_BITS, 2 * NANITE_NORMAL_QUANTIZATION_BITS);
	uint NormalBits1 = BitStreamReader_Read_RO(ClusterPageData, AttributeStream1, 2 * NANITE_NORMAL_QUANTIZATION_BITS, 2 * NANITE_NORMAL_QUANTIZATION_BITS);
	uint NormalBits2 = BitStreamReader_Read_RO(ClusterPageData, AttributeStream2, 2 * NANITE_NORMAL_QUANTIZATION_BITS, 2 * NANITE_NORMAL_QUANTIZATION_BITS);

	float3 TangentZ0 = UnpackNormal(NormalBits0, NANITE_NORMAL_QUANTIZATION_BITS);
	float3 TangentZ1 = UnpackNormal(NormalBits1, NANITE_NORMAL_QUANTIZATION_BITS);
	float3 TangentZ2 = UnpackNormal(NormalBits2, NANITE_NORMAL_QUANTIZATION_BITS);
#endif

	float3 TangentZ = normalize(Barycentrics.UVW.x * TangentZ0 + Barycentrics.UVW.y * TangentZ1 + Barycentrics.UVW.z * TangentZ2);

	// Decode vertex color
	// This needs to happen even if INTERPOLATE_VERTEX_COLOR is not defined as the data might be there regardless of what the shader needs.
	// When INTERPOLATE_VERTEX_COLOR is not defined, the results are not used and the code mostly disappears.
	AttributeData.UnMirrored = 1.0f;

#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
	uint4 Color0 = UnpackToUint4(ClusterPageData.Load(ReadOffset.x), 8);
	uint4 Color1 = UnpackToUint4(ClusterPageData.Load(ReadOffset.y), 8);
	uint4 Color2 = UnpackToUint4(ClusterPageData.Load(ReadOffset.z), 8);
	ReadOffset += 4;
	AttributeData.VertexColor = (Barycentrics.UVW.x * float4(Color0) + Barycentrics.UVW.y * float4(Color1) + Barycentrics.UVW.z * float4(Color2)) * (1.0f / 255.0f);
#else
	uint4 NumComponentBits = UnpackToUint4(Cluster.ColorBits, 4);
	uint4 ColorDelta0 = BitStreamReader_Read4_RO(ClusterPageData, AttributeStream0, NumComponentBits, NANITE_MAX_COLOR_QUANTIZATION_BITS);
	uint4 ColorDelta1 = BitStreamReader_Read4_RO(ClusterPageData, AttributeStream1, NumComponentBits, NANITE_MAX_COLOR_QUANTIZATION_BITS);
	uint4 ColorDelta2 = BitStreamReader_Read4_RO(ClusterPageData, AttributeStream2, NumComponentBits, NANITE_MAX_COLOR_QUANTIZATION_BITS);

	AttributeData.VertexColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
	AttributeData.VertexColor_DDX = 0.0f;
	AttributeData.VertexColor_DDY = 0.0f;
	if (Cluster.ColorMode != NANITE_VERTEX_COLOR_MODE_WHITE)
	{
		float4 ColorMin = float4(UnpackByte0(Cluster.ColorMin), UnpackByte1(Cluster.ColorMin), UnpackByte2(Cluster.ColorMin), UnpackByte3(Cluster.ColorMin));
		if (Cluster.ColorMode == NANITE_VERTEX_COLOR_MODE_VARIABLE)
		{
			AttributeData.VertexColor = (ColorMin + Barycentrics.UVW.x * float4(ColorDelta0) + Barycentrics.UVW.y * float4(ColorDelta1) + Barycentrics.UVW.z * float4(ColorDelta2)) * (1.0f / 255.0f);
			AttributeData.VertexColor_DDX = (Barycentrics.UVW_dx.x * float4(ColorDelta0) + Barycentrics.UVW_dx.y * float4(ColorDelta1) + Barycentrics.UVW_dx.z * float4(ColorDelta2)) * (1.0f / 255.0f);
			AttributeData.VertexColor_DDY = (Barycentrics.UVW_dy.x * float4(ColorDelta0) + Barycentrics.UVW_dy.y * float4(ColorDelta1) + Barycentrics.UVW_dy.z * float4(ColorDelta2)) * (1.0f / 255.0f);
		}
		else // (Cluster.ColorMode == NANITE_VERTEX_COLOR_MODE_CONSTANT)
		{
			AttributeData.VertexColor = ColorMin * (1.0f / 255.0f);
		}
	}
#endif

	UNROLL
	for (uint TexCoordIndex = 0; TexCoordIndex < CompileTimeMaxTexCoords; ++TexCoordIndex)
	{
	#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
		float2 TexCoord0 = asfloat(ClusterPageData.Load2(ReadOffset.x));
		float2 TexCoord1 = asfloat(ClusterPageData.Load2(ReadOffset.y));
		float2 TexCoord2 = asfloat(ClusterPageData.Load2(ReadOffset.z));
	#else
		uint2 UVPrec = uint2(BitFieldExtractU32(Cluster.UV_Prec, 4, TexCoordIndex * 8), BitFieldExtractU32(Cluster.UV_Prec, 4, TexCoordIndex * 8 + 4));
		uint2 Bits0_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream0, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
		uint2 Bits1_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream1, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
		uint2 Bits2_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream2, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
	#endif

		if (TexCoordIndex < Cluster.NumUVs)
		{
		#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
			ReadOffset += 8;
		#else
			FUVRange UVRange = GetUVRange(ClusterPageData, DecodeInfoOffset, TexCoordIndex);
			float2 TexCoord0 = UnpackTexCoord(Bits0_UV, UVRange);
			float2 TexCoord1 = UnpackTexCoord(Bits1_UV, UVRange);
			float2 TexCoord2 = UnpackTexCoord(Bits2_UV, UVRange);
		#endif
			FTexCoord TexCoord = InterpolateTexCoord(TexCoord0, TexCoord1, TexCoord2, Barycentrics);
			AttributeData.TexCoords[TexCoordIndex] = TexCoord.Value;
			AttributeData.TexCoords_DDX[TexCoordIndex] = TexCoord.DDX;
			AttributeData.TexCoords_DDY[TexCoordIndex] = TexCoord.DDY;

			// Generate tangent frame for UV0
			if (TexCoordIndex == 0)
			{
				// Implicit tangent space
				// Based on Christian Schlüler's derivation: http://www.thetenthplanet.de/archives/1180
				// The technique derives a tangent space from the interpolated normal and (position,uv) deltas in two not necessarily orthogonal directions.
				// The described technique uses screen space derivatives as a way to obtain these direction deltas in a pixel shader,
				// but as we have the triangle vertices explicitly available using the local space corner deltas directly is faster and more convenient.

				float3 PointLocal10 = PointLocal1 - PointLocal0;
				float3 PointLocal20 = PointLocal2 - PointLocal0;
				float2 TexCoord10 = TexCoord1 - TexCoord0;
				float2 TexCoord20 = TexCoord2 - TexCoord0;

				bool TangentXValid = abs(TexCoord10.x) + abs(TexCoord20.x) > 1e-6;

				float3 TangentX;
				float3 TangentY;
				if (TangentXValid)
				{
					float3 Perp2 = cross(TangentZ, PointLocal20);
					float3 Perp1 = cross(PointLocal10, TangentZ);
					float3 TangentU = Perp2 * TexCoord10.x + Perp1 * TexCoord20.x;
					float3 TangentV = Perp2 * TexCoord10.y + Perp1 * TexCoord20.y;

					TangentX = normalize(TangentU);
					TangentY = cross(TangentZ, TangentX);

					AttributeData.UnMirrored = dot(TangentV, TangentY) < 0.0f ? -1.0f : 1.0f;
					TangentY *= AttributeData.UnMirrored;
				}
				else
				{
					const float Sign = TangentZ.z >= 0 ? 1 : -1;
					const float a = -rcp( Sign + TangentZ.z );
					const float b = TangentZ.x * TangentZ.y * a;
	
					TangentX = float3(1 + Sign * a * Pow2(TangentZ.x), Sign * b, -Sign * TangentZ.x);
					TangentY = float3(b,  Sign + a * Pow2(TangentZ.y), -TangentZ.y);

					AttributeData.UnMirrored = 1;
				}

				float3x3 TangentToLocal = float3x3(TangentX, TangentY, TangentZ);

				// Should be Pow2(InvScale) but that requires renormalization
				float3x3 LocalToWorld = LWCToFloat3x3(InstanceData.LocalToWorld);
				float3 InvScale = InstanceData.InvNonUniformScale;
				LocalToWorld[0] *= InvScale.x;
				LocalToWorld[1] *= InvScale.y;
				LocalToWorld[2] *= InvScale.z;
				AttributeData.TangentToWorld = mul(TangentToLocal, LocalToWorld);
			}
		}
		else
		{
			AttributeData.TexCoords[TexCoordIndex]		= float2(0, 0);
			AttributeData.TexCoords_DDX[TexCoordIndex]	= float2(0, 0);
			AttributeData.TexCoords_DDY[TexCoordIndex]	= float2(0, 0);
			if (TexCoordIndex == 0)
			{
				AttributeData.TangentToWorld = float3x3(float3(0, 0, 0), float3(0, 0, 0), LWCMultiplyVector(TangentZ * InstanceData.InvNonUniformScale.z, InstanceData.LocalToWorld));
			}
		}
	}
	return AttributeData;
}

FTexCoord GetTexCoord(
	FCluster Cluster,
	uint3 TriIndices,
	FBarycentrics Barycentrics,
	uint TexCoordIndex
)
{
	if (TexCoordIndex >= Cluster.NumUVs)
		return (FTexCoord)0;

	// Unpack and interpolate attributes
	const uint DecodeInfoOffset = Cluster.PageBaseAddress + Cluster.DecodeInfoOffset;
	const uint AttributeDataOffset = Cluster.PageBaseAddress + Cluster.AttributeOffset;

#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
	uint3 ReadOffset = AttributeDataOffset + TriIndices * Cluster.BitsPerAttribute / 8;
	ReadOffset += 12 + 4 + TexCoordIndex * 8;	// Normal + Color + TexCoord
#else
	const uint4 NumColorComponentBits = UnpackToUint4(Cluster.ColorBits, 4);
	
	// Sum U and V bit costs to combined UV bit costs in 8:8:8:8.
	const uint NumUVBits_8888 = (Cluster.UV_Prec & 0x0F0F0F0Fu) + ((Cluster.UV_Prec >> 4) & 0x0F0F0F0Fu);	// 8:8:8:8 (U0+V0, U1+V1, U2+V2, U3+V3)
	const uint UVBitsOffset_8888 = NumUVBits_8888 * 0x01010100u;											// 8:8:8:8 (0, UV0, UV0+UV1, UV0+UV1+UV2)
	const uint TexCoord_OffsetBits = (UVBitsOffset_8888 >> (8 * TexCoordIndex)) & 0xFFu;

	const uint BitOffset = 2 * NANITE_NORMAL_QUANTIZATION_BITS + dot(NumColorComponentBits, 1u) + TexCoord_OffsetBits;

	FBitStreamReaderState AttributeStream0 = BitStreamReader_Create_Aligned(AttributeDataOffset, BitOffset + TriIndices.x * Cluster.BitsPerAttribute, 2 * NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
	FBitStreamReaderState AttributeStream1 = BitStreamReader_Create_Aligned(AttributeDataOffset, BitOffset + TriIndices.y * Cluster.BitsPerAttribute, 2 * NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
	FBitStreamReaderState AttributeStream2 = BitStreamReader_Create_Aligned(AttributeDataOffset, BitOffset + TriIndices.z * Cluster.BitsPerAttribute, 2 * NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
#endif

#if NANITE_USE_UNCOMPRESSED_VERTEX_DATA
	float2 TexCoord0 = asfloat(ClusterPageData.Load2(ReadOffset.x));
	float2 TexCoord1 = asfloat(ClusterPageData.Load2(ReadOffset.y));
	float2 TexCoord2 = asfloat(ClusterPageData.Load2(ReadOffset.z));
#else
	uint2 UVPrec = uint2(BitFieldExtractU32(Cluster.UV_Prec, 4, TexCoordIndex * 8), BitFieldExtractU32(Cluster.UV_Prec, 4, TexCoordIndex * 8 + 4));
	uint2 Bits0_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream0, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
	uint2 Bits1_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream1, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);
	uint2 Bits2_UV = BitStreamReader_Read2_RO(ClusterPageData, AttributeStream2, UVPrec, NANITE_MAX_TEXCOORD_QUANTIZATION_BITS);

	FUVRange UVRange = GetUVRange(ClusterPageData, DecodeInfoOffset, TexCoordIndex);
	float2 TexCoord0 = UnpackTexCoord(Bits0_UV, UVRange);
	float2 TexCoord1 = UnpackTexCoord(Bits1_UV, UVRange);
	float2 TexCoord2 = UnpackTexCoord(Bits2_UV, UVRange);
#endif

	return InterpolateTexCoord(TexCoord0, TexCoord1, TexCoord2, Barycentrics);	
}

// TODO: Move to an appropriate common location outside of Nanite
uint LowerBound(Buffer<uint> SearchBuffer, uint BufferCount, uint Key)
{
	uint Index = 0;
	uint Width = BufferCount >> 1;
	
	UNROLL
	while (Width > 0)
	{
		Index += (Key < SearchBuffer[Index + Width]) ? 0 : Width;
		Width = Width >> 1;
	}
	
	return Index;
}

// TODO: Move to an appropriate common location outside of Nanite
bool BinarySearch(Buffer<uint> SearchBuffer, uint BufferCount, uint Key)
{
	uint Index = LowerBound(SearchBuffer, BufferCount, Key);
	return SearchBuffer[Index] == Key;
}
