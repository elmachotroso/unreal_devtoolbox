// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../Common.ush"
#include "NaniteDataDecode.ush"

#define CULLING_PASS_NO_OCCLUSION				0
#define CULLING_PASS_OCCLUSION_MAIN				1
#define CULLING_PASS_OCCLUSION_POST				2
#define CULLING_PASS_EXPLICIT_LIST				3

uint MaxCandidateClusters;

struct FQueuePassState
{
	uint	ClusterBatchReadOffset;	// Offset in batches
	uint	ClusterWriteOffset;		// Offset in individual clusters
	uint	NodeReadOffset;
	uint	NodeWriteOffset;
	int		NodeCount;				// Can temporarily be conservatively higher
};

struct FQueueState
{
	uint			TotalClusters;
	FQueuePassState PassState[2];
};


struct FCandidateNode
{
	uint	Flags;
	uint	ViewId;
	uint	InstanceId;
	uint	NodeIndex;
	uint	EnabledBitmask;
};

uint GetCandidateNodeSize(bool bPostPass)		{ return bPostPass ? 12u : 8u; }
uint GetCandidateClusterSize()					{ return 8u; }
uint GetMaxClusterBatches()						{ return MaxCandidateClusters / NANITE_PERSISTENT_CLUSTER_CULLING_GROUP_SIZE; }

// NodesAndClusterBatches layout: Main Cluster Batches, Main Candidate Nodes, Post Cluster Batches, Post Candidate Nodes
uint GetClusterBatchesOffset()					{ return 0u; }
uint GetCandidateNodesOffset()					{ return GetMaxClusterBatches() * 4u; }
uint GetNodesAndBatchesOffset(bool bPostPass)	{ return bPostPass ? (GetCandidateNodesOffset() + MaxNodes * GetCandidateNodeSize(false)) : 0u; }
uint GetCandidateClusterOffset()				{ return 0u; }

FVisibleCluster LoadCandidateClusterCoherent(globallycoherent RWCoherentByteAddressBuffer CandidateClusters, uint ClusterIndex)
{
	checkSlow(ClusterIndex < MaxCandidateClusters);
	uint4 RawData = uint4(CandidateClusters.Load2(GetCandidateClusterOffset() + ClusterIndex * GetCandidateClusterSize()), 0u, 0u);
	return UnpackVisibleCluster(RawData, false);
}

// CandidateClusters must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
void StoreCandidateClusterCoherentNoCheck(globallycoherent RWCoherentByteAddressBuffer CandidateClusters, uint ClusterIndex, FVisibleCluster VisibleCluster)
{
	uint4 RawData = PackVisibleCluster(ClusterIndex, VisibleCluster, false);
	CandidateClusters.Store2(GetCandidateClusterOffset() + ClusterIndex * GetCandidateClusterSize(), RawData.xy);
}

// CandidateClusters must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
void StoreCandidateClusterCoherent(globallycoherent RWCoherentByteAddressBuffer CandidateClusters, uint ClusterIndex, FVisibleCluster VisibleCluster)
{
	checkSlow(ClusterIndex < MaxCandidateClusters);
	StoreCandidateClusterCoherentNoCheck(CandidateClusters, ClusterIndex, VisibleCluster);
}

void StoreVisibleCluster(RWByteAddressBuffer VisibleClusters, uint ClusterIdx, FVisibleCluster VisibleCluster, bool bHasPageData = false)
{
	uint4 RawData = PackVisibleCluster(ClusterIdx, VisibleCluster, bHasPageData);
	if (bHasPageData)
	{
		VisibleClusters.Store3(ClusterIdx * 12, RawData.xyz);
	}
	else
	{
		VisibleClusters.Store2(ClusterIdx * 8, RawData.xy);
	}
}

uint4 PackCandidateNode(FCandidateNode Node)
{
	// Leave at least one bit unused in each of the fields, so 0xFFFFFFFFu is never a valid value. Checked in C++ code.
	uint4 RawData;
	RawData.x = (Node.InstanceId << NANITE_NUM_CULLING_FLAG_BITS) | Node.Flags;
	RawData.y = (Node.ViewId << NANITE_MAX_NODES_PER_PRIMITIVE_BITS) | Node.NodeIndex;
	RawData.z = Node.EnabledBitmask;
	RawData.w = 0;
	return RawData;
}

FCandidateNode UnpackCandidateNode(uint4 RawData, bool bHasEnabledMask)
{
	FCandidateNode Node;
	Node.Flags			= BitFieldExtractU32(RawData.x, NANITE_NUM_CULLING_FLAG_BITS, 0);
	Node.InstanceId		= BitFieldExtractU32(RawData.x, NANITE_MAX_INSTANCES_BITS, NANITE_NUM_CULLING_FLAG_BITS);
	Node.NodeIndex		= BitFieldExtractU32(RawData.y, NANITE_MAX_NODES_PER_PRIMITIVE_BITS, 0);
	Node.ViewId			= BitFieldExtractU32(RawData.y, NANITE_MAX_VIEWS_PER_CULL_RASTERIZE_PASS_BITS, NANITE_MAX_NODES_PER_PRIMITIVE_BITS);
	Node.EnabledBitmask = bHasEnabledMask ? RawData.z : 0xFFFFFFFFu;
	return Node;
}

bool IsNodeDataReady(uint4 RawData, bool bHasEnabledMask)
{
	return RawData.x != 0xFFFFFFFFu && RawData.y != 0xFFFFFFFFu && (!bHasEnabledMask || RawData.z != 0xFFFFFFFFu);
}

// NodesAndClusterBatches must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
uint4 LoadCandidateNodeDataCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	const uint Offset = GetNodesAndBatchesOffset(bPostPass) + GetCandidateNodesOffset();
	return bPostPass ?	uint4(NodesAndClusterBatches.Load3(Offset + NodeIndex * 12), 0) :
						uint4(NodesAndClusterBatches.Load2(Offset + NodeIndex * 8), 0, 0);
}

void StoreCandidateNodeData(RWByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, uint4 RawData, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	const uint Offset = GetNodesAndBatchesOffset(bPostPass) + GetCandidateNodesOffset();
	if (bPostPass)
		NodesAndClusterBatches.Store3(Offset + NodeIndex * 12, RawData.xyz);
	else
		NodesAndClusterBatches.Store2(Offset + NodeIndex * 8, RawData.xy);
}

// NodesAndClusterBatches must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
void StoreCandidateNodeDataCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, uint4 RawData, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	const uint Offset = GetNodesAndBatchesOffset(bPostPass) + GetCandidateNodesOffset();
	if (bPostPass)
		NodesAndClusterBatches.Store3(Offset + NodeIndex * 12, RawData.xyz);
	else
		NodesAndClusterBatches.Store2(Offset + NodeIndex * 8, RawData.xy);
}

void StoreCandidateNode(RWByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, FCandidateNode Node, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	StoreCandidateNodeData(NodesAndClusterBatches, NodeIndex, PackCandidateNode(Node), bPostPass);
}

// NodesAndClusterBatches must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
void StoreCandidateNodeCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, FCandidateNode Node, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	StoreCandidateNodeDataCoherent(NodesAndClusterBatches, NodeIndex, PackCandidateNode(Node), bPostPass);
}

void ClearCandidateNode(RWByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	StoreCandidateNodeData(NodesAndClusterBatches, NodeIndex, 0xFFFFFFFFu, bPostPass);
}

// NodesAndClusterBatches must be globallycoherent here, otherwise DXC will make buffer access non-globallycoherent when targeting SM6.6.
void ClearCandidateNodeCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint NodeIndex, bool bPostPass)
{
	checkSlow(NodeIndex < MaxNodes);
	StoreCandidateNodeDataCoherent(NodesAndClusterBatches, NodeIndex, 0xFFFFFFFFu, bPostPass);
}

uint LoadClusterBatchCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint BatchIndex, bool bPostPass)
{
	checkSlow(BatchIndex < GetMaxClusterBatches());
	return NodesAndClusterBatches.Load(GetNodesAndBatchesOffset(bPostPass) + GetClusterBatchesOffset() + BatchIndex * 4);
}

void AddToClusterBatchCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint BatchIndex, uint Add, bool bPostPass)
{
	checkSlow(BatchIndex < GetMaxClusterBatches());
	NodesAndClusterBatches.InterlockedAdd(GetNodesAndBatchesOffset(bPostPass) + GetClusterBatchesOffset() + BatchIndex * 4, Add);
}

void ClearClusterBatch(RWByteAddressBuffer NodesAndClusterBatches, uint BatchIndex, bool bPostPass)
{
	checkSlow(BatchIndex < GetMaxClusterBatches());
	NodesAndClusterBatches.Store(GetNodesAndBatchesOffset(bPostPass) + GetClusterBatchesOffset() + BatchIndex * 4, 0);
}

void ClearClusterBatchCoherent(globallycoherent RWCoherentByteAddressBuffer NodesAndClusterBatches, uint BatchIndex, bool bPostPass)
{
	checkSlow(BatchIndex < GetMaxClusterBatches());
	NodesAndClusterBatches.Store(GetNodesAndBatchesOffset(bPostPass) + GetClusterBatchesOffset() + BatchIndex * 4, 0);
}