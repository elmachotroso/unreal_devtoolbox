// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneTextureParameters.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShaderDrawDebug.ush"
#include "../ShaderPrintCommon.ush"
#include "../PositionReconstructionCommon.ush"  
#include "HairStrandsVisibilityCommon.ush"
#include "HairStrandsVoxelPageCommon.ush"
#include "../ColorMap.ush"  

#define VOXEL_TRAVERSAL_DEBUG_PAGEOCCUPANCY 0
#define VOXEL_TRAVERSAL_DEBUG 0
#define VOXEL_TRAVERSAL_FORCE_MIP_ENABLE 1
#if PERMUTATION_TRAVERSAL == 1
	#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LINEAR_MIPMAP
#else
	#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LINEAR
#endif
#include "HairStrandsVoxelPageTraversal.ush"

float2 OutputResolution; 
uint bDrawPage;
int ForcedMipLevel;
uint MacroGroupId;
uint MacroGroupCount;
uint MaxTotalPageIndexCount;

RWTexture2D<float4> OutputTexture;
Buffer<uint> TotalValidPageCounter;

#define VOXEL_BLOCK 0 
#define VOXEL_SMOOTH 1
#define VOXEL_FILTERING VOXEL_BLOCK

uint GetVoxelPageIndex(uint3 InPageIndexCoord, uint3 InPageIndexResolution, uint InLinearPageIndexOffset)
{
	const uint LinearPageIndexCoord = CoordToIndex(InPageIndexCoord, InPageIndexResolution, InLinearPageIndexOffset);
	return VirtualVoxel.PageIndexBuffer.Load(LinearPageIndexCoord);
}

uint2 GetVoxelPageIndexOccupancy(uint3 InPageIndexCoord, uint3 InPageIndexResolution, uint InLinearPageIndexOffset)
{
	const uint LinearPageIndexCoord = CoordToIndex(InPageIndexCoord, InPageIndexResolution, InLinearPageIndexOffset);
	return VirtualVoxel.PageIndexOccupancyBuffer.Load(LinearPageIndexCoord);
}

FFontColor GetOccupancyColor(float In)
{
	float3 Color = lerp(float3(0, 1, 0), float3(1, 0, 0), saturate(In));
	return InitFontColor(Color);
}

[numthreads(8, 8, 1)]
void MainCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const float2 PixelCoord = DispatchThreadId.xy + 0.5f;
	const float2 UV = PixelCoord / float2(OutputResolution);

	const FPackedVirtualVoxelNodeDesc PackedNode = VirtualVoxel.NodeDescBuffer[MacroGroupId];
	const FVirtualVoxelNodeDesc NodeDesc = UnpackVoxelNode(PackedNode, VirtualVoxel.PageResolution);
	const bool bIsNodeValid = all(NodeDesc.PageIndexResolution != 0);

	// Draw macro group AABB & debug infos
	if (uint(PixelCoord.x) == 0 && uint(PixelCoord.y) == 0)
	{
		const uint TotalPageIndexCount = MaxTotalPageIndexCount;
		const uint TotalPageCount = VirtualVoxel.PageCountResolution.x * VirtualVoxel.PageCountResolution.y * VirtualVoxel.PageCountResolution.z;
		const uint TotalAllocatedValidPageCount = TotalValidPageCounter.Load(0);
		uint TotalAllocatedPageCount = 0;
		for (uint MacroGroupIt = 0; MacroGroupIt < MacroGroupCount; ++MacroGroupIt)
		{
			const FPackedVirtualVoxelNodeDesc LocalPackedNode = VirtualVoxel.NodeDescBuffer[MacroGroupIt];
			const FVirtualVoxelNodeDesc LocalNodeDesc = UnpackVoxelNode(LocalPackedNode, VirtualVoxel.PageResolution);
			TotalAllocatedPageCount += LocalNodeDesc.PageIndexResolution.x * LocalNodeDesc.PageIndexResolution.y * LocalNodeDesc.PageIndexResolution.z;
		}

		AddAABBTWS(NodeDesc.TranslatedWorldMinAABB, NodeDesc.TranslatedWorldMaxAABB, ColorOrange);

		// General information
		// General
		//  Voxel World size        : 
		//  Page Resolution         :
		//  Page Count Resolution   :
		//  Page Texture Resolution :
		//
		//  Total Allocatled Page Index   :
		//  Total Page Index              :
		//  Total Page Index Occupancy    :
		//
		//  Total Allocated Page          :
		//  Total Page                    :
		//  Total Page Occupancy          :
		if (MacroGroupId == 0)
		{
			float2 StartPos = float2(50.0f, 100.0f ) / OutputResolution;
			float2 Pos = StartPos;

			// Adaptive voxels
			Pos = ShaderPrintText(Pos, TEXT("Adapative "), FontOrange);
			if (VirtualVoxel.AdaptiveEnable)
			{
				Pos = ShaderPrintText(Pos, TEXT("True"), FontGreen);
			}
			else
			{
				Pos = ShaderPrintText(Pos, TEXT("False"), FontRed);
			}
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Requested Voxel Size "));
			Pos = ShaderPrint(Pos, VirtualVoxel.AdaptiveRequestedVoxelWorldSize);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Target Voxel Size "));
			Pos = ShaderPrint(Pos, VirtualVoxel.AdaptiveTargetVoxelWorldSize);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			// Actual voxel/pages size & resolution
			Pos = ShaderPrintText(Pos, TEXT("Voxel World Size "), FontOrange);
			Pos = ShaderPrint(Pos, VirtualVoxel.VoxelWorldSize, FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			
			Pos = ShaderPrintText(Pos, TEXT("Page Res         "));
			Pos = ShaderPrint(Pos, VirtualVoxel.PageResolution);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Page Count Res   "));
			Pos = ShaderPrint(Pos, VirtualVoxel.PageCountResolution.x);
			Pos = ShaderPrint(Pos, VirtualVoxel.PageCountResolution.y);
			Pos = ShaderPrint(Pos, VirtualVoxel.PageCountResolution.z);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Page Texture Res "), FontEmerald);
			Pos = ShaderPrint(Pos, VirtualVoxel.PageTextureResolution.x, FontEmerald);
			Pos = ShaderPrint(Pos, VirtualVoxel.PageTextureResolution.y, FontEmerald);
			Pos = ShaderPrint(Pos, VirtualVoxel.PageTextureResolution.z, FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			// Total page indices stats
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Total Allocated Page Index  "));
			Pos = ShaderPrint(Pos, TotalAllocatedPageCount);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Total Page Index            "));
			Pos = ShaderPrint(Pos, TotalPageIndexCount);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			const float PageIndexOccupancy = TotalAllocatedPageCount / float(TotalPageIndexCount);
			Pos = ShaderPrintText(Pos, TEXT("Page Index Occupancy        "), FontOrange);
			Pos = ShaderPrint(Pos, PageIndexOccupancy * 100.f, GetOccupancyColor(PageIndexOccupancy));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			// Total pages stats
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Total Allocated Valid Page  "));
			Pos = ShaderPrint(Pos, TotalAllocatedValidPageCount);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Total Page                  "));
			Pos = ShaderPrint(Pos, TotalPageCount);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			const float PageOccupancy = TotalAllocatedValidPageCount / float(TotalPageCount);
			Pos = ShaderPrintText(Pos, TEXT("Page Occupancy              "), FontOrange);
			Pos = ShaderPrint(Pos, PageOccupancy * 100.f, GetOccupancyColor(PageOccupancy));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("Translated world offset     "), FontOrange);
			Pos = ShaderPrint(Pos, VirtualVoxel.TranslatedWorldOffset);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
		}

		// MacroGroupId XX
		//  Page Index Resolution: X Y Z (Linear/Total - %) 
		//  Virtual Resolution   : X Y Z
		//  Page Index Offset    : O
		if (MacroGroupId == 0)
		{
			float2 StartPos = float2(50.0f, 420.0f) / OutputResolution;
			float2 Pos = StartPos;

			Pos = ShaderPrintText(Pos, TEXT("Macro Group        "), FontOrange);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT(" Virtual Res X     "), FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrintText(Pos, TEXT(" Virtual Res Y     "), FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrintText(Pos, TEXT(" Virtual Res Z     "), FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT(" Page Index Res X  "));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrintText(Pos, TEXT(" Page Index Res Y  "));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrintText(Pos, TEXT(" Page Index Res Z  "));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT(" Page Index Offset "));
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
		}

		{
			float2 StartPos = float2(250.0f + float(MacroGroupId) * 35.0f, 420.0f) / OutputResolution;
			float2 Pos = StartPos;

			Pos = ShaderPrint(Pos, MacroGroupId, FontOrange);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrint(Pos, NodeDesc.VirtualResolution.x, FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrint(Pos, NodeDesc.VirtualResolution.y, FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrint(Pos, NodeDesc.VirtualResolution.z, FontEmerald);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrint(Pos, NodeDesc.PageIndexResolution.x, FontYellow);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrint(Pos, NodeDesc.PageIndexResolution.y, FontYellow);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			Pos = ShaderPrint(Pos, NodeDesc.PageIndexResolution.z, FontYellow);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrint(Pos, NodeDesc.PageIndexOffset, FontSilver);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
		}
	}

	bool bIsValid = false;
	float3 HitColor = 0;
	if (bDrawPage > 0)
	{
		// Reverse-Z
		const float3 O = PrimaryView.TranslatedWorldCameraOrigin;
		const float3 E = ReconstructTranslatedWorldPositionFromDepth(UV, ConvertFromDeviceZ(0.0001f));
		const float3 D = (E - O);

		float PixelRadius = -1;
		const float2 HitT = LineBoxIntersect(O, E, NodeDesc.TranslatedWorldMinAABB, NodeDesc.TranslatedWorldMaxAABB);
		float AccDensity = 0;
		if (HitT.x < HitT.y)
		{
			// Use different offseting to see either: 
			// * Individual voxel (for debugging mainly)
			// * Smoothed voxel (as used for transmittance computation)
		#if VOXEL_FILTERING == VOXEL_BLOCK
			const float3 Offset = 0;
			const float Dither = InterleavedGradientNoise(PixelCoord.xy, 1);
		#endif
		#if VOXEL_FILTERING == VOXEL_SMOOTH
			const float3 Offset = float3(InterleavedGradientNoise(PixelCoord.xy, 1), InterleavedGradientNoise(PixelCoord.xy, 2), InterleavedGradientNoise(PixelCoord.xy, 3));
			const float Dither = 0;
		#endif


			// Intersect the indirection table to see if a brick is empty or not
			const uint MaxStep = 256;
			const float Delta = (HitT.y-HitT.x)/float(MaxStep);
			for (uint StepIt=0; StepIt<MaxStep; ++StepIt)
			{			
				const float3 HitP = Offset + O + ((Dither+StepIt)*Delta + HitT.x) * D;
				const int3 PageIndexCoord = PositionToCoord(HitP, NodeDesc.TranslatedWorldMinAABB, NodeDesc.TranslatedWorldMaxAABB, NodeDesc.PageIndexResolution);
				const uint PageIndex = GetVoxelPageIndex(PageIndexCoord, NodeDesc.PageIndexResolution, NodeDesc.PageIndexOffset);

				bool bHasValidData = true;
				if (bDrawPage == 2)
				{
					const uint2 PageIndexOccuancy = GetVoxelPageIndexOccupancy(PageIndexCoord, NodeDesc.PageIndexResolution, NodeDesc.PageIndexOffset);
					const int3 VoxelCoord = PositionToCoord(HitP, NodeDesc.TranslatedWorldMinAABB, NodeDesc.TranslatedWorldMaxAABB, NodeDesc.VirtualResolution);
					const int3 VoxelBasePageCoord = PageIndexCoord * VirtualVoxel.PageResolution;
					const int3 VoxelRelativeCoord = VoxelCoord - VoxelBasePageCoord;
					bHasValidData = DoesVoxelContainData(PageIndexOccuancy, VoxelRelativeCoord);
				}

				if (PageIndex != INVALID_VOXEL_PAGE_INDEX && bHasValidData)
				{
					const uint3 PageCoord = IndexToCoord(PageIndex, VirtualVoxel.PageCountResolution);

					AccDensity = 1;
					bIsValid = true;
					HitColor = PageCoord / 12.f;
					break;
				}
			}
		}
	}
	else 
	{
		FHairTraversalResult TraversalResult = (FHairTraversalResult)0;

		const float DistanceThreshold = 10000;
		const bool bDebugEnabled = false;
		const float3 SampleRandom = GetHairVoxelJitter(PixelCoord, View.StateFrameIndexMod8, VirtualVoxel.JitterMode);

		const float3 TranslatedWP0 = PrimaryView.TranslatedWorldCameraOrigin;
		const float3 E = ReconstructTranslatedWorldPositionFromDepth(UV, ConvertFromDeviceZ(0.0001f));
		const float3 TranslatedWP1 = normalize(E - TranslatedWP0) * DistanceThreshold + TranslatedWP0;

		FVirtualVoxelCommonDesc CommonDesc;
		CommonDesc.PageCountResolution	= VirtualVoxel.PageCountResolution;
		CommonDesc.VoxelWorldSize		= VirtualVoxel.VoxelWorldSize;
		CommonDesc.PageTextureResolution= VirtualVoxel.PageTextureResolution;
		CommonDesc.PageResolution		= VirtualVoxel.PageResolution;

		if (bIsNodeValid)
		{
			FHairTraversalSettings TraversalSettings = InitHairTraversalSettings();
			TraversalSettings.DensityScale		= VirtualVoxel.DensityScale;
			TraversalSettings.CountThreshold	= GetOpaqueVoxelValue();
			TraversalSettings.DistanceThreshold = DistanceThreshold;
			TraversalSettings.bDebugEnabled		= bDebugEnabled;
			TraversalSettings.SteppingScale		= VirtualVoxel.SteppingScale_Shadow;
			TraversalSettings.Random			= SampleRandom;
			TraversalSettings.TanConeAngle		= 0;
			TraversalSettings.bIsPrimaryRay		= true;
			TraversalSettings.PixelRadius		= -1;
			TraversalSettings.ForcedMip			= ForcedMipLevel;

			TraversalResult = ComputeHairCountVirtualVoxel(
				TranslatedWP0,
				TranslatedWP1,
				CommonDesc,
				NodeDesc,
				VirtualVoxel.PageIndexBuffer,
				VirtualVoxel.PageIndexOccupancyBuffer,
				VirtualVoxel.PageTexture,
				TraversalSettings);

			HitColor = GetHSVDebugColor(saturate(TraversalResult.HairCount / 16));
			bIsValid = TraversalResult.HairCount > 0;
		}

		const bool bIsPixelEnable = all(int2(PixelCoord) == GetCursorPos());
		if (bIsPixelEnable && bIsValid)
		{
			float2 StartPos = float2(50.0f, 50.0f) / OutputResolution;
			float2 Pos = StartPos;

			Pos = ShaderPrintText(Pos, TEXT("X, Y "));
			Pos = ShaderPrint(Pos, GetCursorPos());
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;

			Pos = ShaderPrintText(Pos, TEXT("T.Count "));
			Pos = ShaderPrint(Pos, TraversalResult.HairCount);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
			
			Pos = ShaderPrintText(Pos, TEXT("T.Visibility "));
			Pos = ShaderPrint(Pos, TraversalResult.Visibility);
			Pos = ShaderPrintNewline(Pos); Pos.x = StartPos.x;
		}
	}

	if (bIsValid)
	{
		OutputTexture[DispatchThreadId.xy] = float4(HitColor, 1);
	}
}
