// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "HairStrandsVisibilityCommon.ush"

#define OUTPUT_DEPTH 0
#define OUTPUT_GBUFFER 1 
#define OUTPUT_LIGHTCHANNEL 2
#define OUTPUT_GBUFFER_LIGHTCHANNEL 3

// Manual binding of the sample data as the uniform buffer is not created at this point
Texture2D<float>					CoverageTexture;
Texture2D<uint>						HairSampleOffset;
StructuredBuffer<FPackedHairSample> HairSampleData;

#if PERMUTATION_OUTPUT_TYPE == OUTPUT_GBUFFER_LIGHTCHANNEL || PERMUTATION_OUTPUT_TYPE == OUTPUT_LIGHTCHANNEL
RWTexture2D<uint> OutLightChannelMaskTexture;
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct FHairSampleData
{
	float DeviceZ;
	uint LightChannelMask;
};

FHairSampleData ExtractSampleData(uint3 PixelCoord)
{
	FHairSampleData Out = (FHairSampleData)0; // Inverse-Z

	const FNodeDesc NodeDesc = DecodeNodeDesc(HairSampleOffset.Load(PixelCoord));
	LOOP
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint SampleIndex = NodeDesc.Offset + SampleIt;
		const FHairSample Sample = UnpackHairSample(HairSampleData[SampleIndex]);
		Out.DeviceZ = max(Out.DeviceZ, Sample.Depth); // Inverse-Z
		Out.LightChannelMask |= Sample.LightChannelMask;
	}
	return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gbuffer patching (+ LightChannel mask)
#if PERMUTATION_OUTPUT_TYPE == OUTPUT_GBUFFER || PERMUTATION_OUTPUT_TYPE == OUTPUT_GBUFFER_LIGHTCHANNEL
void MainPS(
	in FScreenVertexOutput Input,
	out float SvDepth		: SV_DEPTH,
	out float4 OutGBufferB	: SV_Target0,
	out float4 OutGBufferC	: SV_Target1,
	out float4 OutColor		: SV_Target2
)
{
	const uint3 PixelCoord = uint3(Input.Position.xy, 0);
	const float Coverage = CoverageTexture.Load(PixelCoord);

	#if PERMUTATION_OUTPUT_TYPE == OUTPUT_GBUFFER
	if (Coverage < 1.0f)
	{
		discard;
	}
	#endif

	// Add a depth bias in order to avoid precision issue during the composition pass, which would reject certain samples.
	// This depth is only used for screen passes like AO/SSGI/... so no need to be very accurate
	const float DepthBias = 0.001f; 
	const FHairSampleData SampleData = ExtractSampleData(PixelCoord);
	SvDepth = SampleData.DeviceZ - DepthBias;
	OutGBufferB = float4(0, 0, 0, 0); // EncodeShadingModelIdAndSelectiveOutputMask(SHADINGMODELID_HAIR, 0)
	OutGBufferC = 0;
	OutColor = 0;

	#if PERMUTATION_OUTPUT_TYPE == OUTPUT_GBUFFER_LIGHTCHANNEL
	OutLightChannelMaskTexture[PixelCoord.xy] = SampleData.LightChannelMask;
	if (Coverage < 1.0f)
	{
		discard;
	}
	#endif
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LightChannel mask only
#if PERMUTATION_OUTPUT_TYPE == OUTPUT_LIGHTCHANNEL
void MainPS(
	in FScreenVertexOutput Input)
{
	const uint3 PixelCoord = uint3(Input.Position.xy, 0);
	OutLightChannelMaskTexture[PixelCoord.xy] = ExtractSampleData(PixelCoord).LightChannelMask;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Depth only
#if PERMUTATION_OUTPUT_TYPE == OUTPUT_DEPTH
uint bClear;
void MainPS(
	in FScreenVertexOutput Input,
	out float SvDepth : SV_DEPTH)
{
	SvDepth = 0; // Inverse-Z
	if (bClear == 0)
	{
		SvDepth = ExtractSampleData(uint3(Input.Position.xy, 0)).DeviceZ;
	}
}
#endif