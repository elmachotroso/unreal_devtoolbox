// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------- CONFIGS

#define DEBUG_SSRT 0

#if PROBE_HIERARCHY_ID != (PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH - 1)
	#define CONFIG_RAY_STEPS 16
#else
	#define CONFIG_RAY_STEPS 8
#endif



//------------------------------------------------------- INCLUDES

#include "SSRTRayCast.ush"
#include "../Lumen/ProbeHierarchy/LumenProbeTracing.ush"


//------------------------------------------------------- PARAMETERS

uint bRejectUncertainRays;
uint bTerminateCertainRay;

Texture2D FurthestHZBTexture;
Texture2D ColorTexture;

#if SUPPORTS_INDEPENDENT_SAMPLERS

#define FurthestHZBTextureSampler GlobalPointClampedSampler
#define ColorTextureSampler GlobalPointClampedSampler

#else

SamplerState FurthestHZBTextureSampler;
SamplerState ColorTextureSampler;

#endif

float4 HZBUvFactorAndInvFactor;
float4 ColorBufferScaleBias;
float2 ReducedColorUVMax;

float FurthestHZBStartMipLevel;
float PixelPositionToFullResPixel;
float2 FullResPixelOffset;


//------------------------------------------------------- ENTRY POINTS

#ifndef DIM_TRACING_PERMUTATION

RWBuffer<uint> DispatchParametersOutput;

[numthreads(PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH, 1, 1)]
void SetupIndirectParametersCS(uint GroupThreadIndex : SV_GroupIndex)
{
	if (GroupThreadIndex < PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH)
	{
		SetupDispatchParameters(PROBE_TRACING_INTERLEAVING, /* HierarchyId = */ GroupThreadIndex, /* out  */ DispatchParametersOutput);
	}
}

#else

[numthreads(PROBE_TRACING_LANE_COUNT, 1, 1)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	FProbeTracingCtx ProbeTracingCtx;
	InitProbeTracingContext(/* out */ ProbeTracingCtx, PROBE_TRACING_INTERLEAVING, GroupId, GroupThreadIndex, /* bIsFirstTracingPass = */ true);

	BRANCH
	if (ProbeTracingCtx.bEarlyReturn)
	{
		return;
	}
	
	float3 Lighting;
	bool bFullyTraced;
	bool bHit;
	BRANCH
	if (ProbeTracingCtx.bTraceRay)
	{
		float ProbeTMin;
		float ProbeTMax;
		GetProbeTracingRange(ProbeTracingCtx, /* out */ ProbeTMin, /* out */ ProbeTMax);

		bool bExtendRayToScreenBorder = false;
		if (isinf(ProbeTMax))
		{
			ProbeTMax = GetProbeDepth(ProbeTracingCtx.ProbeInfo);
			bExtendRayToScreenBorder = true;
		}

		float RayRoughness = bExtendRayToScreenBorder ? 1 : 0.2;
		
		float SceneDepth = GetProbeDepth(ProbeTracingCtx.ProbeInfo);
		uint2 ProbePixelPosition = GetProbePixelPos(ProbeTracingCtx.ProbeInfo, ProbeTracingCtx.HierarchyLevel.Id);
		float StepOffset = InterleavedGradientNoise(ProbePixelPosition, View.StateFrameIndexMod8);
	
		float3 WorldConeDirection = ProbeTracingCtx.WorldDirection;

		//float FinalMinSampleRadius = max(MinSampleRadius, tan(DiffuseConeHalfAngle) * FinalMinTraceDistance);

		bool bRayWasClipped;
		FSSRTRay Ray = InitScreenSpaceRayFromWorldSpace(
			ProbeTracingCtx.ProbeInfo.TranslatedWorldPosition + WorldConeDirection * ProbeTMin, // TODO: passdown TMin instead
			WorldConeDirection,
			/* WorldTMax = */ ProbeTMax - ProbeTMin,
			/* SceneDepth = */ SceneDepth,
			/* SlopeCompareToleranceScale */ 4.0f,
			bExtendRayToScreenBorder,
			/* out */ bRayWasClipped);


		FSSRTCastingSettings CastSettings = CreateDefaultCastSettings();
		CastSettings.bStopWhenUncertain = true;

		float Level;
		float3 HitUVz;
		bool bUncertain;
		float3 DebugOutput;
		CastScreenSpaceRay(
			FurthestHZBTexture, FurthestHZBTextureSampler,
			FurthestHZBStartMipLevel,
			CastSettings,
			Ray, RayRoughness, CONFIG_RAY_STEPS, StepOffset,
			HZBUvFactorAndInvFactor, /* bDebugPrint = */ false,
			/* out */ DebugOutput,
			/* out */ HitUVz,
			/* out */ Level,
			/* out */ bHit,
			/* out */ bUncertain);

		// Ray is also uncertain if it has been clipped.
		bUncertain = bUncertain || bRayWasClipped;

		// If ray is uncertain, don't take risk bleeding through a wall that fall back tracing method might find.
		bHit = bHit && (!bUncertain || bRejectUncertainRays == 0);

		#if 0 // Backface check
		if (bHit)
		{
			float3 SampleNormal = GetGBufferDataFromSceneTextures(HitUVz.xy).WorldNormal;
			bHit = dot(SampleNormal, WorldConeDirection) < 0;
		}
		#endif
			
		// if there was a hit
		BRANCH
		if (bHit)
		{
			float2 ReducedColorUV =  HitUVz.xy * ColorBufferScaleBias.xy + ColorBufferScaleBias.zw;
			ReducedColorUV = min(ReducedColorUV, ReducedColorUVMax);

			Lighting = ColorTexture.SampleLevel(ColorTextureSampler, ReducedColorUV, Level).rgb;
		}
		else
		{
			Lighting = 0.0;
		}

		// If the ray was certain, consider this ray fully traced to not pay the cost on fall back.
		bFullyTraced = (bExtendRayToScreenBorder || bTerminateCertainRay == 0) ? bHit : !bUncertain;
	}
	else // if (!ProbeTracingCtx.bTraceRay)
	{
		Lighting = 0.0;
		bFullyTraced = false;
		bHit = false;
	}

	OutputProbeRays(ProbeTracingCtx, Lighting, bFullyTraced, bHit);
}

#endif
