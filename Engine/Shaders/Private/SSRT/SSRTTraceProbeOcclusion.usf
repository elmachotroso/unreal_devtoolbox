// Copyright Epic Games, Inc. All Rights Reserved.

// Generate vector truncation warnings to errors.
#pragma warning(error: 3206)


//------------------------------------------------------- CONFIGS

#define DEBUG_SSRT 0
#define DEBUG_RAY_COUNT 0

#define CONFIG_WAVE_LAYOUT WAVE_LAYOUT_ONE_WAVE_PER_TILE
#define CONFIG_IS_FIRST_PASS 1

#define CONFIG_RAY_STEPS 8


//------------------------------------------------------- INCLUDES

#define IS_SSGI_SHADER 1

#include "SSRTRayCast.ush"
#include "SSRTTileClassificationBuffer.ush"
#include "../DeferredShadingCommon.ush"
#include "../Random.ush"
#include "../BRDF.ush"
#include "../MonteCarlo.ush"
#include "../Lumen/FinalGather/LumenProbeOcclusion.ush"


//------------------------------------------------------- PARAMETERS

uint bRejectUncertainRays;

Texture2D FurthestHZBTexture;
Texture2D ColorTexture;
Texture2D AlphaTexture;

#if SUPPORTS_INDEPENDENT_SAMPLERS

#define FurthestHZBTextureSampler GlobalPointClampedSampler
#define ColorTextureSampler GlobalPointClampedSampler
#define AlphaTextureSampler GlobalPointClampedSampler

#else

SamplerState FurthestHZBTextureSampler;
SamplerState ColorTextureSampler;
SamplerState AlphaTextureSampler;

#endif

float4 HZBUvFactorAndInvFactor;
float4 ColorBufferScaleBias;
float2 ReducedColorUVMax;

float PixelPositionToFullResPixel;
float2 FullResPixelOffset;


//------------------------------------------------------- RAY TRACING ENTRY POINT

struct FTracingLaneCtx
{
	FSSRTCastingSettings CastSettings;
};

FTracingLaneCtx InitTracingLaneCtx(FTracingPixelInfos PixelInfos)
{
	FTracingLaneCtx LaneCtx;
	LaneCtx.CastSettings = CreateDefaultCastSettings();

	#if 0
		uint2 TileClassificationCoord = RayInfos.GroupId / (uint2(SSRT_TILE_RES_DIVISOR / TILE_PIXEL_SIZE_X, SSRT_TILE_RES_DIVISOR / TILE_PIXEL_SIZE_Y));
		CastSettings.bUseTileInfo = true;
		CastSettings.TileInfos = LoadTileInfos(TileClassificationCoord);
	#endif

	return LaneCtx;
}

void TraceRay(
	FTracingLaneCtx LaneCtx,
	FTracingPixelInfos PixelInfos,
	FTracingRayInfos RayInfos,
	out float3 Lighting,
	out bool bFullyTraced,
	out bool bHit)
{
	float StepOffset = InterleavedGradientNoise(PixelInfos.PixelPosition + 0.5, View.StateFrameIndexMod8);
	
	bool bDebugPrint = all(PixelInfos.PixelPosition == uint2(View.ViewSizeAndInvSize.xy) / 2);

	// Initialize the ray
	float RayRoughness; // TODO

	FSSRTRay Ray;
	bool bRayWasClipped;

	if (RayInfos.BxDFSample.Term != SHADING_TERM_SPECULAR)
	{
		float WorldTMaxTightness = (1.0 + rcp(CONFIG_RAY_STEPS));

		Ray = InitScreenSpaceRayFromWorldSpace(
			PixelInfos.TranslatedWorldPosition, RayInfos.BxDFSample.L,
			/* WorldTMax = */ RayInfos.TMax * WorldTMaxTightness,
			/* SceneDepth = */ PixelInfos.GBuffer.Depth,
			/* SlopeCompareToleranceScale */ 2.0f,
			/* bExtendRayToScreenBorder = */ false,
			/* out */ bRayWasClipped);

		StepOffset -= 0.9;
		RayRoughness = 0.1;
	}
	else
	{
		Ray = InitScreenSpaceRayFromWorldSpace(
			PixelInfos.TranslatedWorldPosition, RayInfos.BxDFSample.L,
			/* WorldTMax = */ RayInfos.TMax,
			/* SceneDepth = */ PixelInfos.GBuffer.Depth,
			/* SlopeCompareToleranceScale */ 2.0f,
			/* bExtendRayToScreenBorder = */ false,
			/* out */ bRayWasClipped);
				
		RayRoughness = PixelInfos.GBuffer.Roughness;
	}

	// Cast the ray
	float Level;
	float3 HitUVz;
	bool bUncertain;
	float3 DebugOutput;
	{
		CastScreenSpaceRay(
			FurthestHZBTexture, FurthestHZBTextureSampler,
			/* StartMipLevel = */ 1.0,
			LaneCtx.CastSettings,
			Ray, RayRoughness, CONFIG_RAY_STEPS, StepOffset,
			HZBUvFactorAndInvFactor, bDebugPrint,
			/* out */ DebugOutput,
			/* out */ HitUVz,
			/* out */ Level,
			/* out */ bHit,
			/* out */ bUncertain);
				
		#if DEBUG_RAY_COUNT
			DebugRayCount += 1.0;
		#endif
	}

	// Ray is also uncertain if it has been clipped.
	bUncertain = bUncertain || bRayWasClipped;

	if (RayInfos.BxDFSample.Term != SHADING_TERM_SPECULAR)
	{
		// If ray is uncertain, don't take risk bleeding through a wall that fall back tracing method might find.
		bHit = bHit && (!bUncertain || bRejectUncertainRays == 0);
	}

	// Ray is considered fully traced if hit or is certain can't have any hit.
	bFullyTraced = bHit || !bUncertain;

	#if 0 // Backface check
	if (bHit)
	{
		float3 SampleNormal = GetGBufferDataFromSceneTextures(HitUVz.xy).WorldNormal;
		bHit = dot(SampleNormal, RayInfos.BxDFSample.L) < 0;
	}
	#endif
			
	// if there was a hit
	BRANCH
	if (bHit)
	{
		float2 ReducedColorUV =  HitUVz.xy * ColorBufferScaleBias.xy + ColorBufferScaleBias.zw;
		ReducedColorUV = min(ReducedColorUV, ReducedColorUVMax);

		Lighting = ColorTexture.SampleLevel(ColorTextureSampler, ReducedColorUV, Level).rgb;

		#if 1
		{
			float Alpha = AlphaTexture.SampleLevel(AlphaTextureSampler, ReducedColorUV, Level).r;

			float Test = InterleavedGradientNoise(PixelInfos.PixelPosition, View.StateFrameIndexMod8);

			bHit = Alpha > Test;
			bFullyTraced = bHit;
			Lighting *= (Alpha > 0.0 && bHit) ? rcp(Alpha) : 0.0;
		}
		#endif
	}
	else
	{
		Lighting = 0.0;
	}

	#if 0
		Lighting = RayInfos.BxDFSample.L + RayInfos.TMax + PixelInfos.TranslatedWorldPosition;
		bHit = true;
		bFullyTraced = true;
	#endif

	//Lighting = bEarlyReturnRay ? float3(0, 0, 0) : float3(1, 1, 1);
	//Lighting = DebugOutput;
} // TraceRay()


//------------------------------------------------------- ENTRY POINT

#include "../Lumen/FinalGather/LumenProbeOcclusionPass.ush"
