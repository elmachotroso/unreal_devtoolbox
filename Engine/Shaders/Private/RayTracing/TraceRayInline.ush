// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#ifndef PLATFORM_SUPPORTS_INLINE_RAY_TRACING
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING 0
#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING

#if PLATFORM_SUPPORTS_INLINE_RAY_TRACING

#if !COMPUTESHADER
#error Inline ray tracing is only supported in compute shaders
#endif // !COMPUTESHADER

#if OVERRIDE_TRACERAYINLINE_USH
#include "/Platform/Private/TraceRayInline.ush"

#else // OVERRIDE_TRACERAYINLINE_USH

#include "/Engine/Private/RayTracing/TraceRayInlineCommon.ush"

#if COMPILER_VULKAN
#include "/Engine/Private/RayTracing/TraceRayInlineVulkan.ush"
#endif // COMPILER_VULKAN

#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_NORMALS 0
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_MAX_ITERATIONS 0
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX 1

FTraceRayInlineResult TraceRayInline(RaytracingAccelerationStructure AccelerationStructure,
	uint RayFlags,
	uint InstanceInclusionMask,
	RayDesc Ray,
	uint MaxIterations = INLINE_RAY_TRACING_MAX_ITERATIONS)
{
	FTraceRayInlineResult TraceRayResult = (FTraceRayInlineResult)0;
	TraceRayResult.SetMiss();

	RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE> RayQ;

	RayQ.TraceRayInline(AccelerationStructure, RayFlags, InstanceInclusionMask, Ray);
	while (RayQ.Proceed());
	
	if (RayQ.CommittedStatus() == COMMITTED_TRIANGLE_HIT)
	{
		TraceRayResult.HitT = RayQ.CommittedRayT();
		TraceRayResult.InstanceID = RayQ.CommittedInstanceID();
		TraceRayResult.InstanceIndex = RayQ.CommittedInstanceIndex();
		TraceRayResult.PrimitiveIndex = RayQ.CommittedPrimitiveIndex();
		TraceRayResult.GeometryIndex = RayQ.CommittedGeometryIndex();
		TraceRayResult.Barycentrics = RayQ.CommittedTriangleBarycentrics();
		TraceRayResult.bIsFrontFace = RayQ.CommittedTriangleFrontFace();
		TraceRayResult.InstanceContributionToHitGroupIndex = RayQ.CommittedInstanceContributionToHitGroupIndex();

		// placeholder
		TraceRayResult.WorldGeometryNormal = RayQ.WorldRayDirection();

		TraceRayResult.Bookmark[0] = asuint(TraceRayResult.HitT);
		TraceRayResult.Bookmark[1] = asuint(TraceRayResult.HitT);

	#if PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX
		TraceRayResult.ObjectToWorld3x4 = RayQ.CommittedObjectToWorld3x4();
	#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX
	}

	return TraceRayResult;
}

FTraceRayInlineResult TraceRayInline(RaytracingAccelerationStructure AccelerationStructure,
	uint RayFlags,
	uint InstanceInclusionMask,
	RayDesc Ray,
	inout FTraceRayInlineTraversalStatistics Statistics,
	uint MaxIterations = INLINE_RAY_TRACING_MAX_ITERATIONS)
{
	Statistics = (FTraceRayInlineTraversalStatistics)0;
	FTraceRayInlineResult TraceRayResult = TraceRayInline(AccelerationStructure, RayFlags, InstanceInclusionMask, Ray, MaxIterations);

	return TraceRayResult;
}

#endif // OVERRIDE_TRACERAYINLINE_USH

#ifndef PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_NORMALS
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_NORMALS 0
#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_NORMALS

#ifndef PLATFORM_SUPPORTS_INLINE_RAY_TRACING_MAX_ITERATIONS
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_MAX_ITERATIONS 0
#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING_MAX_ITERATIONS

#ifndef PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_ATTRIBUTES
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_ATTRIBUTES 0
#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING_TRIANGLE_ATTRIBUTES

#ifndef PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX
#define PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX 0
#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING_INSTANCE_MATRIX

#ifndef FRayTracingSceneMetadataRecord
// Not used, but must be a valid structure declaration as it may appear in interfaces, resource declarations, etc.
struct FRayTracingSceneMetadataRecord { uint Dummy; };
#endif // FRayTracingSceneMetadataRecord

#endif // PLATFORM_SUPPORTS_INLINE_RAY_TRACING
