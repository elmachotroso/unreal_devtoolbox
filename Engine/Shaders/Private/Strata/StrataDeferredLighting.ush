// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../AreaLightCommon.ush"

#ifndef STRATA_FASTPATH 
#define STRATA_FASTPATH 0
#endif

#ifndef STRATA_SINGLEPATH 
#define STRATA_SINGLEPATH 0
#endif

// Analytical lighting evaluation for strata material.
// Unpack BSDF on-the-fly
float4 StrataDeferredLighting(
	FDeferredLightData LightData,
	float3 V,
	float3 L,
	float3 ToLight,
	float LightMask,
	FShadowTerms ShadowTerms,
	FRectTexture RectTexture,
	FStrataMaterialContainer MaterialBuffer,
	FStrataAddressing StrataAddressing,
	FStrataPixelHeader StrataPixelHeader)
{
	FLightAccumulator Out = (FLightAccumulator)0;
	const bool bForceFullyRough = false;

#if STRATA_FASTPATH == 0 && STRATA_SINGLEPATH == 0
	LOOP
	for (uint BSDFIndex = 0; BSDFIndex < StrataPixelHeader.BSDFCount; ++BSDFIndex)
#endif
	{
		// Unpack BSDF data
#if STRATA_FASTPATH
		FStrataBSDF BSDF = UnpackFastPathStrataBSDFIn(MaterialBuffer, StrataAddressing, StrataPixelHeader);
#else
		FStrataBSDF BSDF = UnpackStrataBSDFIn(MaterialBuffer, StrataAddressing, StrataPixelHeader);
#endif
		FStrataBSDFContext BSDFContext = StrataCreateBSDFContext(StrataPixelHeader, BSDF, StrataAddressing, V, L);

		float Roughness = StrataGetBSDFRoughness(BSDFContext.BSDF);

		FAreaLightIntegrateContext AreaLightContext = InitAreaLightIntegrateContext();
		FStrataEvaluateResult BSDFEvaluate = (FStrataEvaluateResult)0;
		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			if (!IsRectVisible(Rect))
			{
				return 0.0f; // Rect light can be non visible due to barn door occlusion
			}
			AreaLightContext = CreateRectIntegrateContext(Roughness, BSDFContext.N, BSDFContext.V, Rect, RectTexture);

			// We must have the StrataIntegrateBSDF inside the if due to the rectlight texture: it must be non ambiguous which texture is going to be used.
			// After the compilation, a local resource must map to a unique global resource (the default or the actual rect light texture).
			BSDFEvaluate = StrataIntegrateBSDF(BSDFContext, ShadowTerms, AreaLightContext, bForceFullyRough, Strata.bRoughDiffuse);
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			AreaLightContext = CreateCapsuleIntegrateContext(Roughness, BSDFContext.N, BSDFContext.V, Capsule, LightData.bInverseSquared);

			BSDFEvaluate = StrataIntegrateBSDF(BSDFContext, ShadowTerms, AreaLightContext, bForceFullyRough, Strata.bRoughDiffuse);
		}

		float3 DiffuseLuminance = BSDFEvaluate.IntegratedDiffuseValue;
		float3 SpecularLuminance = BSDFEvaluate.IntegratedSpecularValue;

		const bool bNeedsSeparateSubsurfaceLightAccumulation = BSDFEvaluate.bSubsurface;
		const float3 CommonMultiplier = LightData.Color * LightMask * BSDF.FinalWeight;
		LightAccumulator_AddSplit(Out, DiffuseLuminance, SpecularLuminance, DiffuseLuminance, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
	}

	const FDeferredLightingSplit SplitLighting = LightAccumulator_GetResultSplit(Out);
	const float4 OutRadiance = SplitLighting.SpecularLighting + SplitLighting.DiffuseLighting;
	return OutRadiance;
}
