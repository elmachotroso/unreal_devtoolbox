// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Private/Common.ush"

// Statistical operators representing BSDF as a sum of lobes.
// This implementation is based on [Belcour 2018, "Efficient Rendering of Layered Materials using an Atomic Decomposition with Statistical Operators"]

struct StrataLobeStatistic
{
	// Mean
	// xy is the 2d projection of the main direction vector onto the plane defined by the surface normal. 
	// z is along the normal.
	float3 Mu;

	// Energy
	float3 E;

	// Variance
	float Sigma;
};



float StrataLobeRoughnessToVariance(float Roughness)
{
	const float SafeRoughness = clamp(Roughness, 0.0f, 0.999f);
	return pow(SafeRoughness, 1.1f) / (1.0f - SafeRoughness);
}

float StrataLobeVarianceToRoughness(float Variance)
{
	return pow(Variance / (1.0f + Variance), 1.0f / 1.1f);
}



// For the following statistical operators
//  - WiLobe: the lobe towards which light is reflected
//  - InterfaceRoughness = the material layer roughness
//  - InterfaceFDG = the material layer directional albedo
//  - InterfaceEta12 = the ratio of refractive mediaEta1 / Eta2
//  - OpticalDepth = the value impact light transmission (= sigma_t * depth)
//  - Approximation to in-scattering from the back of the layer (eq.19)

StrataLobeStatistic StrataGetNullLobe()
{
	StrataLobeStatistic NullLobe = (StrataLobeStatistic)0;
	return NullLobe;
}

StrataLobeStatistic StrataGetViewDiracLobe(float3 Wi)
{
	StrataLobeStatistic WiLobe;
	WiLobe.E = 1.0f;
	WiLobe.Mu = Wi;
	WiLobe.Sigma = 0.0f;
	return WiLobe;
}

StrataLobeStatistic StrataGetReflectedLobe(StrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness)
{
	StrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * InterfaceFDG;

	WoLobe.Mu = float3(-WiLobe.Mu.xy, WiLobe.Mu.z);

	WoLobe.Sigma = WiLobe.Sigma + StrataLobeRoughnessToVariance(InterfaceRoughness);

	return WoLobe;
}

StrataLobeStatistic StrataGetRefractedLobe(StrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness, float InterfaceEta12)
{
	StrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * (1.0f - InterfaceFDG);

	WoLobe.Mu.xy = -WiLobe.Mu.xy * InterfaceEta12;
	const float SquaredProjectedLength = WiLobe.Mu.x * WiLobe.Mu.x + WiLobe.Mu.y * WiLobe.Mu.y;
	WoLobe.Mu.z = -sqrt(1.0f - SquaredProjectedLength);

	//	const float S = 0.5f * (1.0f + InterfaceEta12 * (WiLobe.Mu.z / WoLobe.Mu.z));				// This respect eq.10 but it goes crazy and does not respect the roughness of a single front layer
	//	const float S = 0.5f * (1.0f + InterfaceEta12 * max(0.0, WiLobe.Mu.z / WoLobe.Mu.z));		// This respect the roughness range better but looks incorrect
	const float S = 1.0f;																			// ==> Until this is fully understood, do not scale anything.
	WoLobe.Sigma = (WiLobe.Sigma / InterfaceEta12) + StrataLobeRoughnessToVariance(S * InterfaceRoughness);

	return WoLobe;
}

StrataLobeStatistic StrataGetTransmittedLobe(StrataLobeStatistic WiLobe, float3 OpticalDepth)
{
	StrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * exp(-OpticalDepth);

	// No refraction in the paper here
	WoLobe.Mu = -WiLobe.Mu;

	WoLobe.Sigma = WiLobe.Sigma;

	return WoLobe;
}

StrataLobeStatistic StrataGetScatteredLobe(StrataLobeStatistic WiLobe, float3 InScattering)
{
	StrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * InScattering;

	// No refraction in the paper here
	WoLobe.Mu = -WiLobe.Mu;

	// In our case, we use an isotropic phase function and the paper do not support that (only HG phase function with g > 0.7).
	// So we simply assume a roughness of 1 for the Lobe over which incomling light to scatter is integrated.
	const float IsotropicPhaseLobeVariance = StrataLobeRoughnessToVariance(1.0f);
	WoLobe.Sigma = WiLobe.Sigma + IsotropicPhaseLobeVariance;

	return WoLobe;
}



// This accumulation function can be used to merge Lobes while taking into account their relative importance due to E and a coverage
void StrataAccumulateWeightedLobe(inout StrataLobeStatistic LobeAccum, inout float WeightAccum, in StrataLobeStatistic NewLobe)
{
	const float NewLobeWeight = dot(NewLobe.E, (1.0f / 3.0f).xxx);
	LobeAccum.E		+= NewLobe.E * NewLobeWeight;
	LobeAccum.Mu	+= NewLobe.Mu * NewLobeWeight;
	LobeAccum.Sigma	+= NewLobe.Sigma * NewLobeWeight;
	WeightAccum		+= NewLobeWeight;
}

StrataLobeStatistic StrataNormaliseLobe(inout StrataLobeStatistic LobeAccum, inout float WeightAccum)
{
	StrataLobeStatistic OutputLobe;
	OutputLobe.E	= LobeAccum.E / WeightAccum;
	OutputLobe.Mu	= normalize(LobeAccum.Mu);
	OutputLobe.Sigma= LobeAccum.Sigma / WeightAccum;
	return OutputLobe;
}


