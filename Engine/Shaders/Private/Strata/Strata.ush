// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "../ShadingEnergyConservation.ush"
#include "../BRDF.ush"
#include "../ColorSpace.ush"
#include "../Common.ush"
#include "../DeferredShadingCommon.ush"
#include "../ParticipatingMediaCommon.ush"
#include "../ThinFilmBSDF.ush"
#include "../MortonCode.ush"
#include "../OctahedralCommon.ush"
#include "/Engine/Shared/StrataDefinitions.h"     


// DXC has issue with unrolling certain part of the code. To address temporarly the warning-as-error issues, 
// we redefine the unroll function and fall back to loop on DXC
// To remove this, one must test PC + DX12 + RayTracing and make sure raytracing shaders compile.
#if COMPILER_DXC == 1
#define STRATA_UNROLL LOOP
#define STRATA_UNROLL_N(X) LOOP
#else
#define STRATA_UNROLL UNROLL
#define STRATA_UNROLL_N(X) UNROLL_N(X)
#endif

// Strata Rendertarget / UAV setup
// RT0: Color
// [insert here potential velocity rendertarget and prec shadow]
// RT2: Strata uint
// RT3: Strata uint
// RT4: Top normal
//
// UAV SSS data written out if needed
// UAV if strata data overrun the MRT output size

struct FRWStrataMaterialContainerStruct
{
	uint MaterialRenderTargets[STRATA_BASE_PASS_MRT_OUTPUT_COUNT];
//	RWTexture2DArray<uint> ExtraMaterialDataUAV; // If this is used, we cannot run shaders on debug...
};
#define FRWStrataMaterialContainer	FRWStrataMaterialContainerStruct
#define FStrataMaterialContainer	Texture2DArray<uint>

FRWStrataMaterialContainer InitialiseRWStrataMaterialContainer(RWTexture2DArray<uint> ExtraMaterialDataUAV)
{
	FRWStrataMaterialContainer RWStrataMaterialContainer;
	UNROLL
	for (int i = 0; i < STRATA_BASE_PASS_MRT_OUTPUT_COUNT; ++i)
	{
		RWStrataMaterialContainer.MaterialRenderTargets[i] = 0;
	}
//	RWStrataMaterialContainer.ExtraMaterialDataUAV = ExtraMaterialDataUAV;
	return RWStrataMaterialContainer;
}

// During the base pass or forward rendering, shared local bases are simply available from registers.
// If a BSDF is loaded for processing from the strata buffer, normals are unpacked on demand to reduce VGPR pressure and increase occupancy.
#ifndef STRATA_INLINE_SHADING
#define STRATA_INLINE_SHADING 1
#endif

// During the unpacking of the Strata material data, if a slab has some sub-surface scattering, its BaseColor/Specular value will be 
// patched/overriden with white albedo (and optionally no specular) for computing the incoming irradiance without any albedo information. 
// This is required by the post-process/screen-space sub-surface methods. This overriden can be opt-out. This is used during the classification 
// pass for writing out the correct base color value into the FStrataSubsurfaceData
#ifndef STRATA_SSS_MATERIAL_OVERRIDE
#define STRATA_SSS_MATERIAL_OVERRIDE 1
#endif

#ifndef STRATA_CLAMPED_LAYER_COUNT
#define STRATA_CLAMPED_LAYER_COUNT 1
#endif

#ifndef STRATA_CLAMPED_MAX_BSDF_COUNT_PER_LAYER
#define STRATA_CLAMPED_MAX_BSDF_COUNT_PER_LAYER STRATA_MAX_BSDF_COUNT_PER_LAYER
#endif

#ifndef MATERIAL_SHADINGMODEL_SINGLELAYERWATER
#define MATERIAL_SHADINGMODEL_SINGLELAYERWATER 0 
#endif

#ifndef MATERIAL_FULLY_ROUGH
#define MATERIAL_FULLY_ROUGH 0
#endif

#define STRATA_INLINE_SINGLELAYERWATER (PROJECT_STRATA && MATERIAL_IS_STRATA && STRATA_INLINE_SHADING && MATERIAL_SHADINGMODEL_SINGLELAYERWATER)

// Behind the scene, we do all the simple volumetric lighting & transmitance computations considering a slab of 100 centimeters = 1 meter.
// If the user specifies a different thickness to simulate varying appearance, we rescale the mean free path in order to not have to store thickness as part of the BSDF description.
#define STRATA_SIMPLEVOLUME_THICKNESS_CM	100.0f
#define STRATA_SIMPLEVOLUME_THICKNESS_M		(STRATA_SIMPLEVOLUME_THICKNESS_CM * CENTIMETER_TO_METER)

///////////////////////////////////////////////////////////////////////////////
// BSDFs representation
struct FStrataBSDF
{
	uint				State;		// Extra informations and other enabled BSDF features

#if STRATA_INLINE_SHADING
	float				Coverage;	// When creating a material, each BSDF/slab can have its coverage updated. 
									// When this happens, we also update its parameters to account for that, similary to premultiplied alpha blending.
									// Coverage is kept around because it is needed to evalauted the contribution to throughput.
	bool				bPremultipliedCoverage;// True when coverage is already weighting all parameters. This is true when parameter blending is used. This allows to use parameter blending or not in the same graph.
#endif
	float3				FinalWeight;// Contains the throughput towards the view accounting for BSDF visible above. It also contains coverage if it has not been baked into the BSDF parameters when using operation with parameter blending.

#if STRATA_INLINE_SHADING
	float3				Emissive;	// All bsdf can potientially have emissive. This is never written out to the strata gbuffer but instead accumulated in the emissive buffer during the base pass.
	float				ThicknessCm;// This must be kept in order to be able to normalize the mean free path to comply with our volumetric material math all done in a normalised slab of medium.
	float3				TmpDMFP;
#endif

	// Water has too many parameters to be stores in the extra VGPRs below. So we extend this structure for the case where it is evaluated inline only.
	// This is fine because when water is used, it is the only BSDF that can be used and it is only used to do in line shading.
#if STRATA_INLINE_SINGLELAYERWATER
	float4 InlineVGPRs[3];
#endif

	float4 VGPRs[5];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Storage layouts
// ---------------
// 3 types of storages layout:
// * Complex: store many (mixed) BSDFs
// * Single : store a single BSDF (with all feature apart from anisotropy)
// * Simple : store a single Slab BSDF (with no extra feature)
// 
// Header State (8bits):
// * ISSIMPLEMATERIAL			
// * ISSINGLEMATERIAL			
// * HASPRECSHADOWMASK			
// * ZEROPRECSHADOWMASK			
// * CASTCONTACTSHADOW			
// * HASDYNINDIRECTSHADOWCASTER
// * ISSINGLELAYERWATER			
// * HASSUBSURFACE				
// 
// Layouts:
// * LAYOUT 2 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  (Complex) HEADER        31 |  State | AO | BSDF Types | BSDF Count | Basis count | Basis type |
//                             |  8       8    4            4            3             4           
//            BASIS(0)      32 |  Normal: Oct 16/16 | Tangent: 11/11/10
//            BASIS(1)      32 |  Normal: Oct 16/16 | Tangent: 11/11/10
//                             |
//            STATE(0)      17 |  BSDF Type | Normal Id | Aniso | TopLayer | SSS | SSSProfile | GreyWeigh | Haze | F90 | ThinFilm | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  3           2           1       1          1     1            1           1      1     1          1             1             1      1 
//            BSDF(0)       ?? |  Adaptive
//            STATE(1)      17 |  BSDF Type | Normal Id | Aniso | TopLayer | SSS | SSSProfile | GreyWeigh | Haze | F90 | ThinFilm | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  3           2           1       1          1     1            1           1      1     1          1             1             1      1 
//            BSDF(1)       ?? |  Adaptive
//                             |
// * LAYOUT 1 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  (Single)  HEADER        31 |  State | AO | BSDF Types | Aniso | TopLayer | SSS | SSSProfile | GreyWeigh | Haze | F90 | ThinFilm | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  8       8    4            1       1          1     1            1           1      1     1          1             1             1      1            
//            BASIS(0)       0 | (Use top layer normal)
//            BSDF(0)       ?? |  Adaptive
// * LAYOUT 0 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
//  (Simple)  HEADER        29 | State | A0 | Roughness | DiffuseAbedo(8/20)
//   (Fast)                    | 8       8    8           8
//            BASIS(0)       0 | (Use top layer normal)
//            STATE(0)       0 | 
//            BSDF(0)       32 | F0_RGB | DiffuseAbedo(12/20)
//                             | 20       12
//            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bit utils functions
#define TO_BITMASK(BitCount)							((1u<<(BitCount))-1)
#define TO_OFFSET_BITMASK(BitCount, BitOffset)			(TO_BITMASK(BitCount)<<(BitOffset))
#define READ_BITS(X, BitCount, BitOffset)				uint((X>>(BitOffset)) & TO_BITMASK(BitCount))
#define WRITE_BITS(X, BitCount, BitOffset, NewValue)	X = (X & (~TO_OFFSET_BITMASK(BitCount, BitOffset))) | (((NewValue) & TO_BITMASK(BitCount)) << (BitOffset))

///////////////////////////////////////////////////////////////////////////////
// Material Header
//
// Bit count for each component stored in a Strata header
// 
// State bit masks
#define HEADER_MASK_ISSIMPLEMATERIAL			(1u << 0)
#define HEADER_MASK_ISSINGLEMATERIAL			(1u << 1)
#define HEADER_MASK_HASPRECSHADOWMASK			(1u << 2)
#define HEADER_MASK_ZEROPRECSHADOWMASK			(1u << 3)
#define HEADER_MASK_CASTCONTACTSHADOW			(1u << 4)
#define HEADER_MASK_HASDYNINDIRECTSHADOWCASTER	(1u << 5)
#define HEADER_MASK_ISSINGLELAYERWATER			(1u << 6)	// Used to avoid loading BSDF or Categorisation data when generating tiles containing SLW material. Avoid running another categorisation.
#define HEADER_MASK_HASSUBSURFACE				(1u << 7)
#define HEADER_MASK_BIT_COUNT					8

// For HEADER_BIT_BSDF_COUNT and  HEADER_BIT_SHAREDLOCALBASES_X, please refer to values in StrataDefinitions.h
#define HEADER_BIT_COUNT_STATE						HEADER_MASK_BIT_COUNT
#define HEADER_BIT_COUNT_AO							8
#define HEADER_BIT_COUNT_SHADINGMODELS				4
#define HEADER_BIT_COUNT_BSDF_COUNT					4
#define HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT		3
#define HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE		4
#define HEADER_BIT_COUNT___UNUSED___				1

#define HEADER_BIT_OFFSET_STATE						0
#define HEADER_BIT_OFFSET_AO						(HEADER_BIT_OFFSET_STATE					+ HEADER_BIT_COUNT_STATE)
#define HEADER_BIT_OFFSET_SHADINGMODELS				(HEADER_BIT_OFFSET_AO						+ HEADER_BIT_COUNT_AO)
#define HEADER_BIT_OFFSET_BSDF_COUNT				(HEADER_BIT_OFFSET_SHADINGMODELS			+ HEADER_BIT_COUNT_SHADINGMODELS)
#define HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT	(HEADER_BIT_OFFSET_BSDF_COUNT				+ HEADER_BIT_COUNT_BSDF_COUNT)
#define HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE		(HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT	+ HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT)

#define HEADER_MASK_SHADINGMODELS					(((1u<<HEADER_BIT_COUNT_SHADINGMODELS)-1) << HEADER_BIT_OFFSET_SHADINGMODELS)

// The different layout 'aliases' differently the material header
// 
// Layout 0 (Fast)
#define HEADER_FASTENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_AO)
#define HEADER_FASTENCODING_MASK					((1u<<HEADER_FASTENCODING_BIT_COUNT)-1u)
// Layout 1 (Single BSDF)
#define HEADER_SINGLEENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_AO + HEADER_BIT_COUNT_SHADINGMODELS)
#define HEADER_SINGLEENCODING_MASK					((1u<<HEADER_SINGLEENCODING_BIT_COUNT)-1u)
// Layout 2 (Complex)
#define HEADER_COMPLEXENCODING_BIT_COUNT			(32u)
#define HEADER_COMPLEXENCODING_MASK					(0xFFFFFFFFu)

// Sanity check
#if (HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE + HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE) > 32
#error Strata Header is larger than 32 bits
#endif

#define HEADER_GETBSDFCOUNT(X)						READ_BITS( X, HEADER_BIT_COUNT_BSDF_COUNT, HEADER_BIT_OFFSET_BSDF_COUNT)
#define HEADER_SETBSDFCOUNT(X, NewValue)			WRITE_BITS(X, HEADER_BIT_COUNT_BSDF_COUNT, HEADER_BIT_OFFSET_BSDF_COUNT, NewValue)

#define HEADER_GETSHAREDLOCALBASESCOUNT(X)			READ_BITS( X, HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT, HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT)
#define HEADER_SETSHAREDLOCALBASESCOUNT(X, NewValue) WRITE_BITS(X, HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT, HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT, NewValue)

#define HEADER_GETSHAREDLOCALBASESTYPE(X)			READ_BITS( X, HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE, HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE)
#define HEADER_SETSHAREDLOCALBASESTYPE(X, NewValue)	WRITE_BITS(X, HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE, HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE, NewValue)

#define HEADER_GETAO(X)								READ_BITS( X, HEADER_BIT_COUNT_AO, HEADER_BIT_OFFSET_AO)
#define HEADER_SETAO(X, NewValue)					WRITE_BITS(X, HEADER_BIT_COUNT_AO, HEADER_BIT_OFFSET_AO, NewValue)

#define HEADER_GETSTATE(X)							READ_BITS( X, HEADER_BIT_COUNT_STATE, HEADER_BIT_OFFSET_STATE)
#define HEADER_SETSTATE(X, NewValue)				WRITE_BITS(X, HEADER_BIT_COUNT_STATE, HEADER_BIT_OFFSET_STATE, NewValue)

#define HEADER_GETSHADINGMODELS(X)					READ_BITS( X, HEADER_BIT_COUNT_SHADINGMODELS, HEADER_BIT_OFFSET_SHADINGMODELS)
#define HEADER_SETSHADINGMODELS(X, NewValue)		WRITE_BITS(X, HEADER_BIT_COUNT_SHADINGMODELS, HEADER_BIT_OFFSET_SHADINGMODELS, NewValue)

///////////////////////////////////////////////////////////////////////////////
// BSDF State
 
// Bit count for each component stored in a Strata BSDF state
#define STATE_BIT_COUNT_ANISOTROPY				1
#define STATE_BIT_COUNT_TOPLAYER				1
#define STATE_BIT_COUNT_HASSSS					1
#define STATE_BIT_COUNT_HASSSSPROFILE			1
#define STATE_BIT_COUNT_GREYWEIGHT				1
#define STATE_BIT_COUNT_HAZINESS				1
#define STATE_BIT_COUNT_F90						1
#define STATE_BIT_COUNT_THINFILM				1
#define STATE_BIT_COUNT_SIMPLEVOLUME			1
#define STATE_BIT_COUNT_DMFPPLUGGED				1
#define STATE_BIT_COUNT_HASFUZZ					1
#define STATE_BIT_COUNT_ISTHIN					1
#define STATE_BIT_COUNT_BSDF_TYPE				3
#define STATE_BIT_COUNT_SHAREDLOCALBASESID		2
#define STATE_BIT_COUNT___UNUSED___				5
#define STATE_BIT_COUNT_WEIGHT10F				10

// Bit offset of each component store in BSDF state 
#define STATE_BIT_OFFSET_ANISOTROPY				0
#define STATE_BIT_OFFSET_TOPLAYER				(STATE_BIT_OFFSET_ANISOTROPY		+ STATE_BIT_COUNT_ANISOTROPY)
#define STATE_BIT_OFFSET_HASSSS					(STATE_BIT_OFFSET_TOPLAYER			+ STATE_BIT_COUNT_TOPLAYER)
#define STATE_BIT_OFFSET_HASSSSPROFILE			(STATE_BIT_OFFSET_HASSSS			+ STATE_BIT_COUNT_HASSSS)
#define STATE_BIT_OFFSET_GREYWEIGHT				(STATE_BIT_OFFSET_HASSSSPROFILE		+ STATE_BIT_COUNT_HASSSSPROFILE)
#define STATE_BIT_OFFSET_HAZINESS				(STATE_BIT_OFFSET_GREYWEIGHT		+ STATE_BIT_COUNT_GREYWEIGHT)
#define STATE_BIT_OFFSET_F90					(STATE_BIT_OFFSET_HAZINESS			+ STATE_BIT_COUNT_HAZINESS)
#define STATE_BIT_OFFSET_THINFILM				(STATE_BIT_OFFSET_F90				+ STATE_BIT_COUNT_F90)
#define STATE_BIT_OFFSET_SIMPLEVOLUME			(STATE_BIT_OFFSET_THINFILM			+ STATE_BIT_COUNT_THINFILM)
#define STATE_BIT_OFFSET_DMFPPLUGGED			(STATE_BIT_OFFSET_SIMPLEVOLUME		+ STATE_BIT_COUNT_SIMPLEVOLUME)
#define STATE_BIT_OFFSET_HASFUZZ				(STATE_BIT_OFFSET_DMFPPLUGGED		+ STATE_BIT_COUNT_DMFPPLUGGED)
#define STATE_BIT_OFFSET_ISTHIN					(STATE_BIT_OFFSET_HASFUZZ			+ STATE_BIT_COUNT_HASFUZZ)
#define STATE_BIT_OFFSET_BSDF_TYPE				(STATE_BIT_OFFSET_ISTHIN			+ STATE_BIT_COUNT_ISTHIN)
#define STATE_BIT_OFFSET_SHAREDLOCALBASESID		(STATE_BIT_OFFSET_BSDF_TYPE			+ STATE_BIT_COUNT_BSDF_TYPE)
#define STATE_BIT_OFFSET_WEIGHT10F				22

// Layout 0 (Fast)
#define STATE_FASTENCODING_BIT_COUNT			(0u)
#define STATE_FASTENCODING_MASK					(0u)
// Layout 1 (Single BSDF)
#define STATE_SINGLEENCODING_BIT_COUNT			(STATE_BIT_OFFSET_ISTHIN + STATE_BIT_COUNT_ISTHIN)
#define STATE_SINGLEENCODING_MASK				((1u<<STATE_SINGLEENCODING_BIT_COUNT)-1u)
// Layout 2 (Complex)
#define STATE_COMPLEXCODING_BIT_COUNT			(32u)
#define STATE_COMPLEXFASTENCODING_MASK			(0xFFFFFFFFu)

// Sanity check
#if (STATE_BIT_OFFSET_WEIGHT10F + STATE_BIT_COUNT_WEIGHT10F) > 32
#error Strata BSDF state is larger than 32 bits
#endif

// Accessors for the BSDF type
#define BSDF_GETTYPE(X)					READ_BITS(X.State,  STATE_BIT_COUNT_BSDF_TYPE, STATE_BIT_OFFSET_BSDF_TYPE)
#define BSDF_SETTYPE(X, NewType)		WRITE_BITS(X.State, STATE_BIT_COUNT_BSDF_TYPE, STATE_BIT_OFFSET_BSDF_TYPE, NewType)

// Accessors for shared local bases
// This assumes Normals[STRATA_MAX_SHAREDLOCALBASES_REGISTERS]
#define BSDF_GETSHAREDLOCALBASISID(X)	READ_BITS(X.State,  STATE_BIT_COUNT_SHAREDLOCALBASESID, STATE_BIT_OFFSET_SHAREDLOCALBASESID)
#define BSDF_SETSHAREDLOCALBASISID(X, NrmlIdx)	WRITE_BITS(X.State, STATE_BIT_COUNT_SHAREDLOCALBASESID, STATE_BIT_OFFSET_SHAREDLOCALBASESID, NrmlIdx)

// Accessors for HasAnisotropy
// Indicates if the BSDF has anisotropic feature
#define BSDF_GETHASANISOTROPY(X)		READ_BITS(X.State,  STATE_BIT_COUNT_ANISOTROPY, STATE_BIT_OFFSET_ANISOTROPY)
#define BSDF_SETHASANISOTROPY(X, Aniso)	WRITE_BITS(X.State, STATE_BIT_COUNT_ANISOTROPY, STATE_BIT_OFFSET_ANISOTROPY, Aniso)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISTOPLAYER(X)			READ_BITS(X.State,  STATE_BIT_COUNT_TOPLAYER, STATE_BIT_OFFSET_TOPLAYER)
#define BSDF_SETISTOPLAYER(X, IsTop)	WRITE_BITS(X.State, STATE_BIT_COUNT_TOPLAYER, STATE_BIT_OFFSET_TOPLAYER, IsTop)

// Indicates if the BSDF has scattering component
#define BSDF_GETHASSSS(X)				READ_BITS(X.State,  STATE_BIT_COUNT_HASSSS, STATE_BIT_OFFSET_HASSSS)
#define BSDF_SETHASSSS(X, Scatt)		WRITE_BITS(X.State, STATE_BIT_COUNT_HASSSS, STATE_BIT_OFFSET_HASSSS, Scatt)

// Indicates if the BSDF has a SSS profile
#define BSDF_GETHASSSSPROFILE(X)		READ_BITS(X.State,  STATE_BIT_COUNT_HASSSSPROFILE, STATE_BIT_OFFSET_HASSSSPROFILE)
#define BSDF_SETHASSSSPROFILE(X, Profi)	WRITE_BITS(X.State, STATE_BIT_COUNT_HASSSSPROFILE, STATE_BIT_OFFSET_HASSSSPROFILE, Profi)

// Indicates if the BSDF weight is grey scale so that it can be stored in a single float (e.g. top layer BSDFs)
#define BSDF_GETHASGREYWEIGHT(X)		READ_BITS(X.State,  STATE_BIT_COUNT_GREYWEIGHT, STATE_BIT_OFFSET_GREYWEIGHT)
#define BSDF_SETHASGREYWEIGHT(X, Grey)	WRITE_BITS(X.State, STATE_BIT_COUNT_GREYWEIGHT, STATE_BIT_OFFSET_GREYWEIGHT, Grey)

// Indicates if the BSDF has haziness data
#define BSDF_GETHASHAZINESS(X)			READ_BITS(X.State,  STATE_BIT_COUNT_HAZINESS, STATE_BIT_OFFSET_HAZINESS)
#define BSDF_SETHASHAZINESS(X, Haze)	WRITE_BITS(X.State, STATE_BIT_COUNT_HAZINESS, STATE_BIT_OFFSET_HAZINESS, Haze)

// Indicates if the BSDF has edge color data
#define BSDF_GETHASF90(X)				READ_BITS(X.State,  STATE_BIT_COUNT_F90, STATE_BIT_OFFSET_F90)
#define BSDF_SETHASF90(X, Col)			WRITE_BITS(X.State, STATE_BIT_COUNT_F90, STATE_BIT_OFFSET_F90, Col)

// Indicates if the BSDF has thin film
#define BSDF_GETHASTHINFILM(X)			READ_BITS(X.State,  STATE_BIT_COUNT_THINFILM, STATE_BIT_OFFSET_THINFILM)
#define BSDF_SETHASTHINFILM(X, Thin)	WRITE_BITS(X.State, STATE_BIT_COUNT_THINFILM, STATE_BIT_OFFSET_THINFILM, Thin)

// Accessors for the 10bits float weight used if is it detected being a grey scale
#define BSDF_GETWEIGHT10F(X)			READ_BITS(X.State,  STATE_BIT_COUNT_WEIGHT10F, STATE_BIT_OFFSET_WEIGHT10F)
#define BSDF_SETWEIGHT10F(X, Weight)	WRITE_BITS(X.State, STATE_BIT_COUNT_WEIGHT10F, STATE_BIT_OFFSET_WEIGHT10F, Weight)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISSIMPLEVOLUME(X)		READ_BITS(X.State,  STATE_BIT_COUNT_SIMPLEVOLUME, STATE_BIT_OFFSET_SIMPLEVOLUME)
#define BSDF_SETISSIMPLEVOLUME(X, Value) WRITE_BITS(X.State, STATE_BIT_COUNT_SIMPLEVOLUME, STATE_BIT_OFFSET_SIMPLEVOLUME, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETHASDMFP(X)				READ_BITS(X.State,  STATE_BIT_COUNT_DMFPPLUGGED, STATE_BIT_OFFSET_DMFPPLUGGED)
#define BSDF_SETHASDMFP(X, Value)		WRITE_BITS(X.State, STATE_BIT_COUNT_DMFPPLUGGED, STATE_BIT_OFFSET_DMFPPLUGGED, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETHASFUZZ(X)				READ_BITS(X.State,  STATE_BIT_COUNT_HASFUZZ, STATE_BIT_OFFSET_HASFUZZ)
#define BSDF_SETHASFUZZ(X, Value)		WRITE_BITS(X.State, STATE_BIT_COUNT_HASFUZZ, STATE_BIT_OFFSET_HASFUZZ, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISTHIN(X)				READ_BITS(X.State,  STATE_BIT_COUNT_ISTHIN, STATE_BIT_OFFSET_ISTHIN)
#define BSDF_SETISTHIN(X, Value)		WRITE_BITS(X.State, STATE_BIT_COUNT_ISTHIN, STATE_BIT_OFFSET_ISTHIN, Value)

#if STRATA_INLINE_SHADING
#define BSDF_SETEMISSIVE(X, V)			X.Emissive = V
#define BSDF_GETEMISSIVE(X)				X.Emissive
#else
#define BSDF_SETEMISSIVE(X, V)			X
#define BSDF_GETEMISSIVE(X)				0.0f
#endif

#if STRATA_INLINE_SHADING
#define BSDF_SETTHICKNESSCM(X, V)		X.ThicknessCm = V
#define BSDF_GETTHICKNESSCM(X)			X.ThicknessCm
#else
#define BSDF_SETTHICKNESSCM(X, V)		X
#define BSDF_GETTHICKNESSCM(X)			STRATA_SIMPLEVOLUME_THICKNESS_CM
#endif

///////////////////////////////////////////////////////////////////////////////
// Slab BSDF members
#define SLAB_COMPLEX_PATH_MASK (TO_OFFSET_BITMASK(STATE_BIT_COUNT_ANISOTROPY, STATE_BIT_OFFSET_ANISOTROPY)		|  TO_OFFSET_BITMASK(STATE_BIT_COUNT_HASSSS, STATE_BIT_OFFSET_HASSSS) | \
								TO_OFFSET_BITMASK(STATE_BIT_COUNT_HASSSSPROFILE, STATE_BIT_OFFSET_HASSSSPROFILE)|  TO_OFFSET_BITMASK(STATE_BIT_COUNT_HAZINESS, STATE_BIT_OFFSET_HAZINESS) | \
								TO_OFFSET_BITMASK(STATE_BIT_COUNT_THINFILM, STATE_BIT_OFFSET_THINFILM)			|  TO_OFFSET_BITMASK(STATE_BIT_COUNT_F90, STATE_BIT_OFFSET_F90) | \
								TO_OFFSET_BITMASK(STATE_BIT_COUNT_SIMPLEVOLUME, STATE_BIT_OFFSET_SIMPLEVOLUME)	|  TO_OFFSET_BITMASK(STATE_BIT_COUNT_HASFUZZ, STATE_BIT_OFFSET_HASFUZZ) | \
								TO_OFFSET_BITMASK(STATE_BIT_COUNT_ISTHIN, STATE_BIT_OFFSET_ISTHIN) )

#define SLAB_DIFFUSEALBEDO(X)			X.VGPRs[0].xyz
#define SLAB_ROUGHNESS(X)				X.VGPRs[0].w
#define SLAB_F0(X)						X.VGPRs[1].xyz
#define SLAB_ANISOTROPY(X)				X.VGPRs[1].w
#define SLAB_F90(X)						X.VGPRs[2].xyz
// Haziness
#define SLAB_HAZINESS(X)				X.VGPRs[2].w
// Either with SSS profile
#define SLAB_SSSPROFILEID(X)			X.VGPRs[3].x
#define SLAB_SSSPROFILERADIUSSCALE(X)	X.VGPRs[3].y
// Or explicit DMFP in centimeter
#define SLAB_SSSDMFP(X)					X.VGPRs[3].xyz
// Thin film. IOR is harcoded to oil IOR in order to save VGPR
#define SLAB_THINFILM_THICKNESS(X)		X.VGPRs[3].w
#define SLAB_THINFILM_IOR(X)			1.44f
// Fuzz to simulate cloth
#define SLAB_FUZZ_COLOR(X)				X.VGPRs[4].xyz
#define SLAB_FUZZ_AMOUNT(X)				X.VGPRs[4].w

///////////////////////////////////////////////////////////////////////////////
// Volumetric BSDF members
#define VOLUMETRICFOGCLOUD_ALBEDO(X)	X.VGPRs[0].xyz
#define VOLUMETRICFOGCLOUD_EXTINCTION(X)X.VGPRs[1].xyz
#define VOLUMETRICFOGCLOUD_AO(X)		X.VGPRs[0].w

///////////////////////////////////////////////////////////////////////////////
// Unlit BSDF members
#define UNLIT_TRANSMITTANCE(X)			X.VGPRs[0].xyz

///////////////////////////////////////////////////////////////////////////////
// Hair BSDF members
#define HAIR_BASECOLOR(X)				X.VGPRs[0].xyz
#define HAIR_SCATTER(X)					X.VGPRs[0].w
#define HAIR_ROUGHNESS(X)				X.VGPRs[1].x
#define HAIR_SPECULAR(X)				X.VGPRs[1].y
#define HAIR_BACKLIT(X)					X.VGPRs[1].z
#define HAIR_COMPLEXTRANSMITTANCE(X)	X.VGPRs[1].w

///////////////////////////////////////////////////////////////////////////////
// Single Layer Water BSDF members
#define SLW_BASECOLOR(X)				X.VGPRs[0].xyz
#define SLW_METALLIC(X)					X.VGPRs[1].x
#define SLW_SPECULAR(X)					X.VGPRs[1].y
#define SLW_ROUGHNESS(X)				X.VGPRs[1].z
#define SLW_TOPMATERIALOPACITY(X)		X.VGPRs[1].w
#if STRATA_INLINE_SINGLELAYERWATER
#define SLW_WATERALBEDO(X)				X.InlineVGPRs[0].xyz
#define SLW_WATEREXTINCTION(X)			X.InlineVGPRs[1].xyz
#define SLW_WATERPHASEG(X)				X.InlineVGPRs[0].w
#define SLW_COLORSCALEBEHINDWATER(X)	X.InlineVGPRs[2].xyz
#endif

///////////////////////////////////////////////////////////////////////////////
// Forward declarations

FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters);
void   EnableSlabBSDFSimpleVolumetric(inout FStrataBSDF BSDF);
void   StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index);
float3 StrataUnpackNormal(uint PackedNormal);
void   StrataUnpackNormalAndTangent(inout float3 Normal, inout float3 Tangent, in uint InPacked);
uint   PackR8(float Value);
float  UnpackR8(uint Value);
uint   PackRGBA8(float4 rgba);
float4 UnpackRGBA8(uint rgba);
uint   PackR11G11B10F(float3 rgb);
float3 UnpackR11G11B10F(uint rgb);
uint   PackColorLinearToGamma2AlphaLinear(float4 rgba);
float4 UnpackColorGamma2ToLinearAlphaLinear(uint rgba);
uint   StrataPackNormal(in float3 Normal);
float3 StrataUnpackNormal(uint PackedNormal);
uint   StrataPackNormal24(in float3 Normal);
float3 StrataUnpackNormal24(uint PackedNormal);
bool   IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF);

///////////////////////////////////////////////////////////////////////////////
// Top layer
struct FStrataTopLayerData
{
	float3 WorldNormal;
	float  Roughness;
	bool   bIsValid;
};

uint StrataPackTopLayerData(FStrataTopLayerData In)
{
	// Output is min. by 1 to flag data has valid. This creates a small bias for one particular orientation with a mirror roughness.
	return max((StrataPackNormal24(In.WorldNormal)<<8) | PackR8(In.Roughness), 1u);
}

FStrataTopLayerData StrataUnpackTopLayerData(uint In)
{
	FStrataTopLayerData Out = (FStrataTopLayerData)0;
	Out.bIsValid = In > 0;
	Out.WorldNormal = StrataUnpackNormal24(In>>8);
	Out.Roughness = UnpackR8(In);
	return Out;
}

bool IsStrataMaterial(FStrataTopLayerData In)
{
	return In.bIsValid;
}

///////////////////////////////////////////////////////////////////////////////
// Sub-surface 

struct FStrataSubsurfaceData
{
	float3 BaseColor;
	float  Specular;

	bool   bIsValid;
	bool   bIsProfile;
	uint   ProfileId;
	float  ProfileRadiusScale;

	float3 DMFP;				// When the profile is not used, a per pixel DMFP is used
};

uint2 StrataPackSSSData(FStrataSubsurfaceData In)
{
	uint2 Out;
	Out.x = PackColorLinearToGamma2AlphaLinear(float4(In.BaseColor, In.bIsValid ? (In.bIsProfile ? 1.0f : 0.5f) : 0.0f));
	Out.y = In.bIsProfile ? ((In.ProfileId & 0xFF) | PackRGBA8(float4(0.f, In.ProfileRadiusScale, In.Specular, 0.0f))) : PackR11G11B10F(In.DMFP);
	return Out;
}

uint StrataSubsurfaceProfileIdTo8bits(float In)
{
	// Similar encoding than ExtractSubsurfaceProfileInt. Valid profile ID start at 1.
	return uint(In * 255.0f + 0.5f);
}

FStrataSubsurfaceData StrataUnpackSSSData(uint2 In)
{
	FStrataSubsurfaceData Out = (FStrataSubsurfaceData)0;

	float4 Data0 = UnpackColorGamma2ToLinearAlphaLinear(In.x);
	Out.BaseColor = Data0.rgb;
	Out.bIsValid  = Data0.a > 0.0f;
	Out.bIsProfile= Data0.a > 0.75f;
	Out.ProfileId = SSS_PROFILE_ID_INVALID;

	if (Out.bIsProfile)
	{
		float4 Data1 = UnpackRGBA8(In.y);
		Out.ProfileId = In.y & 0xFF;
		Out.ProfileRadiusScale = Data1.y;
		Out.Specular = Data1.z;
	}
	else if (Out.bIsValid)
	{
		Out.ProfileId = SSS_PROFILE_ID_PERPIXEL;
		Out.ProfileRadiusScale = 1.0f;
		Out.DMFP = UnpackR11G11B10F(In.y);
	}
	return Out;
}

///////////////////////////////////////////////////////////////////////////////
// Shading models
uint StrataShadingModelBit(uint ShadingModel)
{
	return 1u << ShadingModel;
}

bool StrataHasShadingModel(uint ShadingModels, uint ShadingModel)
{
	return (ShadingModels & (1u << ShadingModel)) > 0;
}

// Return true if a BSDF has a custom area light integrator
bool StrataHasAreaLightIntegrator(in FStrataBSDF BSDF)
{
	const uint BSDFType = BSDF_GETTYPE(BSDF);
	return BSDFType == STRATA_BSDF_TYPE_SLAB;
}

bool StrataHasGreyScaleWeight(in float3 Weight)
{
	return Weight.x == Weight.y && Weight.y == Weight.z;
}

///////////////////////////////////////////////////////////////////////////////
// Layer & BSDF description

struct FStrataLayer
{
	int BSDFCount;

	FStrataBSDF BSDFs[STRATA_MAX_BSDF_COUNT_PER_LAYER];
};

struct FStrataData
{
	int LayerCount;

	FStrataLayer Layers[STRATA_MAX_LAYER_COUNT];	// Layer 0 is the top layer
};

uint GetStrataSubsurfaceProfile(float NormalizedId)
{
	// can be optimized
	return uint(NormalizedId * 255.0f + 0.5f);

}

FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
	return StrataData;
}
FStrataData GetInitialisedStrataDataWithReservedFirstSlot()
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.LayerCount++;
	StrataData.Layers[0].BSDFCount++;
	return StrataData;
}

///////////////////////////////////////////////////////////////////////////////
// BSDF

FStrataData GetStrataSlabBSDF(
	float UseMetalness,
	float3 BaseColor, float3 EdgeColor, float Specular, float Metallic,	//  Metalness workflow
	float3 DiffuseAlbedo, float3 F0, float3 F90,						// !Metalness workflow
	float Roughness, float Anisotropy,
	float SSSProfileID, float3 SSSDMFP, float SSSDMFPScale,
	float3 Emissive, 
	float Haziness, 
	float ThinFilmThickness,
	float FuzzAmount, float3 FuzzColor,
	float Thickness, 
	uint SharedLocalBasisIndex, inout uint SharedLocalBasisTypes)
{
	FStrataData StrataData = GetInitialisedStrataDataWithReservedFirstSlot();

	const uint bHasHaziness = Haziness > 0.0f ? 1 : 0;
	const uint bHasThinFilm = ThinFilmThickness > 0.0f ? 1 : 0;
	const uint bHasAnisotropy = Anisotropy != 0 ? 1 : 0;
	const uint bHasFuzz = FuzzAmount > 0.0f ? 1 : 0;
	if (bHasAnisotropy)
	{
		StrataRequestSharedLocalBasisTangent(SharedLocalBasisTypes, SharedLocalBasisIndex);
	}

	// STRATA_TODO apply SSS as a function of pixel footprint w.r.t. MFP
	const bool bDMFPPlugged = any(SSSDMFP > 0);
	const bool bIsThin = bDMFPPlugged && Thickness < STRATA_LAYER_ISTHIN_THICKNESS_THRESHOLD_CM;
	const bool bHasSSSProfile = !bIsThin && SSSProfileID  > 0.0f;	// When no profile is provide, we use Burley. STRATA_TODO we should clarify as burley is also an option of the profile.
	const bool bHasSSS = bDMFPPlugged || bHasSSSProfile;

	// About the thin, a.k.a. two sided lighting, model:
	// 	- Thin lighting model is used when thickness becomes less than STRATA_LAYER_ISTHIN_THICKNESS_THRESHOLD_CM
	//  - It cannot work with a SSS Profile because the profile id is stored in the register used for the MFP (e.g. see SLAB_SSSPROFILEID).
	// 	- Thin lighting model force disabled the SSSProfile.
	//  - It can work with the Strata SSS because the MFP is shared in this case between both.
	//  - We also only enabled thin lighting is the MFP input pin is plugged in.
	//  - It will only be ran for the bottom layer only. Otherwise, the simple volume should be used. As such, Two-sided lighting can also be disabled later if part of the bottom layer.

	BSDF_SETTYPE			(StrataData.Layers[0].BSDFs[0],		STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(StrataData.Layers[0].BSDFs[0],	SharedLocalBasisIndex);
	BSDF_SETEMISSIVE		(StrataData.Layers[0].BSDFs[0],		Emissive);
	BSDF_SETHASANISOTROPY	(StrataData.Layers[0].BSDFs[0],		bHasAnisotropy);
	BSDF_SETISTOPLAYER		(StrataData.Layers[0].BSDFs[0],		0);
	BSDF_SETHASSSS			(StrataData.Layers[0].BSDFs[0],		bHasSSS ? 1 : 0);
	BSDF_SETHASSSSPROFILE	(StrataData.Layers[0].BSDFs[0],		bHasSSSProfile ? 1 : 0);
	BSDF_SETISTHIN			(StrataData.Layers[0].BSDFs[0],		bIsThin ? 1 : 0);
	BSDF_SETHASDMFP			(StrataData.Layers[0].BSDFs[0],		bDMFPPlugged ? 1 : 0);
	BSDF_SETHASHAZINESS		(StrataData.Layers[0].BSDFs[0],		bHasHaziness);
	BSDF_SETHASTHINFILM		(StrataData.Layers[0].BSDFs[0],		bHasThinFilm);
	BSDF_SETTHICKNESSCM		(StrataData.Layers[0].BSDFs[0],		Thickness);
	BSDF_SETHASFUZZ			(StrataData.Layers[0].BSDFs[0],		bHasFuzz);

	if (UseMetalness > 0.0f)
	{
		BSDF_SETHASF90(StrataData.Layers[0].BSDFs[0], any(EdgeColor < 1.0f));

		const float SafeMetallic = saturate(Metallic);
		SLAB_DIFFUSEALBEDO(StrataData.Layers[0].BSDFs[0])	= BaseColor - BaseColor * SafeMetallic;
		SLAB_F0(StrataData.Layers[0].BSDFs[0])				= ComputeF0(Specular, BaseColor, SafeMetallic);
		SLAB_F90(StrataData.Layers[0].BSDFs[0])				= ComputeF90(F0, EdgeColor, SafeMetallic);
	}
	else
	{
		// See how UMaterialExpressionStrataSlabBSDF node interface is changed
		BSDF_SETHASF90(StrataData.Layers[0].BSDFs[0], any(F90 < 1.0f));

		SLAB_DIFFUSEALBEDO(StrataData.Layers[0].BSDFs[0])	= DiffuseAlbedo;
		SLAB_F0(StrataData.Layers[0].BSDFs[0])				= F0;
		SLAB_F90(StrataData.Layers[0].BSDFs[0])				= F90;
	}

	SLAB_ROUGHNESS			(StrataData.Layers[0].BSDFs[0])		= Roughness;
	SLAB_ANISOTROPY			(StrataData.Layers[0].BSDFs[0])		= Anisotropy;
	SLAB_HAZINESS			(StrataData.Layers[0].BSDFs[0])		= Haziness;
	SLAB_THINFILM_THICKNESS	(StrataData.Layers[0].BSDFs[0])		= ThinFilmThickness;

	if (bHasSSSProfile)
	{
		SLAB_SSSPROFILEID	(StrataData.Layers[0].BSDFs[0])		= SSSProfileID;
		SLAB_SSSPROFILERADIUSSCALE(StrataData.Layers[0].BSDFs[0])= saturate(SSSDMFPScale);
	}
	else
	{
		SLAB_SSSDMFP	(StrataData.Layers[0].BSDFs[0])			= SSSDMFP * saturate(SSSDMFPScale);
	}

	SLAB_FUZZ_AMOUNT		(StrataData.Layers[0].BSDFs[0])		= FuzzAmount;
	SLAB_FUZZ_COLOR			(StrataData.Layers[0].BSDFs[0])		= FuzzColor;

#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the DMFP on the side to not override SSSPROFILE data.
	StrataData.Layers[0].BSDFs[0].TmpDMFP = SSSDMFP * saturate(SSSDMFPScale);

	StrataData.Layers[0].BSDFs[0].Coverage = 1.0f;
#endif
	return StrataData;
}

FStrataData GetStrataVolumeFogCloudBSDF(float3 Albedo, float3 Extinction, float3 Emissive, float AmbientOcclusion)
{
	FStrataData StrataData = GetInitialisedStrataDataWithReservedFirstSlot();

	BSDF_SETTYPE					(StrataData.Layers[0].BSDFs[0], STRATA_BSDF_TYPE_VOLUMETRICFOGCLOUD);
	BSDF_SETEMISSIVE				(StrataData.Layers[0].BSDFs[0], Emissive);
	VOLUMETRICFOGCLOUD_ALBEDO		(StrataData.Layers[0].BSDFs[0]) = Albedo;
	VOLUMETRICFOGCLOUD_EXTINCTION	(StrataData.Layers[0].BSDFs[0]) = Extinction;
	VOLUMETRICFOGCLOUD_AO			(StrataData.Layers[0].BSDFs[0]) = AmbientOcclusion;

#if STRATA_INLINE_SHADING
	StrataData.Layers[0].BSDFs[0].Coverage = 1.0f;
#endif

	return StrataData;
}

FStrataData GetStrataUnlitBSDF(float3 Emissive, float3 TransmittanceColor)
{
	FStrataData StrataData = GetInitialisedStrataDataWithReservedFirstSlot();

	BSDF_SETTYPE					(StrataData.Layers[0].BSDFs[0], STRATA_BSDF_TYPE_UNLIT);
	BSDF_SETEMISSIVE				(StrataData.Layers[0].BSDFs[0], Emissive);
	UNLIT_TRANSMITTANCE				(StrataData.Layers[0].BSDFs[0]) = TransmittanceColor;

#if STRATA_INLINE_SHADING
	StrataData.Layers[0].BSDFs[0].Coverage = 1.0f;
#endif

	return StrataData;
}

FStrataData GetStrataHairBSDF(float3 BaseColor, float Scatter, float Specular, float Roughness, float Backlit, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataDataWithReservedFirstSlot();

	// Enable complex transmittance only for hair using cards/strands vertex factories
	#ifndef USE_HAIR_COMPLEX_TRANSMITTANCE
	  #if defined(HAIR_CARD_MESH_FACTORY) || defined(HAIR_STRAND_MESH_FACTORY)
		#define USE_HAIR_COMPLEX_TRANSMITTANCE 1
	  #else
		#define USE_HAIR_COMPLEX_TRANSMITTANCE 0
	  #endif
	#endif

	BSDF_SETTYPE					(StrataData.Layers[0].BSDFs[0], STRATA_BSDF_TYPE_HAIR);
	BSDF_SETSHAREDLOCALBASISID		(StrataData.Layers[0].BSDFs[0], SharedLocalBasisIndex);
	BSDF_SETEMISSIVE				(StrataData.Layers[0].BSDFs[0], Emissive);
	HAIR_BASECOLOR					(StrataData.Layers[0].BSDFs[0]) = BaseColor;
	HAIR_SCATTER					(StrataData.Layers[0].BSDFs[0]) = Scatter;
	HAIR_ROUGHNESS					(StrataData.Layers[0].BSDFs[0]) = Roughness;
	HAIR_SPECULAR					(StrataData.Layers[0].BSDFs[0]) = Specular;
	HAIR_BACKLIT					(StrataData.Layers[0].BSDFs[0]) = Backlit;
	HAIR_COMPLEXTRANSMITTANCE		(StrataData.Layers[0].BSDFs[0]) = USE_HAIR_COMPLEX_TRANSMITTANCE;

#if STRATA_INLINE_SHADING
	StrataData.Layers[0].BSDFs[0].Coverage = 1.0f;
#endif

	return StrataData;
}

FStrataData GetStrataSingleLayerWaterBSDF(
	float3 BaseColor, float Metallic, float Specular, float Roughness, float3 Emissive, float TopMaterialOpacity,
	float3 WaterAlbedo, float3 WaterExtinction, float WaterPhaseG, float3 ColorScaleBehindWater, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataDataWithReservedFirstSlot();

	BSDF_SETTYPE					(StrataData.Layers[0].BSDFs[0], STRATA_BSDF_TYPE_SINGLELAYERWATER);
	BSDF_SETSHAREDLOCALBASISID		(StrataData.Layers[0].BSDFs[0], SharedLocalBasisIndex);
	BSDF_SETEMISSIVE				(StrataData.Layers[0].BSDFs[0], Emissive);
	SLW_BASECOLOR					(StrataData.Layers[0].BSDFs[0]) = BaseColor;
	SLW_METALLIC					(StrataData.Layers[0].BSDFs[0]) = Metallic;
	SLW_SPECULAR					(StrataData.Layers[0].BSDFs[0]) = Specular;
	SLW_ROUGHNESS					(StrataData.Layers[0].BSDFs[0]) = Roughness;
	SLW_TOPMATERIALOPACITY			(StrataData.Layers[0].BSDFs[0]) = TopMaterialOpacity;
#if STRATA_INLINE_SINGLELAYERWATER
	SLW_WATERALBEDO					(StrataData.Layers[0].BSDFs[0]) = WaterAlbedo;
	SLW_WATEREXTINCTION				(StrataData.Layers[0].BSDFs[0]) = WaterExtinction;
	SLW_WATERPHASEG					(StrataData.Layers[0].BSDFs[0]) = WaterPhaseG;
	SLW_COLORSCALEBEHINDWATER		(StrataData.Layers[0].BSDFs[0]) = ColorScaleBehindWater;
#endif

#if STRATA_INLINE_SHADING
	StrataData.Layers[0].BSDFs[0].Coverage = 1.0f;
#endif

	return StrataData;
}

// Optimised for power of two because it relies on a division done using bit shift
uint DivideAndRoundUp(uint Dividend, uint Divisor, uint DivisorAsBitShift)
{
	return (Dividend + Divisor - 1) >> DivisorAsBitShift;
}

struct FStrataAddressing
{
	uint  CurrentIndex;

	uint2 PixelCoords;

	uint  ReadBytes;
};
FStrataAddressing GetStrataPixelDataByteOffset(uint2 PixelPos, uint2 ViewBufferSize, uint StrataMaxBytesPerPixel)
{
	FStrataAddressing StrataAddressing = (FStrataAddressing)0;
	StrataAddressing.CurrentIndex = 0;
	StrataAddressing.PixelCoords = PixelPos;
	StrataAddressing.ReadBytes = 0;
	return StrataAddressing;
}

#if COMPILER_SWITCH // These platforms are complaining so simply disabling Strata there for now.

void StrataStoreUint1(inout FRWStrataMaterialContainer StrataBuffer, RWTexture2DArray<uint> ExtraMaterialDataUAV, inout FStrataAddressing StrataAddressing, uint Data) {}
#define STRATA_STORE_UINT1(x) 

void FinalizeWrites(inout FRWStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing) {}

uint StrataLoadUint1(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing) { return 0; }

#else

void StrataStoreUint1(inout FRWStrataMaterialContainer StrataBuffer, RWTexture2DArray<uint> ExtraMaterialDataUAV, inout FStrataAddressing StrataAddressing, uint Data)
{
	// We heavily rely on the compiler to optimize out the if code
	if (StrataAddressing.CurrentIndex < STRATA_BASE_PASS_MRT_OUTPUT_COUNT)
	{
		StrataBuffer.MaterialRenderTargets[0] = StrataAddressing.CurrentIndex == 0 ? Data : StrataBuffer.MaterialRenderTargets[0];
		StrataBuffer.MaterialRenderTargets[1] = StrataAddressing.CurrentIndex == 1 ? Data : StrataBuffer.MaterialRenderTargets[1];
#if STRATA_BASE_PASS_MRT_OUTPUT_COUNT != 2
#error Strata STRATA_BASE_PASS_MRT_OUTPUT_COUNT has been update but not StrataStore function
#endif
	}
	else
	{
		ExtraMaterialDataUAV[uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex - STRATA_BASE_PASS_MRT_OUTPUT_COUNT)] = Data;
	}
	StrataAddressing.CurrentIndex++;
}
#define STRATA_STORE_UINT1(x)	StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, x)

void FinalizeWrites(inout FRWStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	// NOP
}

uint StrataLoadUint1(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	uint Data = StrataBuffer[uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex)];
	StrataAddressing.CurrentIndex++;
	return Data;
}

#endif


///////////////////////////////////////////////////////////////////////////////
// Shared local bases

#define STRATA_BASIS_TYPE_NORMAL 0u
#define STRATA_BASIS_TYPE_TANGENT 1u
struct FSharedLocalBases
{
	uint Count;
	uint Types;
	float3 Normals[STRATA_MAX_SHAREDLOCALBASES_REGISTERS];	// once registered, normals are always world space
	float3 Tangents[STRATA_MAX_SHAREDLOCALBASES_REGISTERS];// idem for tangents
};

FSharedLocalBases StrataInitialiseSharedLocalBases()
{
	FSharedLocalBases SharedLocalBases = (FSharedLocalBases)0;
	return SharedLocalBases;
}

void StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index)
{
	Types = Types | (STRATA_BASIS_TYPE_TANGENT << Index);
}

uint StrataGetSharedLocalBasisType(in uint Types, uint Index)
{
	return (Types >> Index) & 0x1 ? STRATA_BASIS_TYPE_TANGENT : STRATA_BASIS_TYPE_NORMAL;
}

///////////////////////////////////////////////////////////////////////////////
// Header

struct FStrataPixelHeader
{
	uint BSDFCount;

#if STRATA_INLINE_SHADING
	// All the shared local bases in VGPRS. This is only used in basepass and during forward rendering.
	FSharedLocalBases SharedLocalBases;
#else
	FStrataMaterialContainer StrataBuffer;
	uint SharedLocalBasesIndexOffset;
	uint SharedLocalBasesTypes_PackedHeader; // Stores SharedLocalBasesTypes for non-simple material, and PackedHeader data for simple material
	uint PackedTopLayerData;
#endif

	float MaterialAO;

	uint State;
};

bool IsSimpleMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_ISSIMPLEMATERIAL) != 0; }
bool IsSingleMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_ISSINGLEMATERIAL) != 0; }
bool HasPrecShadowMask(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_HASPRECSHADOWMASK) != 0; }
bool HasZeroPrecShadowMask(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_ZEROPRECSHADOWMASK) != 0; }
bool IsSingleLayerWater(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_ISSINGLELAYERWATER) != 0; }
bool DoesCastContactShadow(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_CASTCONTACTSHADOW) != 0; }
uint GetShadingModels(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_SHADINGMODELS)>>HEADER_BIT_OFFSET_SHADINGMODELS; }
bool IsStrataMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_SHADINGMODELS) > 0 || IsSimpleMaterial(In); }
bool HasSubsurface(const FStrataPixelHeader In)												{ return (In.State & HEADER_MASK_HASSUBSURFACE) != 0; }
bool HasDynamicIndirectShadowCasterRepresentation(const FStrataPixelHeader In)				{ return (In.State & HEADER_MASK_HASDYNINDIRECTSHADOWCASTER) != 0; }

bool StrataHasShadingModel(const FStrataPixelHeader In, uint ShadingModel)					{ return StrataHasShadingModel(GetShadingModels(In), ShadingModel); }

void SetIsSimpleMaterial(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_ISSIMPLEMATERIAL : 0u); }
void SetIsSingleMaterial(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_ISSINGLEMATERIAL : 0u); }
void SetHasPrecShadowMask(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_HASPRECSHADOWMASK : 0u); }
void SetZeroPrecShadowMask(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_ZEROPRECSHADOWMASK : 0u); }
void SetIsSingleLayerWater(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_ISSINGLELAYERWATER : 0u); }
void SetCastContactShadow (inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_CASTCONTACTSHADOW : 0u); }
void SetDynamicIndirectShadowCasterRepresentation(inout FStrataPixelHeader Out, bool bIn)	{ Out.State |= (bIn ? HEADER_MASK_HASDYNINDIRECTSHADOWCASTER : 0u); }
void SetHasSubsurface(inout FStrataPixelHeader Out, bool bIn)								{ Out.State |= (bIn ? HEADER_MASK_HASSUBSURFACE : 0u); }

void AddShadingModels(inout FStrataPixelHeader Out, uint bIn)								{ Out.State |= ((bIn<<HEADER_BIT_OFFSET_SHADINGMODELS) & HEADER_MASK_SHADINGMODELS); }
void AndIsSimpleMaterial(inout FStrataPixelHeader Out, bool bIn)							{ Out.State = (Out.State & ~HEADER_MASK_ISSIMPLEMATERIAL) | ((Out.State & HEADER_MASK_ISSIMPLEMATERIAL) & (bIn ? HEADER_MASK_ISSIMPLEMATERIAL : 0u)); }
void AndIsSingleMaterial(inout FStrataPixelHeader Out, bool bIn)							{ Out.State = (Out.State & ~HEADER_MASK_ISSINGLEMATERIAL) | ((Out.State & HEADER_MASK_ISSINGLEMATERIAL) & (bIn ? HEADER_MASK_ISSINGLEMATERIAL : 0u)); }

FStrataPixelHeader InitialiseStrataPixelHeader()
{
	FStrataPixelHeader Out;
	Out.BSDFCount = 0;
#if STRATA_INLINE_SHADING
	Out.SharedLocalBases = (FSharedLocalBases)0;
#else
	Out.SharedLocalBasesIndexOffset = 0;
	Out.SharedLocalBasesTypes_PackedHeader = 0;
	Out.PackedTopLayerData = 0;
#endif
	Out.MaterialAO = 1.0f;
	Out.State = 0;
	return Out;
}

float3x3 StrataGetBSDFSharedBasis(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{
#if STRATA_INLINE_SHADING
	// Assume Normal & Tangent are already been normalized
	float3 Normal  = StrataPixelHeader.SharedLocalBases.Normals[BSDF_GETSHAREDLOCALBASISID(BSDF)];
	float3 Tangent = StrataPixelHeader.SharedLocalBases.Tangents[BSDF_GETSHAREDLOCALBASISID(BSDF)];
	float3 Bitangent = cross(Normal, Tangent);
	return float3x3(Tangent, Bitangent, Normal);
#else
	if (IsSimpleMaterial(StrataPixelHeader) || IsSingleMaterial(StrataPixelHeader))
	{		
		return GetTangentBasis(StrataUnpackTopLayerData(StrataPixelHeader.PackedTopLayerData).WorldNormal);
	}

	uint PackedBasis = StrataPixelHeader.StrataBuffer[uint3(StrataAddressing.PixelCoords, StrataPixelHeader.SharedLocalBasesIndexOffset + BSDF_GETSHAREDLOCALBASISID(BSDF))];

	uint BasisType   = StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBasesTypes_PackedHeader, BSDF_GETSHAREDLOCALBASISID(BSDF));
	float3x3 OutTangentBasis;
	if (BasisType == STRATA_BASIS_TYPE_NORMAL)
	{
		float3 Normal = StrataUnpackNormal(PackedBasis);
		OutTangentBasis = GetTangentBasis(Normal);
	}
	else // if (BasisType == STRATA_BASIS_TYPE_TANGENT)
	{
		float3 Normal;
		float3 Tangent;
		StrataUnpackNormalAndTangent(Normal, Tangent, PackedBasis);

		OutTangentBasis[0] = Tangent;
		OutTangentBasis[1] = cross(Normal, Tangent);
		OutTangentBasis[2] = Normal;
	}
	return OutTangentBasis;
#endif
}



///////////////////////////////////////////////////////////////////////////////
// Operator nodes

FStrataData StrataAdd(FStrataData A, FStrataData B)
{
	FStrataData StrataData = A;

	// Append each BSDF from B to A, with same layer position
	STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
	for (int Layer = 0; Layer < B.LayerCount; ++Layer)
	{
		FStrataLayer ALayer = A.Layers[Layer];
		FStrataLayer BLayer = B.Layers[Layer];
		STRATA_UNROLL
		for (int BSDF = 0; BSDF < BLayer.BSDFCount; BSDF++)
		{
			StrataData.Layers[Layer].BSDFs[ALayer.BSDFCount + BSDF] = BLayer.BSDFs[BSDF];
		}

		StrataData.Layers[Layer].BSDFCount = ALayer.BSDFCount + BLayer.BSDFCount;
	}

	StrataData.LayerCount = max(A.LayerCount, B.LayerCount);

	return StrataData;
}

FStrataData StrataWeight(FStrataData A, float Weight)
{
	const float SafeWeight = saturate(Weight);
	FStrataData StrataData = A;

	// Apply the weight to each BSDF
	STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
	for (int Layer = 0; Layer < StrataData.LayerCount; ++Layer)
	{
		STRATA_UNROLL
		for (int BSDF = 0; BSDF < StrataData.Layers[Layer].BSDFCount; ++BSDF)
		{
#if STRATA_INLINE_SHADING
			StrataData.Layers[Layer].BSDFs[BSDF].Coverage *= SafeWeight;

			if (StrataData.Layers[Layer].BSDFs[BSDF].bPremultipliedCoverage) 
			{
				// Only slab can follow parameter blending rule: we can encounter pre weighted lighting contribution according to coverage.
				SLAB_DIFFUSEALBEDO(StrataData.Layers[Layer].BSDFs[BSDF]) *= SafeWeight;
				SLAB_F0(StrataData.Layers[Layer].BSDFs[BSDF]) *= SafeWeight;
				SLAB_F90(StrataData.Layers[Layer].BSDFs[BSDF]) *= SafeWeight;
				SLAB_FUZZ_COLOR(StrataData.Layers[Layer].BSDFs[BSDF]) *= SafeWeight;
			}
#endif
		}
	}

	return StrataData;
}

FStrataData StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix)
{
	const float ForegroundMixFactor = saturate(Mix);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	FStrataData A = StrataWeight(Foreground, ForegroundMixFactor);
	FStrataData B = StrataWeight(Background, BackgroundMixFactor);
	return StrataAdd(A, B);
}

FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base)
{
	FStrataData StrataData = Top;

	// Add each layer from Base under Top
	int TopLayerCount = Top.LayerCount;
	STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
	for (int Layer = 0; Layer < Base.LayerCount; ++Layer)
	{
		StrataData.Layers[TopLayerCount + Layer] = Base.Layers[Layer];
	}

	StrataData.LayerCount += Base.LayerCount;

	return StrataData;
}

float HorizontalMixingParameterBlendingBSDFCoverageToNormalMix(FStrataData Background, FStrataData Foreground, float HorizontalMixValue)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
#if STRATA_INLINE_SHADING
	const float SafeBackCoverage = saturate(Background.Layers[0].BSDFs[0].Coverage);
	const float SafeForeCoverage = saturate(Foreground.Layers[0].BSDFs[0].Coverage);

	return HorizontalMixValue;
#else
	return 0.5f;
#endif
}

// Note about parameter blending
//  - We can only parameter blend Slab nodes. This error is handled in the compiler.
//  - We can only parameter blend one BSDF into another single BSDF. More complex topology are not handled and result in a compiler error. This could be extended to a single BSDF per layer.
//  - Maybe at some point we can propose a concatenate node, compressing a complex topology into a single one.
//  - Slab node with SSSprofile cannot be blendend. Those will have to be specifically handled by the user and not mixed with any other slab if it can be demoted to parameter blending

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoHorizontalMixingParamBlend
FStrataData StrataHorizontalMixingParameterBlending(FStrataData Background, FStrataData Foreground, float HorizontalMixValue, float NormalMixCodeChunk, uint NewNormalIndex)
{
	const float ForegroundLightingMixFactor = saturate(HorizontalMixValue);	// Only the horizontal mixing value
	const float ForegroundOtherMixFactor = saturate(NormalMixCodeChunk);	// Horizontal mixing value combined with coverage

	FStrataData Result = GetInitialisedStrataDataWithReservedFirstSlot();
#define ResultBSDF		Result.Layers[0].BSDFs[0]
#define ForegroundBSDF	Foreground.Layers[0].BSDFs[0]
#define BackgroundBSDF	Background.Layers[0].BSDFs[0]

#if STRATA_INLINE_SHADING
	const float ForeLightingFactor = ForegroundBSDF.bPremultipliedCoverage ? 1.0f : saturate(ForegroundBSDF.Coverage);
	const float BackLightingFactor = BackgroundBSDF.bPremultipliedCoverage ? 1.0f : saturate(BackgroundBSDF.Coverage);
	ResultBSDF.bPremultipliedCoverage = true;
#else
	const float ForeLightingFactor = 1.0f;
	const float BackLightingFactor = 1.0f;
#endif

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	BSDF_GETHASANISOTROPY(ForegroundBSDF)			| BSDF_GETHASANISOTROPY(BackgroundBSDF));
	BSDF_SETHASSSS(ResultBSDF,			BSDF_GETHASSSS(ForegroundBSDF)					| BSDF_GETHASSSS(BackgroundBSDF));
	BSDF_SETHASSSSPROFILE(ResultBSDF,	BSDF_GETHASSSSPROFILE(ForegroundBSDF)			| BSDF_GETHASSSSPROFILE(BackgroundBSDF));	// Problem: cannot blend SSS profiles...
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(ForegroundBSDF)					| BSDF_GETISTHIN(BackgroundBSDF));			// STRATA_TODO fix the MPF/DMFP situation for that to really work
	BSDF_SETHASDMFP(ResultBSDF,			BSDF_GETHASDMFP(ForegroundBSDF)					| BSDF_GETHASDMFP(BackgroundBSDF));
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(ForegroundBSDF)				| BSDF_GETHASHAZINESS(BackgroundBSDF));
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(ForegroundBSDF)					| BSDF_GETHASF90(BackgroundBSDF));
	BSDF_SETHASTHINFILM(ResultBSDF,		BSDF_GETHASTHINFILM(ForegroundBSDF)				| BSDF_GETHASTHINFILM(BackgroundBSDF));
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(ForegroundBSDF)					| BSDF_GETHASFUZZ(BackgroundBSDF));

	BSDF_SETEMISSIVE(ResultBSDF,		lerp(BackLightingFactor * BSDF_GETEMISSIVE(BackgroundBSDF),			ForeLightingFactor * BSDF_GETEMISSIVE(ForegroundBSDF),			ForegroundLightingMixFactor));
	SLAB_DIFFUSEALBEDO(ResultBSDF) =	lerp(BackLightingFactor * SLAB_DIFFUSEALBEDO(BackgroundBSDF),		ForeLightingFactor * SLAB_DIFFUSEALBEDO(ForegroundBSDF),		ForegroundLightingMixFactor);
	SLAB_F0(ResultBSDF) =				lerp(BackLightingFactor * SLAB_F0(BackgroundBSDF),					ForeLightingFactor * SLAB_F0(ForegroundBSDF),					ForegroundLightingMixFactor);
	SLAB_F90(ResultBSDF) =				lerp(BackLightingFactor * SLAB_F90(BackgroundBSDF),					ForeLightingFactor * SLAB_F90(ForegroundBSDF),					ForegroundLightingMixFactor);
	SLAB_FUZZ_COLOR(ResultBSDF)	=		lerp(BackLightingFactor * SLAB_FUZZ_COLOR(BackgroundBSDF),			ForeLightingFactor * SLAB_FUZZ_COLOR(ForegroundBSDF),			ForegroundLightingMixFactor);

	BSDF_SETTHICKNESSCM(ResultBSDF,		lerp(BSDF_GETTHICKNESSCM(BackgroundBSDF),							BSDF_GETTHICKNESSCM(ForegroundBSDF),							ForegroundOtherMixFactor));
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(BackgroundBSDF),								SLAB_ROUGHNESS(ForegroundBSDF),									ForegroundOtherMixFactor);
	SLAB_ANISOTROPY(ResultBSDF) =		lerp(SLAB_ANISOTROPY(BackgroundBSDF),								SLAB_ANISOTROPY(ForegroundBSDF),								ForegroundOtherMixFactor);
	SLAB_HAZINESS(ResultBSDF) =			lerp(SLAB_HAZINESS(BackgroundBSDF),									SLAB_HAZINESS(ForegroundBSDF),									ForegroundOtherMixFactor);
	SLAB_THINFILM_THICKNESS(ResultBSDF)=lerp(SLAB_THINFILM_THICKNESS(BackgroundBSDF),						SLAB_THINFILM_THICKNESS(ForegroundBSDF),						ForegroundOtherMixFactor);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(BackgroundBSDF),								SLAB_FUZZ_AMOUNT(ForegroundBSDF),								ForegroundOtherMixFactor);

	if (BSDF_GETHASSSSPROFILE(ResultBSDF))
	{
		const bool bForegroundHasSSSProfile = BSDF_GETHASSSSPROFILE(ForegroundBSDF);
		const bool bBackgroundHasSSSProfile = BSDF_GETHASSSSPROFILE(BackgroundBSDF);

		// As mentioned above, we cannot blend SSSProfiles. So we select the one that triggered the profile, foreground having priority.
		SLAB_SSSPROFILEID(ResultBSDF) = bForegroundHasSSSProfile ? SLAB_SSSPROFILEID(ForegroundBSDF) : SLAB_SSSPROFILEID(BackgroundBSDF);

		// We also lerp the radius scale, while taking into account whether or not the one or the other have SSSProfile.
		SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = lerp(
			bBackgroundHasSSSProfile ? SLAB_SSSPROFILERADIUSSCALE(BackgroundBSDF) : 0.0f,
			bForegroundHasSSSProfile ? SLAB_SSSPROFILERADIUSSCALE(ForegroundBSDF) : 0.0f,
			ForegroundOtherMixFactor);

		if (SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) == 0.0f)
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SSS_PROFILE_ID_INVALID;
			BSDF_SETHASSSS(ResultBSDF, 0);
			BSDF_SETHASSSSPROFILE(ResultBSDF, 0);
		}
	}
	else
	{
		SLAB_SSSDMFP(ResultBSDF) =		lerp(SLAB_SSSDMFP(BackgroundBSDF),								SLAB_SSSDMFP(ForegroundBSDF),										ForegroundOtherMixFactor);

		// We still try to disable SSS if possible: for performance and also to preserve the surface color (especially specular reflection color).
		if (all(SLAB_SSSDMFP(ResultBSDF) == 0.0f))
		{
			BSDF_SETHASSSS(ResultBSDF, 0);
		}
	}


#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the DMFP on the side to not override SSSPROFILE data.
	ResultBSDF.TmpDMFP =				lerp(BackgroundBSDF.TmpDMFP,									ForegroundBSDF.TmpDMFP,												ForegroundOtherMixFactor);

	// We blend the parameter above, and we also need to lerp the Coverage to match the total energy.
	ResultBSDF.Coverage =				lerp(BackgroundBSDF.Coverage,									ForegroundBSDF.Coverage,											ForegroundLightingMixFactor);
#endif

#undef ResultBSDF
#undef ForegroundBSDF
#undef BackgroundBSDF
	return Result;
}

float AddParameterBlendingBSDFCoverageToNormalMix(FStrataData AStrata, FStrataData BStrata)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
#if STRATA_INLINE_SHADING
	const float SafeABSDFCoverage = saturate(AStrata.Layers[0].BSDFs[0].Coverage);
	const float SafeBBSDFCoverage = saturate(BStrata.Layers[0].BSDFs[0].Coverage);
	const float AMixFactor = SafeABSDFCoverage / (1e-10 + SafeABSDFCoverage + SafeBBSDFCoverage);
	return AMixFactor;
#else
	return 0.5f;
#endif
}

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoAddParamBlend
FStrataData StrataAddParameterBlending(FStrataData A, FStrataData B, float AMixFactor, uint NewNormalIndex)
{
	FStrataData Result = GetInitialisedStrataDataWithReservedFirstSlot();
#define ResultBSDF		Result.Layers[0].BSDFs[0]
#define ABSDF			A.Layers[0].BSDFs[0]
#define BBSDF			B.Layers[0].BSDFs[0]

#if STRATA_INLINE_SHADING
	const float ALightingFactor = ABSDF.bPremultipliedCoverage ? 1.0f : saturate(ABSDF.Coverage);
	const float BLightingFactor = BBSDF.bPremultipliedCoverage ? 1.0f : saturate(BBSDF.Coverage);
	ResultBSDF.bPremultipliedCoverage = true;
#else
	const float ALightingFactor = 1.0f;
	const float BLightingFactor = 1.0f;
#endif

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	BSDF_GETHASANISOTROPY(BBSDF)							| BSDF_GETHASANISOTROPY(ABSDF));
	BSDF_SETHASSSS(ResultBSDF,			BSDF_GETHASSSS(BBSDF)									| BSDF_GETHASSSS(ABSDF));
	BSDF_SETHASSSSPROFILE(ResultBSDF,	BSDF_GETHASSSSPROFILE(BBSDF)							| BSDF_GETHASSSSPROFILE(ABSDF));	// Problem: cannot blend SSS profiles...
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(BBSDF)									| BSDF_GETISTHIN(ABSDF));			// STRATA_TODO fix the MPF/DMFP situation for that to really work
	BSDF_SETHASDMFP(ResultBSDF,			BSDF_GETHASDMFP(BBSDF)									| BSDF_GETHASDMFP(ABSDF));
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(BBSDF)								| BSDF_GETHASHAZINESS(ABSDF));
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(BBSDF)									| BSDF_GETHASF90(ABSDF));
	BSDF_SETHASTHINFILM(ResultBSDF,		BSDF_GETHASTHINFILM(BBSDF)								| BSDF_GETHASTHINFILM(ABSDF));
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(BBSDF)									| BSDF_GETHASFUZZ(ABSDF));


	// Some parameters will contribute to added luminance: in this case we add them together and saturate to not go out of the safe range
	BSDF_SETEMISSIVE(ResultBSDF,		BLightingFactor * BSDF_GETEMISSIVE(BBSDF)				+ ALightingFactor * BSDF_GETEMISSIVE(ABSDF));
	SLAB_DIFFUSEALBEDO(ResultBSDF) =	saturate(BLightingFactor * SLAB_DIFFUSEALBEDO(BBSDF)	+ ALightingFactor * SLAB_DIFFUSEALBEDO(ABSDF));
	SLAB_F0(ResultBSDF) =				saturate(BLightingFactor * SLAB_F0(BBSDF)				+ ALightingFactor * SLAB_F0(ABSDF));
	SLAB_F90(ResultBSDF) =				saturate(BLightingFactor * SLAB_F90(BBSDF)				+ ALightingFactor * SLAB_F90(ABSDF));
	SLAB_FUZZ_COLOR(ResultBSDF) =		saturate(BLightingFactor * SLAB_FUZZ_COLOR(BBSDF)		+ ALightingFactor * SLAB_FUZZ_COLOR(ABSDF));

	// Some parameters are not contributing to added luminance: in this case we simply lerp them
	BSDF_SETTHICKNESSCM(ResultBSDF,		lerp(BSDF_GETTHICKNESSCM(BBSDF),						BSDF_GETTHICKNESSCM(ABSDF),					AMixFactor));
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(BBSDF),								SLAB_ROUGHNESS(ABSDF),						AMixFactor);
	SLAB_ANISOTROPY(ResultBSDF) =		lerp(SLAB_ANISOTROPY(BBSDF),							SLAB_ANISOTROPY(ABSDF),						AMixFactor);
	SLAB_HAZINESS(ResultBSDF) =			lerp(SLAB_HAZINESS(BBSDF),								SLAB_HAZINESS(ABSDF),						AMixFactor);
	SLAB_THINFILM_THICKNESS(ResultBSDF) = 0;// This does not support coverage applied on pararmeters so we simply disable ThinFilm. lerp(SLAB_THINFILM_THICKNESS(BBSDF), SLAB_THINFILM_THICKNESS(ABSDF), AMixFactor);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(BBSDF),							SLAB_FUZZ_AMOUNT(ABSDF),					AMixFactor);

	if (BSDF_GETHASSSSPROFILE(ResultBSDF))
	{
		// As mentioned above, we cannot blend SSSProfiles. We do select the appropriate profile, ABSDF being selected if both have SSSProfile.
		if (BSDF_GETHASSSSPROFILE(ABSDF))
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SLAB_SSSPROFILEID(ABSDF);
			SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = SLAB_SSSPROFILERADIUSSCALE(ABSDF);
		}
		else
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SLAB_SSSPROFILEID(BBSDF);
			SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = SLAB_SSSPROFILERADIUSSCALE(BBSDF);
		}
	}
	else
	{
		SLAB_SSSDMFP(ResultBSDF) =		lerp(SLAB_SSSDMFP(BBSDF),								SLAB_SSSDMFP(ABSDF),						AMixFactor);
	}


#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the DMFP on the side to not override SSSPROFILE data.
	ResultBSDF.TmpDMFP =				lerp(BBSDF.TmpDMFP * BLightingFactor,					ABSDF.TmpDMFP * ALightingFactor,			AMixFactor);

	// When it comes to adding the visual contribution, we chose to add the coverage without clamping as currently done in the StrataAdd function.
	// Operations using Coverage are currently making sure they are in a safe range.
	ResultBSDF.Coverage =	 BBSDF.Coverage + ABSDF.Coverage;
#endif

#undef ResultBSDF
#undef ABSDF
#undef BBSDF
	return Result;
}

float VerticalLayeringParameterBlendingBSDFCoverageToNormalMix(FStrataData TopStrata)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
#if STRATA_INLINE_SHADING
	const float SafeTopBSDFCoverage = saturate(TopStrata.Layers[0].BSDFs[0].Coverage);
	const float TopNormalContributionForWeightOfOne = 0.5f;
	return SafeTopBSDFCoverage * TopNormalContributionForWeightOfOne;
#else
	return 0.5f;
#endif
}

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoVerticalLayeringParamBlend
FStrataData StrataVerticalLayeringParameterBlending(FStrataData Top, FStrataData Base, uint NewNormalIndex, float NoV)
{
	FStrataData Result = GetInitialisedStrataDataWithReservedFirstSlot();
#define ResultBSDF		Result.Layers[0].BSDFs[0]
#define TopBSDF			Top.Layers[0].BSDFs[0]
#define BaseBSDF		Base.Layers[0].BSDFs[0]

#if STRATA_INLINE_SHADING
	const float SafeTopCoverage = saturate(TopBSDF.Coverage);
	const float SafeBaseCoverage = saturate(BaseBSDF.Coverage);
	const float TopLightingFactor  = TopBSDF.bPremultipliedCoverage  ? 1.0f : SafeTopCoverage;
	const float BaseLightingFactor = BaseBSDF.bPremultipliedCoverage ? 1.0f : SafeBaseCoverage;
	ResultBSDF.bPremultipliedCoverage = true;
#else
	const float SafeTopCoverage = 1.0f;
	const float SafeBaseCoverage = 1.0f;
	const float TopLightingFactor = 1.0f;
	const float BaseLightingFactor = 1.0f;
#endif

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	0);																					// Anisotropy is disabled because it changes a lot of things
	BSDF_SETHASSSS(ResultBSDF,			BSDF_GETHASSSS(BaseBSDF));															// We only keep SSS if the bottom layer has it
	BSDF_SETHASSSSPROFILE(ResultBSDF,	0);																					// Problem: cannot blend SSS profiles so we simply disable SSSProfile
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(BaseBSDF));															// STRATA_TODO fix the MPF/DMFP situation for that to really work
	BSDF_SETHASDMFP(ResultBSDF,			BSDF_GETHASDMFP(BaseBSDF));															// We only keep SSS if the bottom layer has it
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(TopBSDF));														// We only keep haziness if the top layer has it
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(BaseBSDF)						| BSDF_GETHASF90(TopBSDF));			// F90: keep union of both even though it will be hard to get a match
	BSDF_SETHASTHINFILM(ResultBSDF,		BSDF_GETHASTHINFILM(TopBSDF));														// We only keep thinfilme if the top layer has it
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(BaseBSDF)						| BSDF_GETHASFUZZ(TopBSDF));		// Fuzz: keep union of both even though it will be hard to get a match

	// Compute the top slab transmittance that will be used to blend the top and base material parameters.
	// We do not check BSDF_GETISSIMPLEVOLUME(BSDFContext.BSDF) because that is set when we know the BSDF is not at the bottom later. And here we already know it is not the case.
	EnableSlabBSDFSimpleVolumetric(TopBSDF);
	const float3 UnusedDiffuseColor		= 0;	// Unused when only transmittance is needed
	FParticipatingMedia PM				= StrataSlabCreateParticipatingMedia(UnusedDiffuseColor, SLAB_SSSDMFP(TopBSDF));
	const float3 SlabTransmittance		= IsotropicMediumSlabTransmittance(PM, STRATA_SIMPLEVOLUME_THICKNESS_M, NoV);
	// Compute the colored throughput, taking into account the weight.
	const float3 ColorThroughput		= saturate((1.0f - SafeTopCoverage) + SafeTopCoverage * SlabTransmittance);
	const float GreyThroughput			= dot(ColorThroughput, 1.0f / 3.0f);
	
	// Add both layers thickness
	BSDF_SETTHICKNESSCM(ResultBSDF,		BSDF_GETTHICKNESSCM(BaseBSDF)												+ TopLightingFactor * BSDF_GETTHICKNESSCM(TopBSDF));

	// Now add bottom layer component weights by throughput to the top layer.
	// Those parameters will contribute to added luminance, in this case we add them together and saturate to not go out of the safe range
	// Some parameters are not contributing to added luminance: in this case we simply lerp them
	BSDF_SETEMISSIVE(ResultBSDF,		ColorThroughput * BaseLightingFactor * BSDF_GETEMISSIVE(BaseBSDF)			+ TopLightingFactor * BSDF_GETEMISSIVE(TopBSDF));

	SLAB_DIFFUSEALBEDO(ResultBSDF) =	saturate(ColorThroughput * BaseLightingFactor * SLAB_DIFFUSEALBEDO(BaseBSDF)+ TopLightingFactor * SLAB_DIFFUSEALBEDO(TopBSDF));
	SLAB_F0(ResultBSDF) =				saturate(ColorThroughput * BaseLightingFactor * SLAB_F0(BaseBSDF)			+ TopLightingFactor * SLAB_F0(TopBSDF));
	SLAB_F90(ResultBSDF) =				saturate(ColorThroughput * BaseLightingFactor * SLAB_F90(BaseBSDF)			+ TopLightingFactor * SLAB_F90(TopBSDF));
	SLAB_FUZZ_COLOR(ResultBSDF) =		saturate(ColorThroughput * BaseLightingFactor * SLAB_FUZZ_COLOR(BaseBSDF)	+ TopLightingFactor * SLAB_FUZZ_COLOR(TopBSDF));
		
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(TopBSDF),					SLAB_ROUGHNESS(BaseBSDF),					GreyThroughput);
	SLAB_HAZINESS(ResultBSDF) =			lerp(SLAB_HAZINESS(TopBSDF),					SLAB_HAZINESS(BaseBSDF),					GreyThroughput);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(TopBSDF),					SLAB_FUZZ_AMOUNT(BaseBSDF),					GreyThroughput);

	// Anisotropy is disabled with vertical blending. 
	SLAB_ANISOTROPY(ResultBSDF) =		0.f;

	// Only keep thin film for the top layer.
	SLAB_THINFILM_THICKNESS(ResultBSDF)= (SafeTopCoverage >= 1.0f) ? SLAB_THINFILM_THICKNESS(TopBSDF) : 0.0f;

	// Keep the DMFP form the bottom layer only (top layer simple volume is backed in parameters).
	SLAB_SSSDMFP(ResultBSDF) =			SLAB_SSSDMFP(BaseBSDF);

#if STRATA_INLINE_SHADING
	// Only the bottom layer SSS / Thin model is used so we only keep the bottom layer data there. Top layer is converted to throughput.
	ResultBSDF.TmpDMFP =				BaseBSDF.TmpDMFP;

	ResultBSDF.Coverage =				1.0f - (1.0f - SafeTopCoverage) * (1.0f - SafeBaseCoverage);
#endif

#undef ResultBSDF
#undef TopBSDF
#undef BaseBSDF
	return Result;
}


///////////////////////////////////////////////////////////////////////////////
// Functions used to sanitize BSDF before they are used for lighting (when forward) or stored to memory (base pass).
// We do not normalize normals, this is done before the lighting step.
// This step is obligatory so we apply View.MinRoughness here for forward and deferred.

float SanitizeRoughness(float Roughness)
{
#if MATERIAL_FULLY_ROUGH
	return 1.0f;
#else
	#if (USE_EDITOR_SHADERS && !ES3_1_PROFILE) || MOBILE_EMULATION
	// this feature is only needed for development/editor - we can compile it out for a shipping build (see r.CompileShadersForDevelopment cvar help)
	Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	#endif
	return saturate(max(View.MinRoughness, Roughness));
#endif
}

void SanitizeStrataSlab(inout FStrataBSDF BSDF)
{
	BSDF_SETEMISSIVE(BSDF, clamp(BSDF_GETEMISSIVE(BSDF), 0.0, Max10BitsFloat));
	SLAB_DIFFUSEALBEDO(BSDF) = saturate(SLAB_DIFFUSEALBEDO(BSDF));
	SLAB_F0(BSDF) = saturate(SLAB_F0(BSDF));
	SLAB_F90(BSDF) = saturate(SLAB_F90(BSDF));
	SLAB_ROUGHNESS(BSDF) = SanitizeRoughness(SLAB_ROUGHNESS(BSDF));
	SLAB_ANISOTROPY(BSDF) = clamp(SLAB_ANISOTROPY(BSDF), -1.f, 1.f);
	SLAB_HAZINESS(BSDF) = saturate(SLAB_HAZINESS(BSDF));
	SLAB_THINFILM_THICKNESS(BSDF) = saturate(SLAB_THINFILM_THICKNESS(BSDF));
#if STRATA_INLINE_SHADING
	BSDF.TmpDMFP = clamp(BSDF.TmpDMFP, 0.0f, Max111110BitsFloat3);
#endif

	// BSDF feature tests must be executed for profile path to not interact with DMFP, especially for forward rendered simple volumetrics.
	if (BSDF_GETHASSSS(BSDF))
	{
		if (BSDF_GETHASSSSPROFILE(BSDF))
		{
			SLAB_SSSPROFILERADIUSSCALE(BSDF) = saturate(SLAB_SSSPROFILERADIUSSCALE(BSDF));
		}
		else
		{
			SLAB_SSSDMFP(BSDF) = clamp(SLAB_SSSDMFP(BSDF), 0.0f, Max111110BitsFloat3);
		}
	}

	SLAB_FUZZ_AMOUNT(BSDF) = saturate(SLAB_FUZZ_AMOUNT(BSDF));
	SLAB_FUZZ_COLOR(BSDF) = saturate(SLAB_FUZZ_COLOR(BSDF));
}

void SanitizeStrataHair(inout FStrataBSDF BSDF)
{
	BSDF_SETEMISSIVE(BSDF, clamp(BSDF_GETEMISSIVE(BSDF), 0.0, Max10BitsFloat));
	HAIR_BASECOLOR(BSDF) = saturate(HAIR_BASECOLOR(BSDF));
	HAIR_SCATTER(BSDF) = saturate(HAIR_SCATTER(BSDF));
	HAIR_ROUGHNESS(BSDF) = SanitizeRoughness(HAIR_ROUGHNESS(BSDF));
	HAIR_SPECULAR(BSDF) = saturate(HAIR_SPECULAR(BSDF));
	HAIR_BACKLIT(BSDF) = saturate(HAIR_BACKLIT(BSDF));
}

void SanitizeStrataSingleLayerWater(inout FStrataBSDF BSDF)
{
	BSDF_SETEMISSIVE(BSDF, clamp(BSDF_GETEMISSIVE(BSDF), 0.0, Max10BitsFloat));
	SLW_BASECOLOR(BSDF) = saturate(SLW_BASECOLOR(BSDF));
	SLW_METALLIC(BSDF) = saturate(SLW_METALLIC(BSDF));
	SLW_SPECULAR(BSDF) = saturate(SLW_SPECULAR(BSDF));
	SLW_ROUGHNESS(BSDF) = SanitizeRoughness(SLW_ROUGHNESS(BSDF));
	SLW_TOPMATERIALOPACITY(BSDF) = saturate(SLW_TOPMATERIALOPACITY(BSDF));
#if STRATA_INLINE_SINGLELAYERWATER
	SLW_WATERALBEDO(BSDF) = saturate(SLW_WATERALBEDO(BSDF));
	SLW_WATEREXTINCTION(BSDF) = clamp(SLW_WATEREXTINCTION(BSDF), 0.0f, Max10BitsFloat);
	SLW_WATERPHASEG(BSDF) = clamp(SLW_WATERPHASEG(BSDF), -1.0f, 1.0f);
	SLW_COLORSCALEBEHINDWATER(BSDF) = clamp(SLW_COLORSCALEBEHINDWATER(BSDF), 0.0f, Max10BitsFloat);
#endif
}

void StrataSanitizeBSDF(inout FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
		case STRATA_BSDF_TYPE_SLAB:
		{
			SanitizeStrataSlab(BSDF);
			break; 
		}
		case STRATA_BSDF_TYPE_HAIR:
		{
			SanitizeStrataHair(BSDF);
			break;
		}
		case STRATA_BSDF_TYPE_SINGLELAYERWATER:
		{
			SanitizeStrataSingleLayerWater(BSDF);
			break;
		}
		
	}
}

// This is used to respect artistic desire, e.g. shutdown diffuse or specular.
float3 DitherIfNonBlack(float3 Input, float3 Dither)
{
	return float3(
		Input.x == 0.0 ? Input.x : Input.x + Dither.x,
		Input.y == 0.0 ? Input.y : Input.y + Dither.y,
		Input.z == 0.0 ? Input.z : Input.z + Dither.z
	);
}

void StrataDitherBSDF(inout FStrataBSDF BSDF, in float Dither)
{
	if (BSDF_GETTYPE(BSDF) == STRATA_BSDF_TYPE_SLAB)
	{
		// We execute a dither that can go in positive/negative direction to avoid surfaces to looks overall brighter.
		const float CenteredDither = Dither - 0.5f;
		const float Dither8bits = CenteredDither * 1.0f / 128.0f;
		const float Dither7bits = CenteredDither * 1.0f / 127.0f;
		const float Dither6bits = CenteredDither * 1.0f / 63.0f;
		const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

		SLAB_DIFFUSEALBEDO(BSDF) = DitherIfNonBlack(SLAB_DIFFUSEALBEDO(BSDF), Dither776);
		SLAB_F0(BSDF) = DitherIfNonBlack(SLAB_F0(BSDF), Dither776);
		SLAB_THINFILM_THICKNESS(BSDF) += BSDF_GETHASTHINFILM(BSDF) ? Dither8bits : 0.0f;
	}
}


///////////////////////////////////////////////////////////////////////////////
// Other tools

// Those participating media funtion are use by the Slab node. In this case, the DMFP is considered as a simple MFP because DMFP is not directly inversible to medium properties.

FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters)
{
	const float3 MeanFreePathMeters = MeanFreePathCentimeters * CENTIMETER_TO_METER;
	return CreateMediumFromBaseColorMFP(DiffuseColor, MeanFreePathMeters);
}

float StrataSlabDiffuseToVolumeBlend(FParticipatingMedia PM)
{
	// Remember, computation are made for a slab of 1 metter, according to STRATA_SIMPLEVOLUME_THICKNESS_M.
	// We start blending from diffuse toward a slab of participating media when the mean free path reaches 4 centimeters.
	const float MaxMeanFreePathMeters = max(PM.MeanFreePath.x, max(PM.MeanFreePath.y, PM.MeanFreePath.z));
	// Start blending volumetric after mean free path of 4 centimeters (also needed because threshold when recovering extinction from transmittance cause a small minimum value)
	const float StartVolumeBlendMFP = 0.04f;
	// And when the mean free path reaches 1/3.0f = 0.33 meter. That is extinction=1/0.33=3, transmittance at 1m (bottom of the slab) = exp(-3) = 0.05) we fully use the volumetric model.
	const float Blend = saturate(max(0.0, MaxMeanFreePathMeters - StartVolumeBlendMFP) * 3.0f);
	//const float Blend = max(0.0, MaxMeanFreePathMeters - StartVolumeBlendMFP) > 0.0 ? 1.0 : 0.0;

	// Using a non linear blend helps smoothing out transitions visually.
	return Blend * Blend;
}

void EnableSlabMFPComputationSpace(inout FStrataBSDF BSDF)
{
#if STRATA_INLINE_SHADING
	// Now we know that this is a simple volume so we can freely set the mean free path
	SLAB_SSSDMFP(BSDF) = BSDF.TmpDMFP;
#endif

	// Rescale the BSDF mean free path so that we can drop the thickness parameter and run volumetric material math on a unit slab of medium
	// For instance, if thickness is larger => we need to reduce the MFP for the medium to appear visually thicker.
	SLAB_SSSDMFP(BSDF) = clamp(SLAB_SSSDMFP(BSDF) * (STRATA_SIMPLEVOLUME_THICKNESS_CM / BSDF_GETTHICKNESSCM(BSDF)), 0.0f, Max111110BitsFloat3);
}

void EnableSlabBSDFSimpleVolumetric(inout FStrataBSDF BSDF)
{
	EnableSlabMFPComputationSpace(BSDF);

	// Mark the BSDF has not having any SSS through post process.
	BSDF_SETHASSSS(BSDF, 0);
	BSDF_SETHASSSSPROFILE(BSDF, 0);

	// Notify that the Slab can use SSS post-process only if at the bottom (layered considered optically thick, e.g. cannot see-through)
	// When forward rendering is used or if a layer is not a bottom layer, SSS post cannot be used and simple scattering is used.
	BSDF_SETISSIMPLEVOLUME(BSDF, 1);
}

void EnableSlabBSDFIsThin(inout FStrataBSDF BSDF)
{
	EnableSlabMFPComputationSpace(BSDF);
}


///////////////////////////////////////////////////////////////////////////////
// BSDFs packing/unpacking
// 11G11B10F and 10F are unsigned float format

uint Pack10F(float Value)
{
	return (f32tof16(Value) >> 5) & 0x000003FF;
}

float Unpack10F(uint Value)
{
	return f16tof32((Value << 5) & 0x7FE0);
}

uint PackR11G11B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 17) & 0xFFE00000;
	uint g = (f32tof16(rgb.g) << 6)  & 0x001FFC00;
	uint b = (f32tof16(rgb.b) >> 5)  & 0x000003FF;
	return r | g | b;
}

float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6)  & 0x7FF0);
	float b = f16tof32((rgb << 5)  & 0x7FE0);
	return float3(r, g, b);
}

uint2 PackR16G16B16A16F(float4 rgba)
{
	uint A = (f32tof16(rgba.r) << 16) | f32tof16(rgba.g);
	uint B = (f32tof16(rgba.b) << 16) | f32tof16(rgba.a);
	return uint2 (A, B);
}

float4 UnpackR16G16B16A16F(uint2 AB)
{
	float r = f16tof32(AB.x >> 16);
	float g = f16tof32(AB.x);
	float b = f16tof32(AB.y >> 16);
	float a = f16tof32(AB.y);
	return float4(r, g, b, a);
}

uint PackColorLinearToGamma2(float3 rgb)
{
	uint r = (uint(sqrt(saturate(rgb.r)) * 255.0f) << 16);
	uint g = (uint(sqrt(saturate(rgb.g)) * 255.0f) << 8);
	uint b = (uint(sqrt(saturate(rgb.b)) * 255.0f) << 0);
	return r | g | b;
}

float3 UnpackColorGamma2ToLinear(uint rgb)
{
	float r = float((rgb >> 16) & 0x000000FF);
	float g = float((rgb >> 8)  & 0x000000FF);
	float b = float((rgb >> 0)  & 0x000000FF);
	float3 Gamma2 = float3(r, g, b) * (1.0f / 255.0f);
	return Gamma2 * Gamma2;	// Simple gamma 2.0
}

uint PackColorLinearToGamma2AlphaLinear(float4 rgba)
{
	uint r = (uint(sqrt(saturate(rgba.r)) * 255.0f) << 24);
	uint g = (uint(sqrt(saturate(rgba.g)) * 255.0f) << 16);
	uint b = (uint(sqrt(saturate(rgba.b)) * 255.0f) << 8);
	uint a = (uint(     saturate(rgba.a)  * 255.0f) << 0);
	return r | g | b | a;
}

float4 UnpackColorGamma2ToLinearAlphaLinear(uint rgba)
{
	float r = float((rgba >> 24) & 0x000000FF);
	float g = float((rgba >> 16) & 0x000000FF);
	float b = float((rgba >> 8)  & 0x000000FF);
	float a = float((rgba >> 0)  & 0x000000FF);
	float3 Gamma2 = float3(r, g, b) * (1.0f / 255.0f);
	return float4(Gamma2 * Gamma2, a * (1.0f / 255.0f));	// Simple gamma 2.0
}

uint PackR8(float Value)
{
	return uint(saturate(Value) * 255.0f);
}

float UnpackR8(uint Value)
{
	return float(Value & 0xFF) * (1.0f / 255.0f);
}

uint PackRGBA8(float4 rgba)
{
	uint r = (uint(saturate(rgba.r) * 255.0f) << 0);
	uint g = (uint(saturate(rgba.g) * 255.0f) << 8);
	uint b = (uint(saturate(rgba.b) * 255.0f) << 16);
	uint a = (uint(saturate(rgba.a) * 255.0f) << 24);
	return r | g | b | a;
}

float4 UnpackRGBA8(uint rgba)
{
	float4 Out;
	Out.r = float((rgba >> 0)  & 0xFF) * (1.0f/255.0f);
	Out.g = float((rgba >> 8)  & 0xFF) * (1.0f/255.0f);
	Out.b = float((rgba >> 16) & 0xFF) * (1.0f/255.0f);
	Out.a = float((rgba >> 24) & 0xFF) * (1.0f/255.0f);
	return Out;
}

uint PackR7G7B6Gamma2(float3 rgb)
{
	uint r = (uint(sqrt(saturate(rgb.r)) * 127.0f) << 0);
	uint g = (uint(sqrt(saturate(rgb.g)) * 127.0f) << 7);
	uint b = (uint(sqrt(saturate(rgb.b)) *  63.0f) << 14);
	return r | g | b;
}

float3 UnpackR7G7B6Gamma2(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);
	return Out * Out;
}

// Simple Octahedral from "A Survey of Efficient Representations for Independent Unit Vectors" http://jcgt.org/published/0003/02/01/
float SignNotZero(in float k)
{
	return k >= 0.0 ? 1.0 : -1.0;
}
float2 SignNotZero(in float2 v)
{
	return float2(SignNotZero(v.x), SignNotZero(v.y));
}

uint StrataPackNormal(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	return f32tof16(Result.x) | (f32tof16(Result.y) << 16);
}

float3 StrataUnpackNormal(uint PackedNormal)
{
	const float2 xy = float2(f16tof32(0xFFFF & PackedNormal), f16tof32(0xFFFF & (PackedNormal >> 16)));
	return OctahedronToUnitVector(xy);
}

uint StrataPackNormal24(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	const uint2 PackedXY = uint2(clamp(Result * 2047.0f + 2048.0f, 0.0f, 4095.0f));
	return PackedXY.x | (PackedXY.y << 12);
}

float3 StrataUnpackNormal24(uint PackedNormal)
{
	const int2 XY12Bits = int2(0xFFF & PackedNormal, 0xFFF & (PackedNormal >> 12));
	const float2 xy = float2(XY12Bits - 2048) / 2047.0f;
	return OctahedronToUnitVector(xy);
}


#define STRATA_TANGENT_SYMMETRY 1
uint StrataPackNormalAndTangent(in float3 Normal, in float3 Tangent)
{
	uint X10Bits;
	uint Y10Bits;
	uint Z11Bits;
	uint W1Bit;

	// Oct. encoding for the normal
	{
		float l1norm = abs(Normal.x) + abs(Normal.y) + abs(Normal.z);
		float2 result = Normal.xy * (1.0 / l1norm);
		if (Normal.z < 0.0)
		{
			result = (1.0 - abs(result.yx)) * SignNotZero(result.xy);
		}
		X10Bits = uint(clamp(result.x * 511.0f + 512.0f, 0.0f, 1023.0f));
		Y10Bits = uint(clamp(result.y * 511.0f + 512.0f, 0.0f, 1023.0f));
	}

	// Oct. encoding for the projected tangent, relative to an generated ortho frame based on normal
	{
		// Use the quantize normal to regenerate tje ortho. frame. This removes discontinuities
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;
		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		//Normal = normalize(Normal);

		float3x3 LocalRef = GetTangentBasis(Normal);
		float2 ProjXY = float2(dot(LocalRef[0], Tangent), dot(LocalRef[1], Tangent));
	#if STRATA_TANGENT_SYMMETRY
		// Use symmetry to improve precision
		ProjXY = ProjXY.x >= 0 ? ProjXY : -ProjXY.xy;
	#endif
		float l1norm = abs(ProjXY.x) + abs(ProjXY.y);
		float2 result = ProjXY.xy * (1.0 / l1norm);

	#if STRATA_TANGENT_SYMMETRY
		Z11Bits = uint(clamp(result.x * 2047.0f, 0.0f, 2047.0f));
	#else
		Z11Bits = uint(clamp(result.x * 1023.0f + 1024.0f, 0.0f, 2047.0f));
	#endif
		W1Bit   = ProjXY.y >= 0 ? 1u : 0u;
	}

	return
		 (0x3FF & X10Bits)        | 
		((0x3FF & Y10Bits) << 10) | 
		((0x7FF & Z11Bits) << 20) |
		((0x1   & W1Bit  ) << 31);
}

void StrataUnpackNormalAndTangent(inout float3 Normal, inout float3 Tangent, in uint InPacked)
{
	uint X10Bits = 0x3FF &  InPacked;
	uint Y10Bits = 0x3FF & (InPacked>>10);
	uint Z11bits = 0x7FF & (InPacked>>20);
	uint W1Bit   = 0x1   & (InPacked>>31);

	// Oct. decoding for the normal
	{
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;

		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		Normal = normalize(Normal);
	}

	// Oct. decoding for the projected tangent, relative to an generated ortho frame based on normal
	{
		// Create intermediate basis
		float3x3 LocalRef = GetTangentBasis(Normal);
	#if STRATA_TANGENT_SYMMETRY
		float x = float(Z11bits) / 2047.0f;
	#else
		float x = float(int(Z11bits) - 1024) / 1023.0f;
	#endif
		float Sign = (W1Bit > 0 ? 1 : -1);
		float2 ProjX = float2(x, 1.0f - abs(x));
		Tangent = LocalRef[0] * ProjX.x + LocalRef[1] * ProjX.y * Sign;
		Tangent = normalize(Tangent);
	}
}

void StrataLoad_R11G11B10F(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 A)
{
	A = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, StrataAddressing));
}

void StrataLoad_R11_G11_B10F(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float A, inout float B, inout float C)
{
	float3 temp = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, StrataAddressing));
	A = temp.x;
	B = temp.y;
	C = temp.z;
}

void StrataLoad_ColorGamma2ToLinear(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 A)
{
	A = UnpackColorGamma2ToLinear(StrataLoadUint1(StrataBuffer, StrataAddressing));
}

void StrataLoad_ColorGamma2ToLinearAlphaLinear(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 RGB, inout float A)
{
	float4 Data = UnpackColorGamma2ToLinearAlphaLinear(StrataLoadUint1(StrataBuffer, StrataAddressing));
	RGB = Data.rgb;
	A = Data.a;
}

///////////////////////////////////////////////////////////////////////////////
// Strata deferred base-pass output

uint PackStrataHeader(uint BSDFCount, FStrataPixelHeader In);

// If this is changed, please update the compiler side material size evaluation in StrataMaterial.cpp
void PackStrataOut(
	inout FRWStrataMaterialContainer StrataBuffer,
	RWTexture2DArray<uint> ExtraMaterialDataUAV,
	float Dither,
	inout FStrataAddressing StrataAddressing,
	FStrataPixelHeader StrataPixelHeader,
	FStrataData Strata,
	float3 V,
	inout bool bStrataSubsurfaceEnable,
	inout float3 EmissiveColor,
	inout FStrataSubsurfaceData SSSData,
	inout FStrataTopLayerData TopLayerData)
{
	bStrataSubsurfaceEnable = false;
	EmissiveColor = 0.0f;

	const float OpaqueBSDFThroughput = 0.0f;
	const float FullThroughput = 1.0f;
	const float FullyRough = 1.0f;

	// While packing Strata layer data, Classification/SSS/TopLayer data are extracted & stored for dedicated passes
	// This avoid to run a post-basepass which would re-read all the material data
	SSSData = (FStrataSubsurfaceData)0;
	TopLayerData = (FStrataTopLayerData)0;

	SetIsSimpleMaterial(StrataPixelHeader, true); // non strata material or sky pixels are considered as simple (so that (strata simple pixels) + (non-strata pixels) can build a simple tile).
	SetIsSingleMaterial(StrataPixelHeader, true); // non strata material or sky pixels are considered as simple (so that (strata simple pixels) + (non-strata pixels) can build a simple tile).

	int SimpleMaterial_LayerIndex = 0;
	int SimpleMaterial_BSDFIndex = 0;
	uint BSDFCount = 0;
	uint BSDFVisibleCount = 0;
	float3 Throughput = 1.0f;

	// We clamp the layer count to the maximum one according to our byte per pixel budget (removing the bottom layer first)
	Strata.LayerCount = min(Strata.LayerCount, STRATA_CLAMPED_LAYER_COUNT);

	// Evaluate the bottom layer index programmatically according to coverage.
	// This is needed for instance when doing legacy to strata material conversion: a static topology with 2 layers is used for the compiler to
	// successfully unroll the loops below. Typically the BSDF is set as the top layer. 
	// SSS would not work if not the bottom layer so that is why we recover the bottom layer index this way.
	int BottomLayerIndex = Strata.LayerCount - 1;
#if STRATA_INLINE_SHADING
	{
		STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
		for (int l = BottomLayerIndex; l > 0; --l)	// Skipping layer 0 to process one less layer when there are two.
		{
			float TotalWeight = 0.0f;
			STRATA_UNROLL_N(STRATA_CLAMPED_MAX_BSDF_COUNT_PER_LAYER)
			for (int i = 0; i < Strata.Layers[l].BSDFCount; ++i)
			{
				TotalWeight += /*Throughput * */(Strata.Layers[l].BSDFs[i].bPremultipliedCoverage ? 1.0 : Strata.Layers[l].BSDFs[i].Coverage);
			}
			if (TotalWeight == 0.0f)
			{
				BottomLayerIndex--;
			}
			else
			{
				break;
			}
		}
	}
#endif

	// For each of the BSDF, we evaluated their combined coverage/throughput according to the material operation performed (layering, mixing, etc.).
	{
		STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
		for (int l = 0; l < Strata.LayerCount; ++l)
		{
			float3 LayerThroughput = 0.0f;
			float3 LayerCoverage = 0.0f;

			const bool bTopLayer = l == 0;
			const bool bBottomLayer = l == BottomLayerIndex;

			STRATA_UNROLL_N(STRATA_CLAMPED_MAX_BSDF_COUNT_PER_LAYER)
			for (int i = 0; i < Strata.Layers[l].BSDFCount; ++i)
			{
				// Dither BSDF data to hide more aggressive bit reduction.
				// Sanitize happening after will clamp values that could have gone above and below valid range.
				StrataDitherBSDF(Strata.Layers[l].BSDFs[i], Dither);

				// Sanitize BSDF in place before it is used and packed out to memory
				StrataSanitizeBSDF(Strata.Layers[l].BSDFs[i]);

				FStrataBSDF BSDF = Strata.Layers[l].BSDFs[i];

			#if STRATA_INLINE_SHADING
				const float BSDFCoverage = saturate(BSDF.Coverage);
			#else
				const float BSDFCoverage = 1.0f;
			#endif
				BSDFCount++;

				// STRATA_TODO apply the same normal transform as for the material
				float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
				float3 N = TangentBasis[2];
				//N = normalize(N);

				BxDFContext ContextNoLight = (BxDFContext)0;
				const float3 FakeL = float3(0, 0, 1);
				Init(ContextNoLight, N, V, FakeL);

				bool bIsSimpleMaterial = true;
				bool bIsSingleMaterial = true;
				switch (BSDF_GETTYPE(BSDF))
				{
				case STRATA_BSDF_TYPE_SLAB:
				{
					// Update simple material compatibility
					bIsSimpleMaterial = IsStrataSlabFastPathCompatible(BSDF);

					// Update single material compatibility. For now, single materials don't support anisotropy, 
					// they use the complex pass, as the toplayer data does not contain the full frame basis, only the top normal.
					bIsSingleMaterial = BSDF_GETHASANISOTROPY(BSDF) == 0;

					EmissiveColor += BSDF_GETEMISSIVE(BSDF) * Throughput;

					// Two sided lighting can only be evalauted on the bottom layer, together with option SSS. Otherwise, the simple volume will be used.
					const bool bIsThin = bBottomLayer && BSDF_GETISTHIN(Strata.Layers[l].BSDFs[i]);

					// We want simple volumetric only if the DMFP input is pluged in, otherwise we avoid storing the DFMP
					const bool bIsSimpleVolume = !bBottomLayer && BSDF_GETHASDMFP(Strata.Layers[l].BSDFs[i]);

					bStrataSubsurfaceEnable = bStrataSubsurfaceEnable || (BSDF_GETHASSSS(BSDF) && BSDFCoverage > 0 && !bIsSimpleVolume);

					// By default, without coverage, the diffuse BSDF is completely opaque
					float3 BSDFThroughput = OpaqueBSDFThroughput;

					if (bIsSimpleVolume)
					{
						float3 ApproxFresnelForTransmittance = 0;
						// STRATA_TODO Fresnel throughput, Use a LUT, this is currently in progress and will be coming soon.
						// In the meantime, we use a simple approach to feed Fresnel function and compute an approximation of the general transmition/througput.
						const float SatNoV = saturate(ContextNoLight.NoV);
						const float VoH = SatNoV;
						const float NoL = SatNoV;
						const float3 F0 = SLAB_F0(BSDF);
						const float3 F90 = SLAB_F90(BSDF);
						const bool bHasThinFilm = BSDF_GETHASTHINFILM(BSDF);
						BRANCH
						if (bHasThinFilm)
						{
							float ThinFilmIOR = SLAB_THINFILM_IOR(BSDF);
							float ThinFilmThickness = SLAB_THINFILM_THICKNESS(BSDF);
							ApproxFresnelForTransmittance = F_ThinFilm(SatNoV, NoL, VoH, F0, F90, ThinFilmIOR, ThinFilmThickness);
						}
						else
						{
							ApproxFresnelForTransmittance = F_Schlick(F0, F90, VoH);
						}

						EnableSlabBSDFSimpleVolumetric(Strata.Layers[l].BSDFs[i]);

						const float3 UnusedDiffuseColor = 0; // Unused when only trasmittance is needed
						FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(UnusedDiffuseColor, SLAB_SSSDMFP(Strata.Layers[l].BSDFs[i]));
						const float DiffuseToVolumeBlend = StrataSlabDiffuseToVolumeBlend(PM);
						const float3 SlabTransmittance = IsotropicMediumSlabTransmittance(PM, STRATA_SIMPLEVOLUME_THICKNESS_M, ContextNoLight.NoV);

						// Update the see-through throughput accoding to the medium transmittance
						BSDFThroughput = lerp(OpaqueBSDFThroughput, (1- ApproxFresnelForTransmittance) * SlabTransmittance, DiffuseToVolumeBlend);

						// Mark the BSDF has not having any SSS through post process.
						bStrataSubsurfaceEnable = false;
					}

					if (bIsThin)
					{
						EnableSlabBSDFIsThin(Strata.Layers[l].BSDFs[i]);
					}
					else
					{
						// If not selected or not possible to have two sided lighting enabled (not bottom layer or SSSProfile is enabled), let's make sure we disable the feature.
						BSDF_SETISTHIN(Strata.Layers[l].BSDFs[i], 0);
					}

					if (bTopLayer)
					{
						TopLayerData.Roughness += BSDFCoverage * SLAB_ROUGHNESS(BSDF);
					}

					const bool bSSSMask = !bIsThin && bBottomLayer;	// SSS and Thin can only be on the bottom layer, so ignoring bIsSimpleVolume here.
					SetHasSubsurface(StrataPixelHeader,	(bSSSMask && BSDF_GETHASSSS(BSDF)));

					// STRATA_TODO	Should we have the Fuzz influence the next layter visibility accoding to fuzz amount? Should it also occlude diffuse?
					//				If this is done, we should also update ComputePostProcessBSDFData.

					LayerCoverage	+= BSDFCoverage;
					LayerThroughput += BSDFCoverage * BSDFThroughput;
					break;
				}

				case STRATA_BSDF_TYPE_HAIR:
				{
					bIsSimpleMaterial = false;

					if (bTopLayer)
					{
						TopLayerData.Roughness += BSDFCoverage * FullyRough;
					}

					// Hair are considered opaque
					LayerCoverage	+= BSDFCoverage;
					LayerThroughput += BSDFCoverage * OpaqueBSDFThroughput;
					break;
				}

				case STRATA_BSDF_TYPE_SINGLELAYERWATER:
				{
					bIsSimpleMaterial = false;

					EmissiveColor += BSDF_GETEMISSIVE(BSDF) * Throughput;

					if (bTopLayer)
					{
						TopLayerData.Roughness += BSDFCoverage * SLW_ROUGHNESS(BSDF);
					}

					// Water is considered opaque, it has a custom process to simulate translucency
					LayerCoverage += BSDFCoverage;
					LayerThroughput += BSDFCoverage * OpaqueBSDFThroughput;
					break;
				}

				} // switch

			#if STRATA_INLINE_SHADING
				// Update the BSDF final weight with throughput towards the view from layers above and coverage if it has not been baked into the parameters.
				Strata.Layers[l].BSDFs[i].FinalWeight = Throughput * (Strata.Layers[l].BSDFs[i].bPremultipliedCoverage ? 1.0 : Strata.Layers[l].BSDFs[i].Coverage);
			#else
				Strata.Layers[l].BSDFs[i].FinalWeight = Throughput;
			#endif
			
				// Cull non visible BSDF
				const bool bIsVisible = any(Strata.Layers[l].BSDFs[i].FinalWeight > 0);
				if (bIsVisible)
				{
					++BSDFVisibleCount;

					AddShadingModels(StrataPixelHeader, StrataShadingModelBit(BSDF_GETTYPE(BSDF)));
					AndIsSimpleMaterial(StrataPixelHeader, bIsSimpleMaterial);
					AndIsSingleMaterial(StrataPixelHeader, bIsSingleMaterial);

					if (bTopLayer)
					{
						// together with a threshold to avoid 0-length normal after normalization in case influence is fadeout using the Weight node.
						TopLayerData.WorldNormal += N * max(1e-5, BSDFCoverage);
					}

					// if a material is simple/single, it is necessary the only one
					{
						SimpleMaterial_LayerIndex = l;
						SimpleMaterial_BSDFIndex = i;
					}
				}

				// Notify that the BSDF is at the top for SSR to only affect reflection there and not on the lower layers
				BSDF_SETISTOPLAYER(Strata.Layers[l].BSDFs[i], bTopLayer ? 1 : 0);
			}

			// Average the TopLayer data once we have read all the data
			if (bTopLayer)
			{
				// Top layer roughness & normal have been weighted with BSDF Coverage only (since the accumulated throughput is 1.f for the top-layer)
				const float BSDFWeightAvg = dot(LayerCoverage, 1.0f / 3.0f);

				TopLayerData.WorldNormal = normalize(TopLayerData.WorldNormal);
				TopLayerData.Roughness = BSDFWeightAvg > 0.0f ? TopLayerData.Roughness / BSDFWeightAvg : 0.0f;
			}

			// Take into account the non covered part for this layer and update throughput accordingly
			LayerThroughput += (1.0 - saturate(LayerCoverage)) * FullThroughput;

			// And combine this layer throughtput with he material throughput
			Throughput *= LayerThroughput;
		}
	}

	// Set storage layout as either: fast(0), single(1), or complex(2)
	AndIsSimpleMaterial(StrataPixelHeader, BSDFVisibleCount == 1);
	AndIsSingleMaterial(StrataPixelHeader, BSDFVisibleCount == 1);

	// Now write out Strata data

	///////////////////////////////////////////////////////////////////////////
	// 3 types of encodings
	// * A. Layout0: Simple encoding	(use top layer normal)
	// * B. Layout1: Single encoding	(use top layer normal)
	// * C. Layout2: Complex encoding	(use basis)
	const bool bHasFastEncoding   = IsSimpleMaterial(StrataPixelHeader);
	const bool bHasSingleEncoding = IsSingleMaterial(StrataPixelHeader);

	// (Layout2)
	if (!bHasFastEncoding && !bHasSingleEncoding)
	{
		// 1. the header (Regular/Complex encoding)
		const uint PackedHeader = PackStrataHeader(BSDFVisibleCount, StrataPixelHeader);
		STRATA_STORE_UINT1(PackedHeader);

		// 1.1 tangent basis (Regular/Complex encoding)
	#if STRATA_INLINE_SHADING
		UNROLL
		for (uint i = 0; i < StrataPixelHeader.SharedLocalBases.Count; ++i)
		{
			const uint BasisType = StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBases.Types, i);
			if (BasisType == STRATA_BASIS_TYPE_NORMAL)
			{
				STRATA_STORE_UINT1(StrataPackNormal(StrataPixelHeader.SharedLocalBases.Normals[i]));
			}
			else // if (BasisType == STRATA_BASIS_TYPE_TANGENT)
			{
				STRATA_STORE_UINT1(StrataPackNormalAndTangent(StrataPixelHeader.SharedLocalBases.Normals[i], StrataPixelHeader.SharedLocalBases.Tangents[i]));
			}
		}
	#endif
	}

	// 2. the list of BSDFs
	BSDFCount = 0;
	{
		STRATA_UNROLL_N(STRATA_CLAMPED_LAYER_COUNT)
		for (int l = 0; l < Strata.LayerCount; ++l)
		{
			FStrataLayer Layer = Strata.Layers[l];

			STRATA_UNROLL_N(STRATA_CLAMPED_MAX_BSDF_COUNT_PER_LAYER)
			for (int i = 0; i < Layer.BSDFCount; ++i)
			{
				FStrataBSDF BSDF = Layer.BSDFs[i];

				// Only write visible BSDF
				BRANCH
				if (any(BSDF.FinalWeight > 0))
				{
					const uint GreyScaleThroughput = StrataHasGreyScaleWeight(BSDF.FinalWeight) ? 1 : 0;
					BSDF_SETHASGREYWEIGHT(BSDF, GreyScaleThroughput);

					// A. Layout0 - Simple encoding (aka. fast-path): store header & data
					if (bHasFastEncoding && l == SimpleMaterial_LayerIndex && i == SimpleMaterial_BSDFIndex)
					{		
						// Now we pack diffuse and F0 in a special way: both encoded as R7G7B6 with gamma 2.0. The low bit cound will be hidden by dithering and TAA.
						// We pack 32 bits in the first uint and the remaining bits are pack is the lowest significant bit of the second uint.
						const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(SLAB_DIFFUSEALBEDO(BSDF));
						const uint PackedDiffuse12Bits	= PackedDiffuse20Bits & 0xFFF;
						const uint PackedDiffuse8Bits	= (PackedDiffuse20Bits>>12) & 0xFF;
						const uint PackedF020Bits		= PackR7G7B6Gamma2(SLAB_F0(BSDF));
						const uint PackedRoughness8bits = PackR8(SLAB_ROUGHNESS(BSDF));

						// Data0 (Header_State|Header_AO|Roughness|Diffuse8bits)
						{
							uint Out = 0;
							HEADER_SETSTATE(Out, StrataPixelHeader.State);
							HEADER_SETAO(Out, PackR8(StrataPixelHeader.MaterialAO));

							uint Packed16 = (PackedDiffuse8Bits << 8) | PackedRoughness8bits;
							Out = (Out & HEADER_FASTENCODING_MASK) | (Packed16 << HEADER_FASTENCODING_BIT_COUNT);
							STRATA_STORE_UINT1(Out);

							#if (HEADER_FASTENCODING_BIT_COUNT + 16) > 32
							#error Strata fast path header is > 32bits
							#endif
						}
						// Data1 (F0|Diffuse12bits)
						{
							uint Out = PackedF020Bits | (PackedDiffuse12Bits << 20);
							STRATA_STORE_UINT1(Out);
						}
						// Ensure the rest of the BSDF is not stored with the regular path
						BSDF.State = 0;
					}
					// B. Layout1 - Simple encoding: single BSDF, whose header & BSDF state are merged
					else if (bHasSingleEncoding && l == SimpleMaterial_LayerIndex && i == SimpleMaterial_BSDFIndex)
					{
						// Data0 (Header_State|Header_AO|Header_BSDFTypes|BSDF_State)
						{
							uint Out = 0;
							HEADER_SETSTATE(Out, StrataPixelHeader.State);
							HEADER_SETAO(Out, PackR8(StrataPixelHeader.MaterialAO));
							HEADER_SETSHADINGMODELS(Out, GetShadingModels(StrataPixelHeader));
							Out = Out & HEADER_SINGLEENCODING_MASK;							
							Out = Out | ((BSDF.State & STATE_SINGLEENCODING_MASK) << HEADER_SINGLEENCODING_BIT_COUNT);
							STRATA_STORE_UINT1(Out);

							#if (HEADER_SIMPLEENCODING_BIT_COUNT) > 32
							#error Strata fast path header is > 32bits
							#endif
						}
					}
					// C. Layout2 - Weight for Regular/Complex path
					else if (GreyScaleThroughput > 0)
					{
						BSDF_SETWEIGHT10F(BSDF, Pack10F(BSDF.FinalWeight.x));
						STRATA_STORE_UINT1(BSDF.State);
					}
					else
					{
						STRATA_STORE_UINT1(BSDF.State);
						STRATA_STORE_UINT1(PackR11G11B10F(BSDF.FinalWeight));
					}

					// Layout1 & Layout2
					const uint BSDFType = BSDF_GETTYPE(BSDF);
					switch (BSDF_GETTYPE(BSDF))
					{
					case STRATA_BSDF_TYPE_SLAB:
					{
						// Now we pack diffuse and F0 in a special way: both encoded as R7G7B6 with gamma 2.0. The low bit cound will be hidden by dithering and TAA.
						// We pack 32 bits in the first uint and the remaining bits are pack is the lowest significant bit of the second uint.
						const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(SLAB_DIFFUSEALBEDO(BSDF));
						const uint PackedF020Bits		= PackR7G7B6Gamma2(SLAB_F0(BSDF));
						const uint PackedData32Bits		= ((PackedDiffuse20Bits << 12) & 0xFFFFF000) | (PackedF020Bits & 0xFFF);
						const uint PackedData8Bits		= (PackedF020Bits >> 12) & 0xFF; 

						STRATA_STORE_UINT1(PackedData32Bits);
						STRATA_STORE_UINT1(PackedData8Bits | PackRGBA8(float4(0.0f , SLAB_ROUGHNESS(BSDF), (SLAB_ANISOTROPY(BSDF) + 1.f) * 0.5f, 0.f)));

						if (BSDF_GETHASF90(BSDF) || BSDF_GETHASTHINFILM(BSDF) || BSDF_GETHASHAZINESS(BSDF))
						{
							// What is important is to maintain the hue and saturation, so we scale the color by the maximum of its components
							float3 F90 = saturate(SLAB_F90(BSDF));
							const float Divisor = max(F90.r, max(F90.g, F90.b));
							F90 = Divisor > 0.0f ? F90 / Divisor : 1.0f;
							float3 F90YCoCg = LinearRGB_2_NormalisedYCoCg(F90);

							const float ThinFilmGamma2 = sqrt(SLAB_THINFILM_THICKNESS(BSDF)); // Using a gamma 2.0 encoding help with precision to be visually more uniform. This is then further improved via dithering.
							STRATA_STORE_UINT1(PackRGBA8(float4(F90YCoCg.y, F90YCoCg.z, ThinFilmGamma2, SLAB_HAZINESS(BSDF))));
						}

						const bool bIsSimpleVolume = BSDF_GETISSIMPLEVOLUME(BSDF);
						const bool bIsThin = BSDF_GETISTHIN(BSDF);
						if (BSDF_GETHASSSS(BSDF) || bIsSimpleVolume || bIsThin)
						{
							if (!bIsThin && BSDF_GETHASSSS(BSDF))
							{
								SSSData.BaseColor = SLAB_DIFFUSEALBEDO(BSDF);
								SSSData.Specular  = F0ToDielectricSpecular(SLAB_F0(BSDF).x);

								// Profile ID: we only keep the latest ID, and profile will overtake any non-profile based SSS
								SSSData.bIsValid 			= true;
								SSSData.bIsProfile 			= SSSData.bIsProfile || BSDF_GETHASSSSPROFILE(BSDF);
								SSSData.ProfileId 			= StrataSubsurfaceProfileIdTo8bits(SLAB_SSSPROFILEID(BSDF));
								SSSData.ProfileRadiusScale 	= SLAB_SSSPROFILERADIUSSCALE(BSDF);

								// STRATA_TODO This should be accumulated according to the BSDF weight when we run this in the base pass.
								// We cannot do that now because BSDFWeight contains weight*coverage*trhougput all mixed together.
								SSSData.DMFP = SLAB_SSSDMFP(BSDF);
							}

							if (BSDF_GETHASSSSPROFILE(BSDF) && !bIsSimpleVolume)
							{
								// Simple volume overrides SSS profile because it takes over for when not at the bottom of the BSDF layer, or during forward rendering.
								STRATA_STORE_UINT1(PackRGBA8(float4(SLAB_SSSPROFILEID(BSDF), SLAB_SSSPROFILERADIUSSCALE(BSDF), 0, 0)));
							}
							else
							{
								// Path used for bottom most layer SSS, simple volume and two sided lighting.
								STRATA_STORE_UINT1(PackR11G11B10F(SLAB_SSSDMFP(BSDF)));
							}
						}

						if (BSDF_GETHASFUZZ(BSDF))
						{
							STRATA_STORE_UINT1(PackColorLinearToGamma2AlphaLinear(float4(SLAB_FUZZ_COLOR(BSDF), SLAB_FUZZ_AMOUNT(BSDF))));
						}

						// 8-20 bytes
					}
					break;
					case STRATA_BSDF_TYPE_HAIR:
					{
						STRATA_STORE_UINT1(PackColorLinearToGamma2AlphaLinear(float4(HAIR_BASECOLOR(BSDF), HAIR_ROUGHNESS(BSDF))));
						STRATA_STORE_UINT1(PackRGBA8(float4(HAIR_SCATTER(BSDF), HAIR_SPECULAR(BSDF), HAIR_BACKLIT(BSDF), HAIR_COMPLEXTRANSMITTANCE(BSDF))));
						// 8 bytes
					}
					break;
					case STRATA_BSDF_TYPE_SINGLELAYERWATER:
					{
						STRATA_STORE_UINT1(PackColorLinearToGamma2AlphaLinear(float4(SLW_BASECOLOR(BSDF), 0.0f)));
						STRATA_STORE_UINT1(PackRGBA8(float4(SLW_METALLIC(BSDF), SLW_SPECULAR(BSDF), SLW_ROUGHNESS(BSDF), SLW_TOPMATERIALOPACITY(BSDF))));
					}
					break;
					}

					// Stop writing if above budget.
					BSDFCount++;
				}
			}
		}
	}

	FinalizeWrites(StrataBuffer, StrataAddressing);

	checkSlow(BSDFCount == BSDFVisibleCount);
}

// Pack only strata header
uint PackStrataHeader(uint InBSDFCount, FStrataPixelHeader InHeader)
{
	uint Out = 0;
	HEADER_SETBSDFCOUNT(Out, InBSDFCount);

#if STRATA_INLINE_SHADING
	HEADER_SETSHAREDLOCALBASESCOUNT(Out, InHeader.SharedLocalBases.Count);
	HEADER_SETSHAREDLOCALBASESTYPE(Out, InHeader.SharedLocalBases.Types);
#endif

	HEADER_SETAO(Out, PackR8(InHeader.MaterialAO));
	HEADER_SETSTATE(Out, InHeader.State);

	return Out;
}

// Unpack only strata header
// If this is changed, please update the compiler side material size evaluation in StrataMaterial.cpp
FStrataPixelHeader UnpackStrataHeaderIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, Texture2D<uint> InStrataTopLayerTexture)
{
	FStrataPixelHeader Out = InitialiseStrataPixelHeader();

	uint PackedHeader = StrataLoadUint1(StrataBuffer, StrataAddressing);
	Out.State		= HEADER_GETSTATE(PackedHeader);
	Out.MaterialAO	= UnpackR8(HEADER_GETAO(PackedHeader));
	Out.BSDFCount   = HEADER_GETBSDFCOUNT(PackedHeader);

	const bool bIsSimpleMaterial = (PackedHeader & HEADER_MASK_ISSIMPLEMATERIAL) > 0;
	const bool bIsSingleMaterial = (PackedHeader & HEADER_MASK_ISSINGLEMATERIAL) > 0;

	// Use simple or single layout for decoding data
	BRANCH
	if (bIsSimpleMaterial || bIsSingleMaterial)
	{
		Out.BSDFCount	= 1;

		if (bIsSimpleMaterial)
		{
			// Clear shading model, and ensurewe have only STRATA_BSDF_TYPE_SLAB
			Out.State = Out.State & (~HEADER_MASK_SHADINGMODELS);
			HEADER_SETSHADINGMODELS(Out.State, StrataShadingModelBit(STRATA_BSDF_TYPE_SLAB));
		}
		else // if (bIsSingleMaterial)
		{
			const uint ShadingModels = HEADER_GETSHADINGMODELS(PackedHeader);
			HEADER_SETSHADINGMODELS(Out.State, ShadingModels);
		}

	#if STRATA_INLINE_SHADING==0
		Out.StrataBuffer = StrataBuffer;
		Out.SharedLocalBasesTypes_PackedHeader = PackedHeader;
		Out.PackedTopLayerData = InStrataTopLayerTexture.Load(uint3(StrataAddressing.PixelCoords, 0));
		Out.SharedLocalBasesIndexOffset = 0; // Unused
	  #endif
	}
	else
	{
		uint SharedLocalBasesCount = HEADER_GETSHAREDLOCALBASESCOUNT(PackedHeader);
		uint SharedLocalBasesTypes = HEADER_GETSHAREDLOCALBASESTYPE(PackedHeader);

	#if STRATA_INLINE_SHADING==0
		Out.StrataBuffer = StrataBuffer;
		Out.SharedLocalBasesTypes_PackedHeader = SharedLocalBasesTypes;
		Out.PackedTopLayerData = 0;

		// Only keep the offset to the shared local bases memory. We are going to load them on demand.
		Out.SharedLocalBasesIndexOffset = StrataAddressing.CurrentIndex;

		// Now skip over the shared local basis memory to be able to load the BSDF content
		StrataAddressing.CurrentIndex += SharedLocalBasesCount;

		// And account for the space used by normal for the debug information
		StrataAddressing.ReadBytes += SharedLocalBasesCount * STRATA_PACKED_SHAREDLOCALBASIS_STRIDE_BYTES;
	#endif
	}

	return Out;
}

bool IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF)
{
	return (BSDF.State & SLAB_COMPLEX_PATH_MASK) == 0;
}

void UnpackFastPathSlabBSDF(inout FStrataBSDF OutBSDF, uint2 PackedData01)
{
	const uint PackedData8Bits		= PackedData01.y & 0xFF;
	const uint PackedData32Bits		= PackedData01.x;
	const uint PackedF020Bits		= ((PackedData8Bits << 12) & 0xFF000) | (PackedData32Bits & 0xFFF);
	const uint PackedDiffuse20Bits	= (PackedData32Bits >> 12) & 0xFFFFF;

	SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);

	float4 Data1 = UnpackRGBA8(PackedData01.y);
	SLAB_ROUGHNESS(OutBSDF)		= Data1.y;
	SLAB_ANISOTROPY(OutBSDF)	= Data1.z * 2.f - 1.f;
}

FStrataBSDF UnpackFastPathStrataBSDFIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, FStrataPixelHeader StrataPixelHeader)
{
	FStrataBSDF OutBSDF = (FStrataBSDF)0;

#if STRATA_INLINE_SHADING==0
	uint Data0 = StrataPixelHeader.SharedLocalBasesTypes_PackedHeader;
	uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
	OutBSDF.State = 0;
	OutBSDF.FinalWeight = 1.0f;

	const uint PackedRoughness8bits = 0xFF    & (Data0 >>  HEADER_FASTENCODING_BIT_COUNT);
	const uint PackedData8Bits		= 0xFF    & (Data0 >> (HEADER_FASTENCODING_BIT_COUNT + 8));
	const uint PackedData12Bits		= 0xFFF   & (Data1 >> 20);
	const uint PackedF020Bits		= 0xFFFFF & (Data1);
	const uint PackedDiffuse20Bits	= PackedData12Bits | (PackedData8Bits<<12);

	SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);
	SLAB_ROUGHNESS(OutBSDF)		= UnpackR8(PackedRoughness8bits);
	SLAB_ANISOTROPY(OutBSDF)	= 0.0f;
#endif

	// This is convenient to not have to test BSDF_GETHASF90 all over the place in the code using the BSDF for such a core value.
	SLAB_F90(OutBSDF) = 1.0f;

	// Force a BSDF state to a single slab with isotropic specular, no subsurface scattering or any other options.
	// This is to help the compiler understand disabled path.
	BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
	BSDF_SETHASGREYWEIGHT(OutBSDF, 1);
	BSDF_SETHASF90(OutBSDF, 0);
	BSDF_SETHASANISOTROPY(OutBSDF, 0);
	BSDF_SETISTOPLAYER(OutBSDF, 1);
	BSDF_SETHASSSS(OutBSDF, 0);
	BSDF_SETHASSSSPROFILE(OutBSDF, 0);
	BSDF_SETHASHAZINESS(OutBSDF, 0);
	BSDF_SETHASTHINFILM(OutBSDF, 0);
	BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
	BSDF_SETHASFUZZ(OutBSDF, 0);

	return OutBSDF;
}

// Unpack a single BSDF
// Note: All BSDF lobes needs to be unpack in a sequential manner since each BSDF has a variable footprint.
// If this is changed, please update the compiler side material size evaluation in StrataMaterial.cpp
FStrataBSDF UnpackStrataBSDFIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, in FStrataPixelHeader StrataHeader)
{
	BRANCH
	if (IsSimpleMaterial(StrataHeader))
	{
		return UnpackFastPathStrataBSDFIn(StrataBuffer, StrataAddressing, StrataHeader);
	}

	FStrataBSDF OutBSDF = (FStrataBSDF)0;

	float DummyFloat = 0.0f;

	BRANCH
	if (IsSingleMaterial(StrataHeader))
	{
		uint Data = 0;
	#if STRATA_INLINE_SHADING==0
		Data = StrataHeader.SharedLocalBasesTypes_PackedHeader;
	#endif
		OutBSDF.State = (Data>>HEADER_SINGLEENCODING_BIT_COUNT) & STATE_SINGLEENCODING_MASK;
		OutBSDF.FinalWeight = 1.0f;
		const uint BSDFType = firstbitlow(GetShadingModels(StrataHeader));
		BSDF_SETTYPE(OutBSDF, BSDFType);

		// For now, single encode doesn't support anisotropy, as the top layer data only contains the normal, not the full frame basis
		BSDF_SETHASANISOTROPY(OutBSDF, 0);
	}
	else
	{
		OutBSDF.State = StrataLoadUint1(StrataBuffer, StrataAddressing);
		if (BSDF_GETHASGREYWEIGHT(OutBSDF))
		{
			OutBSDF.FinalWeight = Unpack10F(BSDF_GETWEIGHT10F(OutBSDF));
		}
		else
		{
			StrataLoad_R11G11B10F(StrataBuffer, StrataAddressing, OutBSDF.FinalWeight);
		}
	}

	const uint BSDFType = BSDF_GETTYPE(OutBSDF);
	BSDF_SETTYPE(OutBSDF, BSDFType);
	switch (BSDFType)
	{
	case STRATA_BSDF_TYPE_SLAB:
	{
		uint DataX = StrataLoadUint1(StrataBuffer, StrataAddressing);
		uint DataY = StrataLoadUint1(StrataBuffer, StrataAddressing);
		UnpackFastPathSlabBSDF(OutBSDF, uint2(DataX, DataY));

		SLAB_F90(OutBSDF) = 1.0f;
		SLAB_THINFILM_THICKNESS(OutBSDF) = 0.0f;
		const bool bHasF90 = BSDF_GETHASF90(OutBSDF);
		if (bHasF90 || BSDF_GETHASTHINFILM(OutBSDF) || BSDF_GETHASHAZINESS(OutBSDF))
		{
			float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));

			const float F90Co = Data.x;
			const float F90Cg = Data.y;
			// Setting Y=1 when converting back from YCoCg can lead to components being greater than 1. We fix this using two steps:
			// 1- We apply a simple scale determined manually on Y to keep Hue/Saturation expressivity large and similare to the input color from the base pass,
			//    even though the mapping from saturate to white is not linear.
			const float F90Y  = 1.0f / 3.0f; 
			float3 F90 = bHasF90 ? saturate(NormalisedYCoCg_2_LinearRGB(float3(F90Y, F90Co, F90Cg))) : 1.0f;
			// 2- We re-scale again the final recovered color according to its max component to maximise the brightness/hue similarity with the input color from the base pass.
			const float Divisor = max(F90.r, max(F90.g, F90.b));
			F90 = Divisor > 0.0f ? F90 / Divisor : F90;
			SLAB_F90(OutBSDF) = F90;

			SLAB_THINFILM_THICKNESS(OutBSDF) = Data.z * Data.z;
			SLAB_HAZINESS(OutBSDF) = Data.w;
		}

		const bool bIsSimpleVolume = BSDF_GETISSIMPLEVOLUME(OutBSDF);
		const bool bIsThin = BSDF_GETISTHIN(OutBSDF);
		if (BSDF_GETHASSSS(OutBSDF) || bIsSimpleVolume || bIsThin)
		{
			if (BSDF_GETHASSSSPROFILE(OutBSDF) && !bIsSimpleVolume && !bIsThin)
			{
				float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
				SLAB_SSSPROFILEID(OutBSDF) = Data.r;
				SLAB_SSSPROFILERADIUSSCALE(OutBSDF) = Data.g;
			}
			else
			{
				StrataLoad_R11G11B10F(StrataBuffer, StrataAddressing, SLAB_SSSDMFP(OutBSDF));
			}

			// When loading Strata BSDF which have SSS enable, BaseColor and (optionally) Specular value can be overriden 
			// based on the SSS method used (screen space SSS / checherboarded screen space SSS / ...)
			#if STRATA_SSS_MATERIAL_OVERRIDE
			if (!bIsSimpleVolume && !bIsThin)
			{
				const bool bChecker = CheckerFromPixelPos(StrataAddressing.PixelCoords);
				float3 DiffuseAlbedo = SLAB_DIFFUSEALBEDO(OutBSDF);
				float SpecularFactor = 1.0f;
				AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(DiffuseAlbedo, SpecularFactor, bChecker);
				SLAB_DIFFUSEALBEDO(OutBSDF) = DiffuseAlbedo;
				SLAB_F0(OutBSDF)  *= SpecularFactor;
				SLAB_F90(OutBSDF) *= SpecularFactor;
			}
			#endif
		}

		if (BSDF_GETHASFUZZ(OutBSDF))
		{
			StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, SLAB_FUZZ_COLOR(OutBSDF), SLAB_FUZZ_AMOUNT(OutBSDF));
		}
	}
	break;
	case STRATA_BSDF_TYPE_HAIR:
	{
		StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, HAIR_BASECOLOR(OutBSDF), HAIR_ROUGHNESS(OutBSDF));
		float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
		HAIR_SCATTER(OutBSDF) = Data.x;
		HAIR_SPECULAR(OutBSDF) = Data.y;
		HAIR_BACKLIT(OutBSDF) = Data.z;
		HAIR_COMPLEXTRANSMITTANCE(OutBSDF) = Data.w;
		// 8 bytes
	}
	break;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER:
	{
		StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, SLW_BASECOLOR(OutBSDF), DummyFloat);
		float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
		SLW_METALLIC(OutBSDF) = Data.x;
		SLW_SPECULAR(OutBSDF) = Data.y;
		SLW_ROUGHNESS(OutBSDF) = Data.z;
		SLW_TOPMATERIALOPACITY(OutBSDF) = Data.w;
		// 8 bytes
	}
	break;
	}

	return OutBSDF;
}
