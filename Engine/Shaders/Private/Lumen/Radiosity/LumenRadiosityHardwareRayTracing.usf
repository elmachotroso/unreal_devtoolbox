// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenRadiosityProbeGatherHardwareRayTracing.usf
=============================================================================*/

// TODO: Remove hair dependency
#include "../../HairStrands/HairStrandsVoxelPageCommonStruct.ush"

#include "../../Common.ush"
#include "../../MonteCarlo.ush"
#include "../../MortonCode.ush"
#include "../../SceneTextureParameters.ush"
#include "../../RayTracing/RayGenUtils.ush"

#include "../LumenCardCommon.ush"
#include "../LumenTracingCommon.ush"
#include "../LumenHardwareRayTracingCommon.ush"
#include "../LumenSceneLighting.ush"
#include "../LumenCardTile.ush"
#include "LumenRadiosity.ush"

RWTexture2D<float3> RWTraceRadianceAtlas;
RWTexture2D<float> RWTraceHitDistanceAtlas;

RaytracingAccelerationStructure TLAS;

float MinTraceDistance;
float MaxTraceDistance;
float MinTraceDistanceToSampleSurface;
float SurfaceBias;
float HeightfieldSurfaceBias;
float AvoidSelfIntersectionTraceDistance;
float MaxRayIntensity;
uint NumThreadsToDispatch;
float TanRadiosityRayConeHalfAngle;
uint MaxTranslucentSkipCount;
uint MaxTraversalIterations;

RAY_TRACING_ENTRY_RAYGEN(LumenRadiosityHardwareRayTracingRGS)
{	
#if DIM_INDIRECT_DISPATCH
	uint GlobalThreadIndex = GetUnWrappedRayTracingDispatchThreadId(DispatchRaysIndex(), THREADGROUP_SIZE);
	if (GlobalThreadIndex >= CardTileAllocator[0] * NumTracesPerProbe * RadiosityTileSize * RadiosityTileSize)
	{
		return;
	}
#else
	for (uint GlobalThreadIndex = DispatchRaysIndex().x;
		GlobalThreadIndex < CardTileAllocator[0] * NumTracesPerProbe * RadiosityTileSize * RadiosityTileSize;
		GlobalThreadIndex += NumThreadsToDispatch)
#endif
	{
		uint CardTileIndex;
		uint2 CoordInCardTile;
		uint2 TraceTexelCoord;
		UnswizzleTexelTraceCoords(GlobalThreadIndex, CardTileIndex, CoordInCardTile, TraceTexelCoord);

		FRadiosityTexel RadiosityTexel = GetRadiosityTexelFromCardTile(CardTileIndex, CoordInCardTile);

		if (RadiosityTexel.bInsideAtlas)
		{
			float3 Radiance = 0.0f;
			float TraceHitDistance = MaxTraceDistance;

			if (RadiosityTexel.Opacity > 0.0f)
			{
				float3 WorldPosition = RadiosityTexel.WorldPosition;
				float3 WorldNormal = RadiosityTexel.WorldNormal;
				
				float3 WorldRayDirection;
				float ConeHalfAngle;
				float PDF;
				GetRadiosityRay(RadiosityTexel, RadiosityTexel.CardCoord / ProbeSpacingInRadiosityTexels, TraceTexelCoord, WorldRayDirection, ConeHalfAngle, PDF);

				RayDesc Ray;
				if (RadiosityTexel.bHeightfield)
				{
					float3 WorldCameraOrigin = LWCHackToFloat(PrimaryView.WorldCameraOrigin);
					CalculateDistanceBasedHeightfieldBias(HeightfieldSurfaceBias, WorldPosition, WorldCameraOrigin);
				}
				else
				{
					Ray.Origin = WorldPosition + WorldNormal * SurfaceBias;
				}
				Ray.Direction = WorldRayDirection;
				Ray.TMin = MinTraceDistance;

				FRayCone RayCone = (FRayCone)0;
				RayCone = PropagateRayCone(RayCone, ConeHalfAngle, 0.0);

				const uint LinearCoord = CoordInCardTile.y * CARD_TILE_SIZE + CoordInCardTile.x;
				const uint OriginalCullingMode = 0;
				FRayTracedLightingContext Context = CreateRayTracedLightingContext(TLAS, RayCone, CoordInCardTile, LinearCoord, OriginalCullingMode, MaxTranslucentSkipCount, MaxTraversalIterations);

#if DIM_AVOID_SELF_INTERSECTION_TRACE
				// First trace - short distance with backface culling enabled to avoid self intersecting in cases where the traced geometry doesn't match what's in the GBuffer (Nanite, Ray Tracing LODs, etc)
				Ray.TMax = AvoidSelfIntersectionTraceDistance;
				FRayTracedLightingResult RayResult = CreateRayTracedLightingResult();

				if (Ray.TMax > Ray.TMin)
				{
					Context.CullingMode = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
					RayResult = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);
				}

				// Second trace - remaining ray with backface culling enabled to reduce leaking when starting from a point inside the mesh
				if (!RayResult.bIsHit)
				{
					Ray.TMin = max(Ray.TMin, AvoidSelfIntersectionTraceDistance);
					Ray.TMax = MaxTraceDistance;
					
					Context.CullingMode = OriginalCullingMode;
					RayResult = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);
				}
#else
				Ray.TMax = MaxTraceDistance;
				FRayTracedLightingResult RayResult = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);
#endif

				if (RayResult.TraceHitDistance < MinTraceDistanceToSampleSurface)
				{
					RayResult.Radiance = 0.0f;
				}

				if (RayResult.bIsHit)
				{
					Radiance = RayResult.Radiance;

					// Recalculate TraceHitDistance to incorporate biases
					float3 HitPosition = Ray.Origin + Ray.Direction * RayResult.TraceHitDistance;
					TraceHitDistance = length(RadiosityTexel.WorldPosition - HitPosition);
				}
				else
				{
					Radiance = EvaluateSkyRadiance(WorldRayDirection, tan(ConeHalfAngle));
				}

				float MaxLighting = max3(Radiance.x, Radiance.y, Radiance.z);

				if (MaxLighting > MaxRayIntensity * View.OneOverPreExposure)
				{
					Radiance *= MaxRayIntensity * View.OneOverPreExposure / MaxLighting;
				}
			}

			FCardTileData CardTile = UnpackCardTileData(CardTileData[CardTileIndex]);
			FLumenCardPageData CardPage = GetLumenCardPageData(CardTile.CardPageIndex);
			uint2 RadiosityProbeTracingAtlasCoord = GetRadiosityProbeAtlasCoord(CardPage, CardTile, CoordInCardTile) * HemisphereProbeResolution + TraceTexelCoord;
			RWTraceRadianceAtlas[RadiosityProbeTracingAtlasCoord] = Radiance;

			if (UseProbeOcclusion > 0)
			{
				RWTraceHitDistanceAtlas[RadiosityProbeTracingAtlasCoord] = TraceHitDistance;
			}
		}
	}
}
