// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	VisualizeLumenCardScene.usf
=============================================================================*/

#include "../Common.ush"
#include "LumenCardCommon.ush"
// Depth weighted OIT doesn't cover enough depth range for ConeTraceLumenDistantScene
// This has the side effect that card tracing for detail traces in this file don't get blended
#define CARD_TRACE_DEPTH_WEIGHTED_OIT 0
#include "LumenTracingCommon.ush"
#define RADIANCE_CACHE_DEPTH_TEST_SPHERE_PARALLAX 1
#include "LumenRadianceCacheCommon.ush"
#include "LumenVisualizeTraces.ush"
#include "../DeferredShadingCommon.ush"
#include "../SHCommon.ush"
#include "../ShaderPrintCommon.ush"
#include "LumenVisualize.ush"

uint3 CullGridSize;
uint CardGridPixelSizeShift;
int VisualizeTileIndex;
float VisualizeStepFactor;
float VoxelStepFactor;
float MinTraceDistance;
float MaxTraceDistance;
float MaxMeshSDFTraceDistanceForVoxelTracing;
float MaxMeshSDFTraceDistance;
int VisualizeClipmapIndex;
int VisualizeVoxelFaceIndex;
int VisualizeHiResSurface;
float CardInterpolateInfluenceRadius;

RWTexture2D<float4> RWSceneColor;
Buffer<uint> CulledCardGridHeader;

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 0
#endif

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void VisualizeQuadsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint2 TraceCoord = DispatchThreadId.xy;
	uint2 OutputScreenCoord = TraceCoord + OutputViewOffset;
	float2 ViewportUV = (TraceCoord + 0.5f) / OutputViewSize;
	uint2 PixelPos = ViewportUV * InputViewSize + InputViewOffset;

	// Clip rendering outside of bounds
	if (any(TraceCoord >= OutputViewSize))
	{
		return;
	}

	float2 ScreenPosition = float2(2.0f, -2.0f) * ViewportUV + float2(-1.0f, 1.0f);
	// We are rendering after TAAU, remove jitter
	float3 ScreenVector = mul(float4(ScreenPosition + View.TemporalAAJitter.xy, 1, 0), View.ScreenToTranslatedWorld).xyz;
	float3 CameraVector = normalize(ScreenVector);
	float Noise = InterleavedGradientNoise(PixelPos, View.StateFrameIndexMod8);

	float TanConeAngle = tan(PreviewConeAngle);
	float TraceDistance = MaxTraceDistance;
	bool bCoveredByRadianceCache = false;

#if RADIANCE_CACHE
	FRadianceCacheCoverage Coverage = GetRadianceCacheCoverage(LWCHackToFloat(PrimaryView.WorldCameraOrigin), CameraVector, .5f);
				
	if (Coverage.bValid)
	{
		TraceDistance = min(TraceDistance, Coverage.MinTraceDistanceBeforeInterpolation);
	}
#endif

	FConeTraceInput TraceInput;
	TraceInput.Setup(LWCHackToFloat(PrimaryView.WorldCameraOrigin), CameraVector, PreviewConeAngle, .01f, MinTraceDistance, TraceDistance, VisualizeStepFactor);
	TraceInput.VoxelStepFactor = VoxelStepFactor;
	TraceInput.SDFStepFactor = lerp(.8f, 1.0f, Noise);
	TraceInput.ScreenCoord = PixelPos;
	TraceInput.bHiResSurface = VisualizeHiResSurface != 0 ? true : false;

	float3 Debug = -1;

	bool bContinueCardTracing = false;
#if TRACE_MESH_SDF || SCENE_TRACE_HEIGHTFIELDS
	bContinueCardTracing = true;
#endif

	TraceInput.VoxelTraceStartDistance = CalculateVoxelTraceStartDistance(MinTraceDistance, TraceDistance, MaxMeshSDFTraceDistance, bContinueCardTracing);

#if RADIANCE_CACHE
	TraceInput.VoxelTraceStartDistance = min(TraceInput.VoxelTraceStartDistance, TraceDistance);
#endif

	// The visualization pass is after TAAU, correct for being after the upscaler
	int2 RenderingViewportPixelPos = PixelPos * (int2)View.ViewSizeAndInvSize / InputViewSize;
	int2 CellCoord = clamp((int2)RenderingViewportPixelPos >> CardGridPixelSizeShift, int2(0, 0), (int2)CullGridSize.xy - 1);
	uint CardGridCellIndex = CellCoord.x + CellCoord.y * CullGridSize.x;

	TraceInput.NumMeshSDFs = NumGridCulledMeshSDFObjects[CardGridCellIndex];
	TraceInput.MeshSDFStartOffset = GridCulledMeshSDFObjectStartOffsetArray[CardGridCellIndex];
	TraceInput.CardInterpolateInfluenceRadius = CardInterpolateInfluenceRadius;
	//Debug = TraceInput.NumMeshSDFs / 20.0f;
	TraceInput.bCalculateHitVelocity = true;
	// Only expand the SDF surface when the ray traversal is far enough away to not self-intersect
	TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance = false;
	TraceInput.InitialMaxDistance = 0;

	FConeTraceResult TraceResult = (FConeTraceResult)0;
	TraceResult.Transparency = 1;
	TraceResult.OpaqueHitDistance = TraceInput.MaxTraceDistance;

#if TRACE_MESH_SDF
	ConeTraceLumenSceneCards(TraceInput, TraceResult);
#endif

#if SCENE_TRACE_HEIGHTFIELDS
	TraceInput.NumHeightfields = NumGridCulledHeightfieldObjects[CardGridCellIndex];
	TraceInput.HeightfieldStartOffset = GridCulledHeightfieldObjectStartOffsetArray[CardGridCellIndex];
	ConeTraceLumenSceneHeightfields(TraceInput, TraceResult);
#endif

#if TRACE_GLOBAL_SDF
	ConeTraceLumenSceneVoxels(TraceInput, TraceResult);
#endif

#if RADIANCE_CACHE
	TraceResult.Lighting += SampleRadianceCacheInterpolated(Coverage, LWCHackToFloat(PrimaryView.WorldCameraOrigin), CameraVector, PreviewConeAngle).xyz * TraceResult.Transparency;
	TraceResult.Transparency = 0.0f;
#else

	#define VISUALIZE_TRACE_DISTANT_SCENE 1
	#if VISUALIZE_TRACE_DISTANT_SCENE
		FConeTraceResult DistantTraceResult;
		ConeTraceLumenDistantScene(TraceInput, DistantTraceResult);
		TraceResult.Lighting += DistantTraceResult.Lighting * TraceResult.Transparency;
		TraceResult.Transparency *= DistantTraceResult.Transparency;
	#endif

	EvaluateSkyRadianceForCone(CameraVector, TanConeAngle, TraceResult);
#endif

	TraceResult.Lighting *= View.PreExposure;

	float4 FinalColor = 0.0f;

	#define TRACE_VISUALIZE_MODE 0
	#if TRACE_VISUALIZE_MODE == 0
		FinalColor = float4(TraceResult.Lighting + float3(0 * (saturate(TraceResult.NumOverlaps / 20.0f)), 0, 0), 0);
	#elif TRACE_VISUALIZE_MODE == 1
		FinalColor = float4(frac(TraceResult.OpaqueHitDistance.xxx / 100.0f), 0);
	#elif TRACE_VISUALIZE_MODE == 2
		FinalColor = float4(TraceResult.Lighting + TraceResult.Debug, 0);
	#elif TRACE_VISUALIZE_MODE == 3
		FinalColor = float4(abs(TraceResult.WorldVelocity / 100.0f), 0);
	#else 
		FinalColor = float4(TraceResult.NumSteps.xxx / 100.0f, 0);
	#endif

	if (any(Debug >= 0))
	{
		FinalColor = float4(Debug, 0);
	}

	// The overview outputs after the tonemapper to overwrite editor primitives and must apply its own tonemapping
	FinalColor.rgb = VisualizeTonemap(FinalColor.rgb);

	RWSceneColor[OutputScreenCoord] = FinalColor;
}

StructuredBuffer<uint> GlobalDistanceFieldPageFreeListAllocatorBuffer;
uint GlobalDistanceFieldMaxPageNum;

[numthreads(1, 1, 1)]
void VisualizeStatsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	int NumFreePages = -1;
	if (GlobalDistanceFieldMaxPageNum > 0)
	{
		NumFreePages = GlobalDistanceFieldMaxPageNum - GlobalDistanceFieldPageFreeListAllocatorBuffer[0];
	}

	float2 Origin = float2(0.8, 0.2);
	float2 TextPos = Origin;
	TextPos = ShaderPrintSymbol(TextPos, _G_);
	TextPos = ShaderPrintSymbol(TextPos, _D_);
	TextPos = ShaderPrintSymbol(TextPos, _F_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _P_);
	TextPos = ShaderPrintSymbol(TextPos, _A_);
	TextPos = ShaderPrintSymbol(TextPos, _G_);
	TextPos = ShaderPrintSymbol(TextPos, _E_);
	TextPos = ShaderPrintSymbol(TextPos, _S_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintNewline(TextPos);
	TextPos.x = Origin.x;

	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _A_);
	TextPos = ShaderPrintSymbol(TextPos, _L_);
	TextPos = ShaderPrintSymbol(TextPos, _L_);
	TextPos = ShaderPrintSymbol(TextPos, _O_);
	TextPos = ShaderPrintSymbol(TextPos, _C_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, NumFreePages);
	TextPos = ShaderPrintNewline(TextPos);
	TextPos.x = Origin.x;

	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _M_);
	TextPos = ShaderPrintSymbol(TextPos, _A_);
	TextPos = ShaderPrintSymbol(TextPos, _X_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrintSymbol(TextPos, _SPC_);
	TextPos = ShaderPrint(TextPos, GlobalDistanceFieldMaxPageNum);
}

uint3 VoxelLightingGridResolution;

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void VisualizeLumenVoxelsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint2 PixelPos = DispatchThreadId.xy + OutputViewOffset;
	float2 ViewportUV = (DispatchThreadId.xy + 0.5f) / OutputViewSize;
	float2 ScreenPosition = float2(2.0f, -2.0f) * ViewportUV + float2(-1.0f, 1.0f);
	float3 ScreenVector = mul(float4(ScreenPosition, 1, 0), View.ScreenToTranslatedWorld).xyz;

	float4 LightingAndAlpha = float4(0, 0, 0, 1);
	uint TotalNumSteps = 0;

	float RayTime = 0.0f;
	float3 RayDirection = normalize(ScreenVector);
	float3 RayOrigin = LWCHackToFloat(PrimaryView.WorldCameraOrigin) + MinTraceDistance * RayDirection;
	int3 VoxelStep = (RayDirection < 0) ? int3(-1, -1, -1) : int3(1, 1, 1);

	uint VoxelClipmapIndex = VisualizeClipmapIndex >= 0 ? VisualizeClipmapIndex : 0;
	for (uint ClipmapIndex = 0; ClipmapIndex < NumClipmapLevels; ++ClipmapIndex)
	{
		bool bOutOfRange = any(abs(RayOrigin - ClipmapWorldCenter[ClipmapIndex].xyz) > ClipmapWorldExtent[ClipmapIndex].xyz);
		VoxelClipmapIndex = bOutOfRange ? ClipmapIndex + 1 : VoxelClipmapIndex;
	}

	float VoxelSize = ClipmapVoxelSizeAndRadius[VoxelClipmapIndex].x;
	float3 ClipmapMin = ClipmapWorldCenter[VoxelClipmapIndex].xyz - ClipmapWorldExtent[VoxelClipmapIndex].xyz;
	float3 ClipmapMax = ClipmapWorldCenter[VoxelClipmapIndex].xyz + ClipmapWorldExtent[VoxelClipmapIndex].xyz;
	int3 VoxelCoord = VoxelLightingGridResolution * (RayOrigin - ClipmapMin) / (ClipmapMax - ClipmapMin);

	float3 VoxelMin = (VoxelCoord + 0.0f) * VoxelSize + ClipmapMin;
	float3 VoxelMax = (VoxelCoord + 1.0f) * VoxelSize + ClipmapMin;
	float3 MaxNegT = (VoxelMin - RayOrigin) / RayDirection;
	float3 MaxPosT = (VoxelMax - RayOrigin) / RayDirection;
	float3 NextVoxelFaceT = (RayDirection < 0) ? MaxNegT : MaxPosT;
	float3 VoxelFaceStepT = abs(VoxelSize / RayDirection);

	uint RayVoxelEntryFace = 6;
	uint StepIndex = 0;

	while (StepIndex < 512 && LightingAndAlpha.a > MIN_VOXEL_TRACE_TRANSPARENCY && VoxelClipmapIndex < NumClipmapLevels)
	{
		if (VoxelClipmapIndex >= NumClipmapLevels || (VisualizeClipmapIndex >= 0 && (uint)VisualizeClipmapIndex != VoxelClipmapIndex))
		{
			break;
		}

		if (RayTime > MaxTraceDistance)
		{
			break;
		}


		if (RayVoxelEntryFace < 6)
		{
			int3 LightingVolumeCoord = VoxelCoord;
			LightingVolumeCoord.y += VoxelLightingGridResolution.y * VoxelClipmapIndex;
			LightingVolumeCoord.z += VoxelLightingGridResolution.z * RayVoxelEntryFace;

			float4 StepLighting;
			StepLighting = VoxelLighting.Load(int4(LightingVolumeCoord, 0));

			if (StepLighting.w > 0.0f)
			{
				LightingAndAlpha.xyz = StepLighting.xyz;
				LightingAndAlpha.w = 0.0f;
				break;
			}
		}


		// Next step
		float VoxelFaceT = min3(NextVoxelFaceT.x, NextVoxelFaceT.y, NextVoxelFaceT.z);
		uint3 StepInc = int3(NextVoxelFaceT == VoxelFaceT.xxx);
		RayVoxelEntryFace = VoxelFaceFromStep(StepInc, VoxelStep);
		RayTime = VoxelFaceT;
		NextVoxelFaceT += StepInc * VoxelFaceStepT;
		VoxelCoord += StepInc * VoxelStep;


		// Next clipmap if we are out of bounds
		if (any(VoxelCoord < 0) || any((uint3)VoxelCoord >= VoxelLightingGridResolution))
		{
			++VoxelClipmapIndex;

			// #lumen_todo: it should just go back to the last face of the higher climap level
			float3 SamplePosition = RayOrigin + (RayTime - 2.0f * ClipmapVoxelSizeAndRadius[VoxelClipmapIndex].w) * RayDirection;

			VoxelSize = ClipmapVoxelSizeAndRadius[VoxelClipmapIndex].x;
			ClipmapMin = ClipmapWorldCenter[VoxelClipmapIndex].xyz - ClipmapWorldExtent[VoxelClipmapIndex].xyz;
			ClipmapMax = ClipmapWorldCenter[VoxelClipmapIndex].xyz + ClipmapWorldExtent[VoxelClipmapIndex].xyz;
			VoxelCoord = VoxelLightingGridResolution * (SamplePosition - ClipmapMin) / (ClipmapMax - ClipmapMin);

			VoxelMin = (VoxelCoord + 0.0f) * VoxelSize + ClipmapMin;
			VoxelMax = (VoxelCoord + 1.0f) * VoxelSize + ClipmapMin;
			MaxNegT = (VoxelMin - RayOrigin) / RayDirection;
			MaxPosT = (VoxelMax - RayOrigin) / RayDirection;
			NextVoxelFaceT = (RayDirection < 0) ? MaxNegT : MaxPosT;
			VoxelFaceStepT = abs(VoxelSize / RayDirection);
		}

		++StepIndex;
	}

	FConeTraceResult TraceResult = (FConeTraceResult)0;
	TraceResult.Lighting = LightingAndAlpha.xyz;
	TraceResult.Transparency = LightingAndAlpha.w;

	EvaluateSkyRadianceForCone(RayDirection, .01f, TraceResult);

	TraceResult.Lighting *= View.PreExposure;

	RWSceneColor[PixelPos] = float4(TraceResult.Lighting, 1.0f);
}


Buffer<float4> VisualizeTracesData;

struct FVisualizeTracesVertexOutput
{
	float3 TraceLighting : TEXCOORD0;	
};

void VisualizeTracesVS(
	uint VertexIndex : SV_VertexID,
	out FVisualizeTracesVertexOutput Output,
	out float4 OutPosition : SV_POSITION
	)
{
	uint TraceIndex = VertexIndex / 2;
	float3 WorldPosition = VisualizeTracesData[TraceIndex * VISUALIZE_TRACE_DATA_STRIDE + 0].xyz;

	if (VertexIndex & 1)
	{
		WorldPosition += VisualizeTracesData[TraceIndex * VISUALIZE_TRACE_DATA_STRIDE + 1].xyz;
	}

	OutPosition = mul(float4(WorldPosition, 1), LWCHackToFloat(PrimaryView.WorldToClip));
	Output.TraceLighting = VisualizeTracesData[TraceIndex * VISUALIZE_TRACE_DATA_STRIDE + 2].xyz;
} 

void VisualizeTracesPS(
	FVisualizeTracesVertexOutput Input,
	in float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	OutColor = float4(Input.TraceLighting, 0);
}