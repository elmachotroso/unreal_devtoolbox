// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once


//------------------------------------------------------- DEFINES

/** Different permutation for probe tracing optmisation */
	#define MULTIPLE_PROBE_PER_WAVE 0
	#define SINGLE_PROBE_PER_WAVE 1


/** Different ray interleaving offered. */
	#define PROBE_TRACING_INTERLEAVING 0

// Number of ray done on each X and Y axes of the probe's IBL
#define PROBE_TRACING_GROUP_SIZE 8
#define PROBE_TRACING_GROUP_SIZE_LOG2 3

// Size of a wave for tracing probes.
#define PROBE_TRACING_LANE_COUNT (PROBE_TRACING_GROUP_SIZE * PROBE_TRACING_GROUP_SIZE)


//------------------------------------------------------- INCLUDES

#include "LumenCubemapProbeHierarchy.ush"

//------------------------------------------------------- PARAMETERS

globallycoherent RWTexture2D<float3> ProbeAtlasColorOutput;
globallycoherent RWTexture2D<uint> ProbeAtlasSampleMaskOutput;


//------------------------------------------------------- LDS

#if COMPUTESHADER
groupshared float4 SharedTraceLighting[8 * 8];
groupshared uint SharedTraceSampleMask[8 * 8];
#endif

//------------------------------------------------------- FUNCTIONS

void SetupDispatchParameters(const uint InterleavingConfig, uint HierarchyLevelId, RWBuffer<uint> DispatchParametersOutput)
{
	const uint FaceCount = 6;

	FHierarchyLevelParameters HierarchyLevel = GetProbeHierarchyLevelParameters(HierarchyLevelId);

	const uint RayCountPerFace = HierarchyLevel.SuperSampling * HierarchyLevel.SuperSampling * HierarchyLevel.Resolution * HierarchyLevel.Resolution;

	const uint ProbePerWave = max(1u, PROBE_TRACING_LANE_COUNT / RayCountPerFace);
	const uint WavePerFace = max(1u, RayCountPerFace / PROBE_TRACING_LANE_COUNT);

	if (InterleavingConfig == PROBE_TRACING_INTERLEAVING)
	{
		DispatchParametersOutput[3 * HierarchyLevel.Id + 0] = WavePerFace;
		DispatchParametersOutput[3 * HierarchyLevel.Id + 1] = (HierarchyLevel.ProbeCount + (ProbePerWave - 1)) / ProbePerWave;
		DispatchParametersOutput[3 * HierarchyLevel.Id + 2] = FaceCount;
	}
}


struct FProbeTracingCtx
{
	uint GroupThreadIndex;

	bool bIsFirstTracingPass;
	bool bEarlyReturn;
	bool bTraceRay;
	
	FHierarchyLevelParameters HierarchyLevel;

	uint ProbeIndex;
	FProbeInfo ProbeInfo;

	uint FaceIndex;
	uint2 FaceTexelIndex;
	uint PixelRayId;

	float3 WorldDirection;
	float Weight;

	uint2 FacePixelIndex;
	uint2 AtlasCoord;

	uint PixelSampleMask;
};

void InitProbeTracingContext(out FProbeTracingCtx Ctx, const uint InterleavingConfig, uint3 GroupId, uint GroupThreadIndex, const bool bIsFirstTracingPass)
{
	Ctx.GroupThreadIndex = GroupThreadIndex;
	Ctx.bIsFirstTracingPass = bIsFirstTracingPass;
	Ctx.HierarchyLevel = GetPassProbeHierarchyLevelParameters();
	Ctx.bEarlyReturn = false;

	#if DIM_TRACING_PERMUTATION == MULTIPLE_PROBE_PER_WAVE
	{
		Ctx.FaceIndex = GroupId.z;
		Ctx.ProbeIndex = Ctx.HierarchyLevel.ProbeArrayOffset + GroupId.y * 4 + GroupThreadIndex / (LevelResolution * LevelResolution);
		Ctx.FaceTexelIndex = uint2(GroupThreadIndex, GroupThreadIndex / LevelResolution) % LevelResolution;
		
		Ctx.bEarlyReturn = Ctx.ProbeIndex >= (Ctx.HierarchyLevel.ProbeArrayOffset + Ctx.HierarchyLevel.ProbeCount);
	}
	#elif DIM_TRACING_PERMUTATION == SINGLE_PROBE_PER_WAVE
	{
		Ctx.FaceIndex = GroupId.z;
		Ctx.ProbeIndex = Ctx.HierarchyLevel.ProbeArrayOffset + GroupId.y;
		Ctx.FaceTexelIndex = (
			PROBE_TRACING_GROUP_SIZE * ZOrder2D(GroupId.x, /* SizeLog2 = */ 8) +
			uint2(GroupThreadIndex % PROBE_TRACING_GROUP_SIZE, GroupThreadIndex / PROBE_TRACING_GROUP_SIZE));
	}
	#else
		#error Unimplemented.
	#endif

	Ctx.PixelRayId = dot(Ctx.FaceTexelIndex % Ctx.HierarchyLevel.SuperSampling, uint2(1, Ctx.HierarchyLevel.SuperSampling));
	Ctx.FacePixelIndex = Ctx.FaceTexelIndex / Ctx.HierarchyLevel.SuperSampling;

	Ctx.AtlasCoord = FacePixelIndexToIndirectLightingAtlasCoord(Ctx.HierarchyLevel, Ctx.ProbeIndex, Ctx.FaceIndex, Ctx.FacePixelIndex);
	
	Ctx.ProbeInfo = ReadProbeInfo(Ctx.ProbeIndex);

	if (bIsFirstTracingPass)
	{
		Ctx.PixelSampleMask = 0x0;
	}
	else
	{
		Ctx.PixelSampleMask = ProbeAtlasSampleMaskOutput[Ctx.AtlasCoord];
	}

	bool bIsAlreadyFullyTraced = (Ctx.PixelSampleMask & (0x2u << (2 * Ctx.PixelRayId))) != 0;

	Ctx.bTraceRay = !bIsAlreadyFullyTraced;

	// Do not trace the ray if there is no need to.
	{
		uint2 DirectionMaskTexelCoord = Ctx.FacePixelIndex / (Ctx.HierarchyLevel.Resolution / PROBE_MASK_RESOLUTION);

		uint DirectionMaskBitId = (Ctx.FaceIndex * (PROBE_MASK_RESOLUTION * PROBE_MASK_RESOLUTION) + dot(DirectionMaskTexelCoord, uint2(1, PROBE_MASK_RESOLUTION)));

		Ctx.bTraceRay = Ctx.bTraceRay && ((Ctx.ProbeInfo.DirectionMask & (0x1u << DirectionMaskBitId)) != 0);
	}

	// Compute the direction of the ray.
	{
		uint2 RandomSeed = GetProbeRandomSeed(Ctx.ProbeInfo, Ctx.HierarchyLevel.Id);
		float2 E = Hammersley16(/* RayIndex = */ 0, /* NumRays = */ 1, RandomSeed);

		uint ProbeResolution = LevelSuperSampling * LevelResolution;

		ComputeTexelDirection(Ctx.FaceTexelIndex, Ctx.FaceIndex, ProbeResolution, E, /* out */ Ctx.WorldDirection, /* out */ Ctx.Weight);
	}
}

void GetProbeTracingRange(FProbeInfo ProbeInfo, uint HierarchyLevel, out float TMin, out float TMax)
{
	TMin = GetProbeTMin(ProbeInfo);
	TMax = ProbeInfo.WorldTMax;

	FLATTEN
	if ((HierarchyLevel + 1) == HierarchyDepth)
	{
		TMax = INFINITE_FLOAT;
	}
}

void GetProbeTracingRange(FProbeTracingCtx Ctx, out float TMin, out float TMax)
{
	GetProbeTracingRange(Ctx.ProbeInfo, Ctx.HierarchyLevel.Id, TMin, TMax);
}

void OutputProbeRays(FProbeTracingCtx Ctx, float3 RayLighting, bool bFullyTraced, bool bHit)
{
	float3 Lighting = RayLighting;
	uint SampleMask = ((bHit ? 0x1u : 0x0u) | (bFullyTraced ? 0x2u : 0x0u)) << (2 * Ctx.PixelRayId);

	#if DIM_TRACING_PERMUTATION != MULTIPLE_PROBE_PER_WAVE
	BRANCH
	if (Ctx.HierarchyLevel.SuperSampling > 1)
	{
		uint GroupThreadIndex = Ctx.GroupThreadIndex;

		float4 WeightedLighting = float4(Lighting * Ctx.Weight, Ctx.Weight);

		LOOP
		for (uint Reduce = 1; Reduce < Ctx.HierarchyLevel.SuperSampling; Reduce *= 2)
		{
			const uint MaskX = 0x1 * Reduce;
			const uint MaskY = (0x1 * PROBE_TRACING_GROUP_SIZE) * Reduce;

			SharedTraceLighting[GroupThreadIndex] = WeightedLighting;
			SharedTraceSampleMask[GroupThreadIndex] = SampleMask;

			GroupMemoryBarrierWithGroupSync();

			WeightedLighting += SharedTraceLighting[GroupThreadIndex ^ MaskX];
			WeightedLighting += SharedTraceLighting[GroupThreadIndex ^ MaskY];
			WeightedLighting += SharedTraceLighting[GroupThreadIndex ^ (MaskX | MaskY)];

			SampleMask |= SharedTraceSampleMask[GroupThreadIndex ^ MaskX];
			SampleMask |= SharedTraceSampleMask[GroupThreadIndex ^ MaskY];
			SampleMask |= SharedTraceSampleMask[GroupThreadIndex ^ (MaskX | MaskY)];

			GroupMemoryBarrierWithGroupSync();
		}

		Lighting = WeightedLighting.rgb * rcp(WeightedLighting.a);
	}
	#endif

	#if 0
	{
		float WorldDistance = Ctx.ProbeInfo.WorldRadius;

		float TheoricPixelDistance = PROBE_HIERARCHY_MIN_PIXEL_RADIUS << Ctx.HierarchyLevel.Id;
		float PixelDistance = ProjectWorldDistanceToPixelDistance(Ctx.ProbeInfo, WorldDistance);

		Lighting = float3(PixelDistance / TheoricPixelDistance, 0, 0);
	}
	#endif

	if (all(Ctx.FacePixelIndex * Ctx.HierarchyLevel.SuperSampling == Ctx.FaceTexelIndex))
	{
		float3 PrevLighting = 0;
		if (!Ctx.bIsFirstTracingPass)
		{
			PrevLighting = ProbeAtlasColorOutput[Ctx.AtlasCoord];
		}

		ProbeAtlasColorOutput[Ctx.AtlasCoord] = PrevLighting + Lighting;
		ProbeAtlasSampleMaskOutput[Ctx.AtlasCoord] = Ctx.PixelSampleMask | SampleMask;
	}
}
