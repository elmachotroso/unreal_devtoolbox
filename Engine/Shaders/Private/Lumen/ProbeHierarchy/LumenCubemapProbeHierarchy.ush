// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once


//------------------------------------------------------- INCLUDES

#include "LumenProbeHierarchy.ush"
#include "../../ScreenSpaceDenoise/DenoisingCommon.ush"
#include "../../ShadingModelsSampling.ush"
#include "../../Random.ush"


//------------------------------------------------------- ENUMS

/** Tile classification of the probe occlusion */
	// All pixels are unlit.
	#define PROBE_OCCLUSION_UNLIT 0

	// All pixels are lit.
	#define PROBE_OCCLUSION_LIT 1

	// All pixels are simple shading, can compute specular from diffuse
	#define PROBE_OCCLUSION_SIMPLE_SHADING 2

	// All pixels are simple shading, but some pixel some extra rays for specular.
	#define PROBE_OCCLUSION_SIMPLE_SHADING_EXTRA_SPECULAR 3

	// All pixels are simple shading, can compute specular from diffuse, but some have bent normal.
	#define PROBE_OCCLUSION_SIMPLE_SHADING_BENT_NORMAL 4

	// There is some pretty complex shading for some pixels
	#define PROBE_OCCLUSION_COMPLEX_SHADING_BENT_NORMAL 5

	#define PROBE_OCCLUSION_MAX 6

/** Size of a tile in pixel for probe occlusion */
#define TRACING_CLASSIFICATION_TILE_SIZE 8

/** Size in pixel of border. */
#define PROBE_IBL_BORDER_SIZE 1


//------------------------------------------------------- PARAMETERS

float AdditionalSpecularRayThreshold;


//------------------------------------------------------- FUNCTIONS

/*
 * MajorAxis | Face's U  | Face's V
 *       X+  |  Y+       |  Z+
 *       X-  |  Y+       |  Z+
 *       Y+  |  X+       |  Z+
 *       Y-  |  X+       |  Z+
 *       Z+  |  X+       |  Y+
 *       Z-  |  X+       |  Y+
 */

/**
 * Returns the axis and direction of a face.
 *
 * X+: OutAxisId=0 bOutNegative=0
 * X-: OutAxisId=0 bOutNegative=1
 * Y+: OutAxisId=1 bOutNegative=0
 * Y-: OutAxisId=1 bOutNegative=1
 * Z+: OutAxisId=2 bOutNegative=0
 * Z-: OutAxisId=2 bOutNegative=1
 */
uint FaceIndexToAxisId(uint FaceIndex)
{
	return FaceIndex / 2;
}

uint IsFaceIndexNegativeAxis(uint FaceIndex)
{
	return (FaceIndex & 0x1) != 0;
}

uint AxisInfoToFaceIndex(uint AxisId, bool bNegative)
{
	return (2 * AxisId) | (bNegative ? 1 : 0);
}

void GetEdgeNeighbor(uint AxisId, bool bNegativeAxis, bool2 EdgeId, out uint OutAxisId, out bool bOutNegativeAxis, out bool2 OutEdgeId)
{
	bool bVEdge = EdgeId.x;
	bool bHighEdge = EdgeId.y;
	
	const uint LUTVEdge        = 0x0000ccff;
	const uint LUTHighEdge     = 0x000f0f0f;
	const uint LUTNegativeAxis = 0x00555555;
	const uint LUTAxisIdBit0   = 0x003300cc;
	const uint LUTAxisIdBit1   = 0x00003333;

	uint LUTIndex = (AxisInfoToFaceIndex(AxisId, bNegativeAxis) * 4) | (bVEdge ? 0x2 : 0x0) | (bHighEdge ? 0x1 : 0x0);
	uint LUTMask = 1u << LUTIndex;

	OutAxisId        = ((LUTAxisIdBit0   & LUTMask) ? 0x1 : 0x0) | ((LUTAxisIdBit1 & LUTMask) ? 0x2 : 0x0);
	bOutNegativeAxis =  (LUTNegativeAxis & LUTMask) != 0;
	OutEdgeId.x      =  (LUTVEdge        & LUTMask) != 0;
	OutEdgeId.y      =  (LUTHighEdge     & LUTMask) != 0;
}


uint2 ComputeProbeAtlasCoord(FHierarchyLevelParameters HierarchyLevel, uint ProbeIndex, uint MipLevel = 0)
{
	uint ResolutionMultiplier = HierarchyLevel.Resolution / PROBE_HIERARCHY_RESOLUTION;

	// Compute probe index relatively to the level.
	uint LevelRelativeProbeIndex = ProbeIndex - HierarchyLevel.ProbeArrayOffset + MipLevel * HierarchyLevel.ProbeCount;

	// Compute probe index in the atlas that had the smallest
	uint LowestResProbeIndex = LevelRelativeProbeIndex * ResolutionMultiplier * ResolutionMultiplier + HierarchyLevel.ProbeAtlasOffset;

	uint ListIndex = LowestResProbeIndex / (PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE * PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE);

	uint2 ProbeCoord = (
		ZOrder2D(LowestResProbeIndex, log2(PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE)) +
		uint2(ListIndex & ProbeIndexAbscissMask, ListIndex >> ProbeIndexOrdinateShift) * PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE);

	return ProbeCoord;
}

uint2 ComputeProbeAtlasFaceOffset(uint FaceIndex)
{
	return uint2(FaceIndex % 2, FaceIndex / 2);
}

uint2 FacePixelIndexToIndirectLightingAtlasCoord(FHierarchyLevelParameters HierarchyLevel, uint ProbeIndex, uint FaceIndex, uint2 FacePixelIndex)
{
	uint2 ProbeCoord = ComputeProbeAtlasCoord(HierarchyLevel, ProbeIndex);
	uint2 FaceOffset = ComputeProbeAtlasFaceOffset(FaceIndex);
	
	return ProbeCoord * (uint2(2, 3) * PROBE_HIERARCHY_RESOLUTION) + FaceOffset * HierarchyLevel.Resolution + FacePixelIndex;
}

void ComputeTexelDirection(uint2 FaceTexelIndex, uint FaceIndex, uint ProbeResolution, float2 E, out float3 L, out float Weight)
{
	L.xy = (float2(FaceTexelIndex) + E) * rcp(0.5 * ProbeResolution) - 1.0f;
	L.z = (FaceIndex & 1) ? -1.0 : 1.0;

	/** Alpha.x = angle(float3(L.x, 0, 1), float3(0, 0, 1))
	 *
	 * cos(Alpha.x) = 1 / length(V) = 1 / sqrt(1 + L.x^2)
	 * cos(Alpha.x)^2 = 1 / length2(V) = 1 / (1 + V.x^2)
	 */
	float2 CosAlpha2 = rcp(1 + L.xy * L.xy);

	L = normalize(L);

	uint Axis = FaceIndex >> 1;
	L = Axis == 0 ? L.zxy : L;
	L = Axis == 1 ? L.xzy : L;

	Weight = CosAlpha2.x * CosAlpha2.y;
	//Weight = 1.0;
}

void GetProbeFaceUV(float3 L, out uint FaceIndex, out float2 FaceUV)
{
	uint Axis = 2;
	if (abs(L.x) >= abs(L.y) && abs(L.x) >= abs(L.z))
	{
		Axis = 0;
	}
	else if (abs(L.y) > abs(L.z))
	{
		Axis = 1;
	}
	FaceIndex = Axis * 2;

	L = Axis == 0 ? L.yzx : L;
	L = Axis == 1 ? L.xzy : L;

	FaceIndex += L.z > 0 ? 0 : 1;

	// One single v_rcp_f32 with abs() modifier on GCN.
	L.xy *= rcp(abs(L.z));

	FaceUV = L.xy * .5f + .5f;
}

void GetProbeFacePixelIndex(float3 L, out uint FaceIndex, out uint2 FacePixelIndex)
{
	float2 FaceUV;
	GetProbeFaceUV(L, FaceIndex, FaceUV);

	FacePixelIndex = uint2(floor(FaceUV * PROBE_HIERARCHY_RESOLUTION));
}

float3 ComputeSpecularIndirectResolveDirection(float3 V, float3 N, float a2, uint2 ResolveRandomSeed, uint PixelRayIndex, uint SamplePerPixel)
{
	float3x3 TangentBasis = GetTangentBasis(N);
	float3 TangentV = mul(TangentBasis, V);

	float2 E = Hammersley16(PixelRayIndex, SamplePerPixel, ResolveRandomSeed);
			
	float3 H = mul(ImportanceSampleVisibleGGX(UniformSampleDiskConcentric(E), a2, TangentV).xyz, TangentBasis);
	float3 L = 2 * dot(V, H) * H - V;

	return L;
}

bool RequiresAdditionalSpecularRay(float Roughness, uint ShadingModelID)
{
	return Roughness < AdditionalSpecularRayThreshold && ShadingModelID != SHADINGMODELID_UNLIT && ShadingModelID != SHADINGMODELID_HAIR;
}

// Re-weight diffuse ray which was sampled with a cos distribution.
float ComputeSpecularRayFromDiffuseRayWeight(float3 N, float3 V, float3 L, float Roughness)
{
	float3 DiffuseColor = float3(0, 1, 0);
	float3 SpecularColor = float3(0, 1, 0);

	float a2 = Pow4(Roughness);
	float3 H = normalize(V + L);

	float NoV = saturate(dot(N, V));
	float NoL = saturate(dot(N, L));
	float NoH = saturate(dot(N, H));
	float VoH = saturate(dot(V, H));

	// CosineSampleHemisphere's PDF
	float DiffuseRayPDF = NoL / PI;

	float D = D_GGX(a2, NoH);
	float G_SmithL = 2 * NoL / (NoL + sqrt(NoL * (NoL - NoL * a2) + a2));
	float Vis = Vis_Smith(a2, NoV, NoL);
	float3 F = F_Schlick(SpecularColor, VoH);

#if 0
	// CosineSampleHemisphere
	// PDF = NoL / PI,
	float Weight = F.g * (D * Vis * PI);
#else
	// #lumen_todo: this also skips NoL (luminance reaching the surface). This is incorrect as NoL factor is applied as a part of EnvBRDF
	// split-sum approximation. Unfortunately, we can't handle it here as it would increase variance too much and it should be 
	// properly handled after D*cos integral is computed.
	//return 1.0;
	//float Weight = saturate(D * (NoL / PI) / DiffuseRayPDF);
	float Weight = saturate(D);
#endif

	//Weight = -min(-Weight, 0.0);
	//Weight = saturate(Weight);

	return Weight;
}

// Bias the important sampling of SampleBxDF(SHADING_TERM_SPECULAR, ....)
float4 BiasBSDFImportantSample(float4 E)
{
	float Bias = 1.0 - 0.1;

	E.y = (E.y - 0.5) * Bias + 0.5;

	return E;
}

// Compute cone angle base on the number of samples and PDF.
float RayPDFToConeAngle(float RayPDF, float TotalSamples)
{
	float SolidAngleSample = 1.0 / (TotalSamples * RayPDF);

	float ConeAngleWorld = acos(1.0 - SolidAngleSample * rcp(2.0 * PI));

	return ConeAngleWorld;
}

// Sample the probe hierarchy's IBL.
float3 SampleProbeHierarchy(
	Texture2D ProbeAtlas,
	float2 ProbeAtlasPixelSize,
	FHierarchyLevelParameters HierarchyLevel,
	uint FullResSampleMask,
	uint PixelRayIndex,
	uint ProbeIndex,
	float3 L,
	uint MipLevel)
{
	uint FaceIndex;
	float2 FaceUV;
	GetProbeFaceUV(L, FaceIndex, FaceUV);

	#if 0
	{
		if (MipLevel == 0)
			FaceUV = (FaceUV - 0.5) * 1.5 + 0.5;
		else
			FaceUV = (FaceUV - 0.5) * 2 + 0.5;
	}
	#endif

	float2 FacePixelIndex = float(PROBE_IBL_BORDER_SIZE) + FaceUV * (HierarchyLevel.Resolution >> MipLevel);

	uint2 ProbeCoord = ComputeProbeAtlasCoord(HierarchyLevel, ProbeIndex, MipLevel);

	uint HighestFaceResolution = 2 * PROBE_IBL_BORDER_SIZE + HierarchyLevel.Resolution;
	uint FaceResolution = 2 * PROBE_IBL_BORDER_SIZE + (HierarchyLevel.Resolution >> MipLevel);

	float2 ProbeUVOffset = float2(ProbeCoord * uint2(2, 3) * HighestFaceResolution) * ProbeAtlasPixelSize;
	float2 FaceUVOffset = float2(ComputeProbeAtlasFaceOffset(FaceIndex) * FaceResolution) * ProbeAtlasPixelSize;

	float2 AtlasUV = ProbeUVOffset + FaceUVOffset + FacePixelIndex * ProbeAtlasPixelSize;
	float3 ProbeLighting = ProbeAtlas.SampleLevel(GlobalBilinearClampedSampler, AtlasUV, 0).rgb;

	#if 0
	{
		ProbeLighting = ProbeAtlas.SampleLevel(GlobalPointClampedSampler, AtlasUV, 0).rgb;
	}
	#endif

	bool bAlreadySampled = (FullResSampleMask & (0x1u << (2 * PixelRayIndex))) != 0;

	return bAlreadySampled ? float3(0, 0, 0) : ProbeLighting;
}
