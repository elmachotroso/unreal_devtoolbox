// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "LumenCubemapProbeHierarchy.ush"
#include "../../SceneTextureParameters.ush"
#include "../../DeferredShadingCommon.ush"
#include "../../MonteCarlo.ush"
#include "../../Random.ush"


#define DEBUG_NEAREST_PROBE 0

#define SAMPLE_BATCH_SIZE 4


//------------------------------------------------------- PARAMETERS

float InvSampleCountPerCubemapTexel;

StructuredBuffer<FParentProbeInfo> ProbeParentList;

Texture2D<float3> ProbeAtlasColor;
Texture2D<uint> ProbeAtlasSampleMask;

Texture2D<float3> ParentProbeAtlasColor;

RWTexture2D<float3> ProbeAtlasColorMipOutput_0;
RWTexture2D<float3> ProbeAtlasColorMipOutput_1;


//------------------------------------------------------- ENTRY POINT


#ifdef SETUP_PASS

DECLARE_SCALAR_ARRAY(uint, GroupPerProbesArray, PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH);

RWBuffer<uint> DispatchParametersOutput;

[numthreads(PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH, 1, 1)]
void MainCS(uint GroupThreadIndex : SV_GroupIndex)
{
	if (GroupThreadIndex < PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH)
	{
		uint HierarchyLevelId = GroupThreadIndex;

		uint ProbeCount = GetProbeHierarchyLevelParameters(HierarchyLevelId).ProbeCount;

		DispatchParametersOutput[3 * HierarchyLevelId + 0] = GET_SCALAR_ARRAY_ELEMENT(GroupPerProbesArray, HierarchyLevelId);
		DispatchParametersOutput[3 * HierarchyLevelId + 1] = ProbeCount;
		DispatchParametersOutput[3 * HierarchyLevelId + 2] = 1;
	}
}

#else


groupshared float4 SharedLighting[PROBE_HIERARCHY_RESOLUTION * PROBE_HIERARCHY_RESOLUTION * 6];


uint ComputeLDSIndex(uint FaceIndex, uint2 FacePixelIndex, uint MipLevel)
{
	return FaceIndex * (uint(PROBE_HIERARCHY_RESOLUTION * PROBE_HIERARCHY_RESOLUTION) >> (2 * MipLevel)) + dot(FacePixelIndex, uint2(1, uint(PROBE_HIERARCHY_RESOLUTION) >> MipLevel));
}


[numthreads(PROBE_HIERARCHY_RESOLUTION, PROBE_HIERARCHY_RESOLUTION, 6)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	FHierarchyLevelParameters HierarchyLevel = GetPassProbeHierarchyLevelParameters();
	FHierarchyLevelParameters ParentHierarchyLevel = GetProbeHierarchyLevelParameters(HierarchyLevel.Id + 1);

	uint FaceLaneIndex = GroupThreadIndex % (PROBE_HIERARCHY_RESOLUTION * PROBE_HIERARCHY_RESOLUTION);
	uint FaceIndex = GroupThreadIndex / (PROBE_HIERARCHY_RESOLUTION * PROBE_HIERARCHY_RESOLUTION);

	uint2 FacePixelIndex = (
		uint2(FaceLaneIndex, FaceLaneIndex / PROBE_HIERARCHY_RESOLUTION) % PROBE_HIERARCHY_RESOLUTION +
		ZOrder2D(GroupId.x, uint(log2(PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE))) * PROBE_HIERARCHY_RESOLUTION);

	uint FaceAxisId = FaceIndexToAxisId(FaceIndex);
	bool FaceNegativeAxis = IsFaceIndexNegativeAxis(FaceIndex);

	uint ProbeIndex = HierarchyLevel.ProbeArrayOffset + GroupId.y;
	FProbeInfo ProbeInfo = ReadProbeInfo(ProbeIndex);

	FParentProbeInfo ParentProbeList = ProbeParentList[ProbeIndex];

	uint2 AtlasCoord = FacePixelIndexToIndirectLightingAtlasCoord(HierarchyLevel, ProbeIndex, FaceIndex, FacePixelIndex);

	uint SampleMask = ProbeAtlasSampleMask.Load(int3(AtlasCoord, 0));
	float3 LightingMip0 = ProbeAtlasColor[AtlasCoord];

	#if 0 // Uncomment me to look at specific probe.
	{
		bool bParentProbeOnly = false;
		bool bCurrentProbeOnly = false;
		bool bCurrentProbeOpacityOnly = false;

		if (LevelId == 0)
		{
			bParentProbeOnly = true;
			//bCurrentProbeOnly = true;
			//bCurrentProbeOpacityOnly = true;
		}
		else if (LevelId == 1)
		{
			bParentProbeOnly = true;
			//bCurrentProbeOnly = true;
			//bCurrentProbeOpacityOnly = true;
		}
		else if (LevelId == 2)
		{
			//bParentProbeOnly = true;
			//bCurrentProbeOnly = true;
			//bCurrentProbeOpacityOnly = true;
		}
		else if (LevelId == 3)
		{
			//bParentProbeOnly = true;
			//bCurrentProbeOnly = true;
			//bCurrentProbeOpacityOnly = true;
		}

		if (bParentProbeOnly)
		{
			SampleMask = 0;
			LightingMip0 = 0;
		}
		else if (bCurrentProbeOnly)
		{
			SampleMask = ~0;
		}
		else if (bCurrentProbeOpacityOnly)
		{
			LightingMip0 = saturate(float(countbits(SampleMask & 0x55555555)) * rcp(16.0));
			SampleMask = ~0;
		}
	}
	#endif

	bool bFailed = false;

	{
		// Mask out bFullyTraced, only want the bHit.
		SampleMask &= 0x55555555;

		const uint DownsampleKernelSize = DIM_DOWNSAMPLE ? 2 : 1;

		UNROLL
		for (uint SampleId = 0; SampleId < DownsampleKernelSize * DownsampleKernelSize; SampleId++)
		{
			const uint2 Offset = uint2(SampleId % DownsampleKernelSize, SampleId / DownsampleKernelSize);

			uint2 InputFacePixelIndex = FacePixelIndex * DownsampleKernelSize + Offset;

			float Translucency;
			#if DIM_DOWNSAMPLE && 1
			{
				const uint SubSampleMask = HierarchyLevel.SuperSampling == 4 ? (0x00050005u << (4 * SampleId)) : (0x00000101u << (2u * SampleId));

				float Multiplier = rcp(float(DownsampleKernelSize * DownsampleKernelSize));

				Translucency = Multiplier * saturate(1.0 - float(countbits(SampleMask & SubSampleMask)) * (DownsampleKernelSize * DownsampleKernelSize) * InvSampleCountPerCubemapTexel);
			}
			#else
			{
				float Multiplier = rcp(float(DownsampleKernelSize * DownsampleKernelSize));

				Translucency = Multiplier * saturate(1.0 - float(countbits(SampleMask)) * InvSampleCountPerCubemapTexel);
			}
			#endif

			UNROLL_N(PROBE_PARENT_COUNT)
			for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
			{
				uint2 ParentAtlasCoord = FacePixelIndexToIndirectLightingAtlasCoord(
					ParentHierarchyLevel,
					ParentProbeList.ProbeIndex[ParentId], FaceIndex, InputFacePixelIndex);

				float3 ParentLighting = ParentProbeAtlasColor[ParentAtlasCoord];

				FLATTEN
				if (ParentProbeList.ProbeIndex[ParentId] != PROBE_INVALID_INDEX)
					LightingMip0 += (Translucency * ParentProbeList.Weight[ParentId]) * ParentLighting;
				else
					bFailed = true;
			}
		}
	}

	//if (bFailed)
	//{
	//	//LightingMip0 = float3(1, 0, 0);
	//}

	#if DIM_OUTPUT_FINAL_ATLAS
	{

		uint2 FaceOffset = ComputeProbeAtlasFaceOffset(FaceIndex);

		float3 L;
		float Weight;
		ComputeTexelDirection(FacePixelIndex, FaceIndex, PROBE_HIERARCHY_RESOLUTION, /* E = */ 0.5, /* out */ L, /* out */ Weight);

		//LightingMip0 = float3(FacePixelIndex * 0.25, 0);
		//LightingMip0 = float3(FaceIndex * rcp(6.0), 0, 0);
		SharedLighting[GroupThreadIndex] = float4(LightingMip0, Weight);

		GroupMemoryBarrierWithGroupSync();

		// Output mip 0
		{
			const uint MipLevel = 0;

			uint InputCubemapRes = PROBE_HIERARCHY_RESOLUTION;

			uint2 ProbeAtlasCoord = ComputeProbeAtlasCoord(HierarchyLevel, ProbeIndex, MipLevel);

			uint FaceResolution = 2 * PROBE_IBL_BORDER_SIZE + InputCubemapRes;

			uint2 FaceAtlasTexelOffset = (ProbeAtlasCoord * uint2(2, 3) + FaceOffset) * FaceResolution;

			// Output center texel of the face.
			{
				uint2 AtlasCoord = FaceAtlasTexelOffset + FacePixelIndex + PROBE_IBL_BORDER_SIZE;

				//LightingMip0 = float3(FacePixelIndex * 0.25, 0);
				//LightingMip0 = float3(FaceAxisId * rcp(3), 0, 0);
				//LightingMip0 = float3(FaceIndex * rcp(6), 0, 0);

				ProbeAtlasColorMipOutput_0[AtlasCoord] = LightingMip0;
			}

			bool2 DestEdgeId;
			DestEdgeId.x = ((FaceLaneIndex / (2 * InputCubemapRes)) % 2) != 0;
			DestEdgeId.y = ((FaceLaneIndex / (1 * InputCubemapRes)) % 2) != 0;

			uint EdgeTexelId = FaceLaneIndex % InputCubemapRes;

			// Output edge of the face
			float3 NeighborColor0;
			{
				// Read neigbor color from LDS.
				{
					uint SrcAxisId;
					bool SrcNegativeAxis;
					bool2 SrcEdgeId;
					GetEdgeNeighbor(FaceAxisId, FaceNegativeAxis, DestEdgeId, /* out */ SrcAxisId, /* out */ SrcNegativeAxis, /* out */ SrcEdgeId);

					uint2 SrcTexelId = uint2(EdgeTexelId, SrcEdgeId.y ? (InputCubemapRes - 1) : 0);
					FLATTEN
					if (SrcEdgeId.x)
					{
						SrcTexelId.xy = SrcTexelId.yx;
					}

					NeighborColor0 = SharedLighting[ComputeLDSIndex(AxisInfoToFaceIndex(SrcAxisId, SrcNegativeAxis), SrcTexelId, MipLevel)].rgb;

					//NeighborColor0 = float3(SrcTexelId * 0.25, 0);
					//NeighborColor0 = float3(SrcAxisId * rcp(3), 0, 0);
					//NeighborColor0 = float3(AxisInfoToFaceIndex(SrcAxisId, SrcNegativeAxis) * rcp(6), 0, 0);
					//NeighborColor0 = float3(1, 0, 0);
				}

				// Output neighbor.
				{
					uint2 DestTexelCoord = uint2(PROBE_IBL_BORDER_SIZE + EdgeTexelId, DestEdgeId.y ? (InputCubemapRes + PROBE_IBL_BORDER_SIZE) : 0);
					FLATTEN
					if (DestEdgeId.x)
					{
						DestTexelCoord.xy = DestTexelCoord.yx;
					}
					uint2 FaceTexelCoord = FaceAtlasTexelOffset + DestTexelCoord;

					ProbeAtlasColorMipOutput_0[FaceTexelCoord] = NeighborColor0;
					//ProbeAtlasColorMipOutput_0[FaceTexelCoord] = float3(0, 0, 1);
				}
			}

			// Output corners of the face.
			if (!DestEdgeId.x && (EdgeTexelId == 0 || EdgeTexelId == (InputCubemapRes - 1)))
			{
				// Read second neighbors.
				float3 NeighborColor1;
				{
					uint SrcAxisId;
					bool SrcNegativeAxis;
					bool2 SrcEdgeId;
					GetEdgeNeighbor(FaceAxisId, FaceNegativeAxis, bool2(true, EdgeTexelId != 0), /* out */ SrcAxisId, /* out */ SrcNegativeAxis, /* out */ SrcEdgeId);

					uint2 SrcTexelId = uint2(
						DestEdgeId.y ? (InputCubemapRes - 1) : 0,
						SrcEdgeId.y ? (InputCubemapRes - 1) : 0);
					//uint2 SrcTexelId = uint2(EdgeTexelId, SrcEdgeId.y ? (InputCubemapRes - 1) : 0);
					FLATTEN
					if (SrcEdgeId.x)
					{
						SrcTexelId.xy = SrcTexelId.yx;
					}

					NeighborColor1 = SharedLighting[ComputeLDSIndex(AxisInfoToFaceIndex(SrcAxisId, SrcNegativeAxis), SrcTexelId, MipLevel)].rgb;

					//NeighborColor1 = float3(SrcTexelId * 0.25, 0);
				}

				float3 NeighborColor2;
				{
					uint2 SrcTexelId = uint2(
						EdgeTexelId == 0 ? 0 : (InputCubemapRes - 1),
						DestEdgeId.y ? (InputCubemapRes - 1) : 0);

					NeighborColor2 = SharedLighting[ComputeLDSIndex(AxisInfoToFaceIndex(FaceAxisId, FaceNegativeAxis), SrcTexelId, MipLevel)].rgb;
				}

				{
					uint2 DestTexelCoord = uint2(
						EdgeTexelId == 0 ? 0 : (InputCubemapRes + PROBE_IBL_BORDER_SIZE),
						DestEdgeId.y ? (InputCubemapRes + PROBE_IBL_BORDER_SIZE) : 0);

					uint2 FaceTexelCoord = FaceAtlasTexelOffset + DestTexelCoord;

					ProbeAtlasColorMipOutput_0[FaceTexelCoord] = (NeighborColor0 + NeighborColor1 + NeighborColor2) * rcp(3.0);
					//ProbeAtlasColorMipOutput_0[FaceTexelCoord] = LightingMip0;
					//ProbeAtlasColorMipOutput_0[FaceTexelCoord] = NeighborColor0;
					//ProbeAtlasColorMipOutput_0[FaceTexelCoord] = NeighborColor1;
				}
			}
		}

		// Reduce mip 1
		float3 LightingMip1 = LightingMip0;
		{
			float3 L;
			float Weight;
			ComputeTexelDirection(FacePixelIndex, FaceIndex, PROBE_HIERARCHY_RESOLUTION, /* E = */ 0.5, /* out */ L, /* out */ Weight);

			//SharedLighting[GroupThreadIndex] = float4(LightingMip1 * Weight, Weight);
			//
			//GroupMemoryBarrierWithGroupSync();

			LightingMip1 += SharedLighting[GroupThreadIndex ^ 0x1].rgb         * SharedLighting[GroupThreadIndex ^ 0x1].a;
			LightingMip1 += SharedLighting[GroupThreadIndex ^ 0x4].rgb         * SharedLighting[GroupThreadIndex ^ 0x4].a;
			LightingMip1 += SharedLighting[GroupThreadIndex ^ (0x1 | 0x4)].rgb * SharedLighting[GroupThreadIndex ^ (0x1 | 0x4)].a;

			Weight += SharedLighting[GroupThreadIndex ^ 0x1].a;
			Weight += SharedLighting[GroupThreadIndex ^ 0x4].a;
			Weight += SharedLighting[GroupThreadIndex ^ (0x1 | 0x4)].a;

			LightingMip1.rgb *= rcp(Weight);
		}

		GroupMemoryBarrierWithGroupSync();


		//LightingMip1 = float3((FacePixelIndex / 2) * rcp(2), 0);
		//LightingMip1 = float3(FaceIndex * rcp(6), 0, 0);

		if (all((FacePixelIndex % 2) == 0))
		{
			const uint MipLevel = 1;
			SharedLighting[ComputeLDSIndex(FaceIndex, FacePixelIndex / 2, MipLevel)].rgb = LightingMip1;
		}

		GroupMemoryBarrierWithGroupSync();

		// Output mip 1
		{
			const uint MipLevel = 1;

			uint InputCubemapRes = uint(PROBE_HIERARCHY_RESOLUTION) >> MipLevel;

			uint2 ProbeAtlasCoord = ComputeProbeAtlasCoord(HierarchyLevel, ProbeIndex, MipLevel);

			uint HighestFaceResolution = 2 * PROBE_IBL_BORDER_SIZE + HierarchyLevel.Resolution;
			uint FaceResolution = 2 * PROBE_IBL_BORDER_SIZE + InputCubemapRes;

			uint2 FaceAtlasTexelOffset = ProbeAtlasCoord * uint2(2, 3) * HighestFaceResolution + FaceOffset * FaceResolution;

			uint OutputPixelIndex = FaceLaneIndex % (InputCubemapRes * InputCubemapRes);
			uint OutputPixelTypeIndex = FaceLaneIndex / (InputCubemapRes * InputCubemapRes);

			float3 OutputLighting0;
			uint2 DestTexelCoord0;
			{
				uint2 SrcTexelCoord0 = uint2(OutputPixelIndex % InputCubemapRes, OutputPixelIndex / InputCubemapRes);
				OutputLighting0 = SharedLighting[ComputeLDSIndex(FaceIndex, SrcTexelCoord0, MipLevel)].rgb;
				DestTexelCoord0 = SrcTexelCoord0 + PROBE_IBL_BORDER_SIZE;
			}

			float3 OutputLighting1;
			uint2 DestTexelCoord1;
			{
				bool bVEdge = false;
				bool bHighEdge = OutputPixelIndex >= InputCubemapRes;

				uint EdgeTexelId = OutputPixelIndex % InputCubemapRes;
				bool2 DestEdgeId = bool2(bVEdge, bHighEdge);


				uint SrcAxisId;
				bool SrcNegativeAxis;
				bool2 SrcEdgeId;
				GetEdgeNeighbor(FaceAxisId, FaceNegativeAxis, DestEdgeId, /* out */ SrcAxisId, /* out */ SrcNegativeAxis, /* out */ SrcEdgeId);

				uint2 SrcTexelId = uint2(EdgeTexelId, SrcEdgeId.y ? (InputCubemapRes - 1) : 0);
				FLATTEN
				if (SrcEdgeId.x)
				{
					SrcTexelId.xy = SrcTexelId.yx;
				}

				OutputLighting1 = SharedLighting[ComputeLDSIndex(AxisInfoToFaceIndex(SrcAxisId, SrcNegativeAxis), SrcTexelId, MipLevel)].rgb;
				
				DestTexelCoord1 = uint2(PROBE_IBL_BORDER_SIZE + EdgeTexelId, DestEdgeId.y ? (InputCubemapRes + PROBE_IBL_BORDER_SIZE) : 0);
				FLATTEN
				if (DestEdgeId.x)
				{
					DestTexelCoord1.xy = DestTexelCoord1.yx;
				}
			}

			float3 OutputLighting2;
			uint2 DestTexelCoord2;
			{
				bool bVEdge = true;
				bool bHighEdge = (OutputPixelIndex % 2) != 0;

				uint EdgeTexelId = OutputPixelIndex / InputCubemapRes;
				bool2 DestEdgeId = bool2(bVEdge, bHighEdge);


				uint SrcAxisId;
				bool SrcNegativeAxis;
				bool2 SrcEdgeId;
				GetEdgeNeighbor(FaceAxisId, FaceNegativeAxis, DestEdgeId, /* out */ SrcAxisId, /* out */ SrcNegativeAxis, /* out */ SrcEdgeId);

				uint2 SrcTexelId = uint2(EdgeTexelId, SrcEdgeId.y ? (InputCubemapRes - 1) : 0);
				FLATTEN
				if (SrcEdgeId.x)
				{
					SrcTexelId.xy = SrcTexelId.yx;
				}

				OutputLighting2 = SharedLighting[ComputeLDSIndex(AxisInfoToFaceIndex(SrcAxisId, SrcNegativeAxis), SrcTexelId, MipLevel)].rgb;
				
				DestTexelCoord2 = uint2(PROBE_IBL_BORDER_SIZE + EdgeTexelId, DestEdgeId.y ? (InputCubemapRes + PROBE_IBL_BORDER_SIZE) : 0);
				FLATTEN
				if (DestEdgeId.x)
				{
					DestTexelCoord2.xy = DestTexelCoord2.yx;
				}
			}

			float3 OutputLighting3;
			uint2 DestTexelCoord3;
			{
				uint2 SrcTexelCoord0 = uint2(OutputPixelIndex % InputCubemapRes, OutputPixelIndex / InputCubemapRes);
				OutputLighting3 = (OutputLighting0 + OutputLighting1 + OutputLighting2) * rcp(3.0);
				DestTexelCoord3 = SrcTexelCoord0 * (InputCubemapRes + PROBE_IBL_BORDER_SIZE);
			}

			float3 Lighting;
			uint2 DestTexelCoord;
			FLATTEN
			if (OutputPixelTypeIndex == 0)
			{
				Lighting = OutputLighting0;
				DestTexelCoord = DestTexelCoord0;
			}
			else if (OutputPixelTypeIndex == 1)
			{
				Lighting = OutputLighting1;
				DestTexelCoord = DestTexelCoord1;
			}
			else if (OutputPixelTypeIndex == 2)
			{
				Lighting = OutputLighting2;
				DestTexelCoord = DestTexelCoord2;
			}
			else // if (OutputPixelTypeIndex == 3)
			{
				Lighting = OutputLighting3;
				DestTexelCoord = DestTexelCoord3;
			}

			if (OutputPixelTypeIndex < 4)
			{
				uint2 FaceTexelCoord = FaceAtlasTexelOffset + DestTexelCoord;
				ProbeAtlasColorMipOutput_0[FaceTexelCoord] = Lighting;
				//ProbeAtlasColorMipOutput_0[FaceTexelCoord] = float3(FaceIndex * rcp(6), 0, 0); //OutputPixelTypeIndex == 0 ? Lighting : 0.0;
			}

		}
	}
	#else
	{
		ProbeAtlasColorMipOutput_0[AtlasCoord] = LightingMip0;
	}
	#endif
}

#endif
