// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

//------------------------------------------------------- COMPILER CONFIG

// Generate vector truncation warnings to errors.
#pragma warning(error: 3206)


//------------------------------------------------------- CONFIGS

// Length of a border of the cubemap of the Probe in pixels
#define PROBE_HIERARCHY_RESOLUTION 4

// Minimal radius of an Probe in screen space pixel.
#define PROBE_HIERARCHY_MIN_PIXEL_RADIUS 64

// Size of the tile when emitting Probe according to depth buffer
#define PROBE_HIERARCHY_EMIT_TILE_SIZE 16

// Maximum number of Probe that can be emitted by one tile when projecting into depth buffer.
#define PROBE_HIERARCHY_MAX_EMIT_PER_TILE 8

// Maximum number of Probe per tiles.
#define MAX_PROBE_HIERARCHY_PER_TILE 63

// Size in pixel of tile classification of the Probes
#define PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE 8

// Maximum number of hierarchy
#define PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH 8

// Number of exponent on the size of the probed when going in the hierarchy
#define PROBE_HIERARCHY_HIERARCHY_EXPONENT 2

// Minimum number of atlas on each coordinate of the atlas.
#define PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE 16

#define PROBE_INVALID_INDEX 0

/** Resolution of the cubmap to not draw part of the probes.  */
#define PROBE_MASK_RESOLUTION 2


#define PROBE_PARENT_COUNT 4


//------------------------------------------------------- INCLUDES

#include "../../Common.ush"
#include "../../HybridIndirectLighting.ush"


//------------------------------------------------------- STRUCTURE

/** Information of a probe. */
struct FProbeInfo
{
	// Position in translated world space of the view.
	float3 TranslatedWorldPosition;

	// Radius arround TranslatedWorldPosition where the information about the probe may be shared.
	float WorldRadius;

	// Probe's maximum tracing distance.
	// use GetProbeTracingRange() instead of reading this value directly.
	float WorldTMax;

	// 2x2 cubemap mask for wether the probe should be rendered.
	uint DirectionMask;

	uint _Padding[2];
};

/** CPU driven information about a level of the hierarchy. */
struct FHierarchyLevelParameters
{
	// Id of the level in the hierarchy.
	uint Id;

	// Resolution of the probe in texels.
	uint Resolution;

	// Number of ray shot per texel of the probe.
	uint SuperSampling;

	// (GPU driven) Total number of probe to render.
	uint ProbeCount;

	// (GPU driven) Offsets of the probe in the global probe array.
	uint ProbeArrayOffset;

	// (GPU driven) Offsets of the probe in the atlas.
	uint ProbeAtlasOffset;
};

struct FParentProbeInfo
{
	uint ProbeIndex[PROBE_PARENT_COUNT];
	float Weight[PROBE_PARENT_COUNT];
};


//------------------------------------------------------- PARAMETERS

uint2 EmitTileStorageExtent;
uint2 ResolveTileStorageExtent;
uint ProbeIndexAbscissMask;
uint ProbeIndexOrdinateShift;
uint HierarchyDepth;
float CounterParrallaxError;

DECLARE_SCALAR_ARRAY(uint, LevelResolutionArray, PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH);
DECLARE_SCALAR_ARRAY(uint, LevelSuperSamplingArray, PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH);

uint LevelId;
uint LevelResolution;
uint LevelSuperSampling;


StructuredBuffer<FProbeInfo> ProbeArray;
StructuredBuffer<uint> ProbeHierarchyInfoBuffer;


//------------------------------------------------------- FUNCTIONS

float3 GetHierarchyLevelDebugColor(const uint HierarchyLevelId)
{
	float3 DebugColor = float3(1, 1, 1);

	if (HierarchyLevelId == 0)
		DebugColor = float3(1, 0, 0); // Red
	else if (HierarchyLevelId == 1)
		DebugColor = float3(0, 1, 0); // Green
	else if (HierarchyLevelId == 2)
		DebugColor = float3(0, 0, 1); // Blue
	else if (HierarchyLevelId == 3)
		DebugColor = float3(1, 1, 0); // Yellow
	else if (HierarchyLevelId == 4)
		DebugColor = float3(1, 0, 1); // Pink
	else if (HierarchyLevelId == 5)
		DebugColor = float3(0, 1, 1); // Cyan

	return DebugColor;
}

/** Fetch information about any hierarchy level. */
FHierarchyLevelParameters GetProbeHierarchyLevelParameters(const uint HierarchyLevelId)
{
	FHierarchyLevelParameters HierarchyLevel;
	HierarchyLevel.Id = HierarchyLevelId;
	HierarchyLevel.Resolution = GET_SCALAR_ARRAY_ELEMENT(LevelResolutionArray,HierarchyLevelId);
	HierarchyLevel.SuperSampling = GET_SCALAR_ARRAY_ELEMENT(LevelSuperSamplingArray,HierarchyLevelId);
	HierarchyLevel.ProbeCount = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 0];
	HierarchyLevel.ProbeArrayOffset = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 1];
	HierarchyLevel.ProbeAtlasOffset = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 2];
	return HierarchyLevel;
}

/** Fetch information about the pass specific hierarchy level. */
FHierarchyLevelParameters GetPassProbeHierarchyLevelParameters()
{
	FHierarchyLevelParameters HierarchyLevel;
	HierarchyLevel.Id = LevelId;
	HierarchyLevel.Resolution = LevelResolution;
	HierarchyLevel.SuperSampling = LevelSuperSampling;
	HierarchyLevel.ProbeCount = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 0];
	HierarchyLevel.ProbeArrayOffset = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 1];
	HierarchyLevel.ProbeAtlasOffset = ProbeHierarchyInfoBuffer[3 * HierarchyLevel.Id + 2];
	return HierarchyLevel;
}

FProbeInfo ReadProbeInfo(uint ProbeIndex)
{
	return ProbeArray[ProbeIndex];
}

float GetProbeTMin(FProbeInfo ProbeInfo)
{
	return ProbeInfo.WorldRadius * CounterParrallaxError;
}

float GetProbeDepth(FProbeInfo ProbeInfo)
{
	return mul(float4(ProbeInfo.TranslatedWorldPosition, 1.0), View.TranslatedWorldToView).z;
}

float2 GetProbeScreenCoord(FProbeInfo ProbeInfo)
{
	float4 Clip	= mul(float4(ProbeInfo.TranslatedWorldPosition, 1), View.TranslatedWorldToClip);
	float2 Screen = Clip.xy * rcp(Clip.w);
	return Screen.xy;
}

uint2 GetProbePixelPos(FProbeInfo ProbeInfo, uint HierarchyLevelId)
{
	float2 ScreenPos = GetProbeScreenCoord(ProbeInfo);
	uint2 PixelPos = uint2(ScreenPosToViewportUV(ScreenPos) * View.ViewSizeAndInvSize.xy) / (uint(PROBE_HIERARCHY_EMIT_TILE_SIZE) << HierarchyLevelId);
	return PixelPos;
}

uint2 GetProbeRandomSeed(FProbeInfo ProbeInfo, uint HierarchyLevelId)
{
	return Rand3DPCG16(int3(GetProbePixelPos(ProbeInfo, HierarchyLevelId), View.StateFrameIndexMod8)).xy;
}

uint2 EmitTileCoordToEmitAtomicTileCoord(uint2 EmitTileCoord)
{
	return EmitTileCoord / 8;
}

uint2 EmitTileCoordToProbeStorageCoord(uint2 EmitTileCoord, uint EmitProbeIndex)
{
	const uint EmitPerTileSqrt = uint(sqrt(PROBE_HIERARCHY_MAX_EMIT_PER_TILE));

	return EmitTileCoord + EmitTileStorageExtent * uint2(EmitProbeIndex % EmitPerTileSqrt, EmitProbeIndex / EmitPerTileSqrt);
}

uint CompressProbeToProbeMap(float WorldDepth, float WorldRadius)
{
	// Put the depth in the highest significant bit so that the compressed probe cans till be sorted by depth.
	if (WorldDepth == 0.0)
		return 0;
	return f32tof16(WorldRadius) | (f32tof16(ConvertToDeviceZ(WorldDepth)) << 16);
}

void UncompressProbeFromProbeMap(uint Raw, out float WorldDepth, out float WorldRadius)
{
	WorldDepth = Raw ? ConvertFromDeviceZ(f16tof32(Raw >> 16)) : 0.0;
	WorldRadius = f16tof32(Raw);
}

float RoundUpToPowerofTwo(float x)
{
	return pow(2.0, ceil(log2(x)));
}

float ComputeMinimalProbeWorldRadiusAtDepth(float WorldDepth)
{
	float Recommanded = (WorldDepth * PROBE_HIERARCHY_MIN_PIXEL_RADIUS * (2.0 * View.ViewSizeAndInvSize.z) * GetTanHalfFieldOfView().x);

	const float Minimal = 8.0 * 2;

	return Recommanded; // max(Recommanded, Minimal);
}

float ProjectWorldDistanceToPixelDistance(FProbeInfo ProbeInfo, float WorldDistance)
{
	float3 ViewPosition = mul(float4(ProbeInfo.TranslatedWorldPosition, 1.0), View.TranslatedWorldToView).xyz;
	float4 Clip = mul(float4(ViewPosition, 1), View.ViewToClip);
	float3 Screen = Clip.xyz * rcp(Clip.w);
	float2 ViewportUV = ScreenPosToViewportUV(Screen.xy);

	float3 SecondViewPosition = ViewPosition + float3(WorldDistance, 0, 0);
	float4 SecondClip = mul(float4(SecondViewPosition, 1), View.ViewToClip);
	float3 SecondScreen = SecondClip.xyz * rcp(SecondClip.w);
	float2 SecondViewportUV = ScreenPosToViewportUV(SecondScreen.xy);

	float TheoricDistance = PROBE_HIERARCHY_MIN_PIXEL_RADIUS;
	float PixelDistance = length((ViewportUV - SecondViewportUV) * View.ViewSizeAndInvSize.xy);

	return PixelDistance;
}
