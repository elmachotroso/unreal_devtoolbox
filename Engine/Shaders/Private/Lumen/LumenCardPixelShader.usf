// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenCardPixelShader.usf
=============================================================================*/

#define LUMEN_CARD_CAPTURE 1

#include "../Common.ush"
#include "../BRDF.ush"

#define SceneTexturesStruct LumenCardPass.SceneTextures 
#define EyeAdaptationStruct LumenCardPass

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

struct FLumenCardInterpolantsVSToPS
{

};

void Main(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FLumenCardInterpolantsVSToPS PassInterpolants,
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position		// after all interpolators
	OPTIONAL_IsFrontFace,
	out float4 OutTarget0 : SV_Target0,
	out float4 OutTarget1 : SV_Target1,
	out float4 OutTarget2 : SV_Target2)
{
	ResolvedView = ResolveView();
	FMaterialPixelParameters MaterialParameters;

	#if LUMEN_MULTI_VIEW_CAPTURE
	{
		FPackedNaniteView PackedView = Nanite.InViews[Interpolants.ViewIndex];
		FNaniteView NaniteView = UnpackNaniteView(PackedView);

		PatchViewState(NaniteView, ResolvedView);
		MaterialParameters = GetMaterialPixelParameters(NaniteView, Interpolants, SvPosition);
	}
	#else
	{
		MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	}
	#endif

	FPixelMaterialInputs PixelMaterialInputs;
	
	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
	}

	// Don't clip when rendering heightfields (e.g. Landscape) in order to capture height in masked regions
	#if !VERTEX_FACTORY_HEIGHTFIELD
	{
		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);
	}
	#endif

	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);

	float Roughness = GetMaterialRoughness(PixelMaterialInputs);

#if MATERIALBLENDING_ANY_TRANSLUCENT
	float Opacity = GetMaterialOpacity(PixelMaterialInputs);
#elif MATERIALBLENDING_MASKED
	float Opacity = GetMaterialMask(PixelMaterialInputs) >= 0.0f ? 1.0f : 0.0f;
#else
	float Opacity = 1.0f;
#endif

	float3 DiffuseColor = BaseColor - BaseColor * Metallic;
	float3 SpecularColor = lerp(0.08f * Specular.xxx, BaseColor, Metallic.xxx);

	EnvBRDFApproxFullyRough(DiffuseColor, SpecularColor);

	uint ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);

#if MATERIAL_SHADINGMODEL_SUBSURFACE || MATERIAL_SHADINGMODEL_PREINTEGRATED_SKIN || MATERIAL_SHADINGMODEL_SUBSURFACE_PROFILE || MATERIAL_SHADINGMODEL_TWOSIDED_FOLIAGE || MATERIAL_SHADINGMODEL_CLOTH || MATERIAL_SHADINGMODEL_EYE
	if (ShadingModel == SHADINGMODELID_SUBSURFACE || ShadingModel == SHADINGMODELID_PREINTEGRATED_SKIN || ShadingModel == SHADINGMODELID_SUBSURFACE_PROFILE || ShadingModel == SHADINGMODELID_TWOSIDED_FOLIAGE || ShadingModel == SHADINGMODELID_CLOTH || ShadingModel == SHADINGMODELID_EYE)
	{
		float4 SubsurfaceData = GetMaterialSubsurfaceData(PixelMaterialInputs);
		DiffuseColor += SubsurfaceData.rgb;
	}
#endif

	// Normals are stored in local card space
	float3 CardSpaceNormal = mul(float4(MaterialParameters.WorldNormal, 0.0f), ResolvedView.TranslatedWorldToView).xyz;

	OutTarget0 = float4(sqrt(DiffuseColor), Opacity);
	OutTarget1 = float4(CardSpaceNormal.xy * 0.5f + 0.5f, 0.0f, 0.0f);
	OutTarget2 = float4(GetMaterialEmissive(PixelMaterialInputs), 0.0f);
}