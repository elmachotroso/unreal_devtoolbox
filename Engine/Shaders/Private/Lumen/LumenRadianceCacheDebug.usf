// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenRadianceCacheDebug.usf
=============================================================================*/

#include "../Common.ush"
#include "../ShaderPrintCommon.ush"
#include "LumenRadianceCacheUpdate.ush"

uint MaxNumProbes;
StructuredBuffer<uint> PriorityHistogram;
StructuredBuffer<uint> MaxUpdateBucket;
StructuredBuffer<uint> MaxTracesFromMaxUpdateBucket;
StructuredBuffer<uint> ProbesToUpdateTraceCost;
Buffer<uint> ProbeTraceAllocator;
Buffer<uint> ProbeFreeListAllocator;
Buffer<uint> ProbeAllocator;

/** 
 * Print out various stats for debugging radiance cache probe updates
 */
[numthreads(1, 1, 1)]
void RadianceCacheUpdateStatsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	float2 Origin = float2(0.1, 0.1);
	float2 TextPos = Origin;

	TextPos = ShaderPrintNewline(TextPos);

	[loop]
	for (uint BucketIndex = 0; BucketIndex < PRIORITY_HISTOGRAM_SIZE; ++BucketIndex)
	{
		TextPos = ShaderPrint(TextPos, PriorityHistogram[BucketIndex]);

		if ((BucketIndex + 1) % 8 == 0)
		{
			TextPos = ShaderPrintNewline(TextPos);
		}
		else
		{
			TextPos = ShaderPrintSymbol(TextPos, _SPC_);
		}
	}

	const uint MaxUpdateBucketIndex = MaxUpdateBucket[0];
	const uint LocalMaxTracesFromMaxUpdateBucket = MaxTracesFromMaxUpdateBucket[0];

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("MaxBucket "));
	TextPos = ShaderPrint(TextPos, MaxUpdateBucketIndex);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("MaxTracesFromMaxUpdateBucket "));
	TextPos = ShaderPrint(TextPos, LocalMaxTracesFromMaxUpdateBucket);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("Out "));

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT(" TraceCost "));
	TextPos = ShaderPrint(TextPos, ProbesToUpdateTraceCost[0]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT(" TraceCostFromMaxUpdateBucket "));
	TextPos = ShaderPrint(TextPos, ProbesToUpdateTraceCost[1]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT(" Probes "));
	TextPos = ShaderPrint(TextPos, ProbeTraceAllocator[0]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("MaxProbesInAtlas "));
	TextPos = ShaderPrint(TextPos, MaxNumProbes);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("ProbesInAtlas "));
	TextPos = ShaderPrint(TextPos, ProbeAllocator[0] - ProbeFreeListAllocator[0]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("Allocator "));
	TextPos = ShaderPrint(TextPos, ProbeAllocator[0]);

	TextPos = ShaderPrintNewline(TextPos);
	TextPos = ShaderPrintText(TextPos, TEXT("FreeList "));
	TextPos = ShaderPrint(TextPos, ProbeFreeListAllocator[0]);
}