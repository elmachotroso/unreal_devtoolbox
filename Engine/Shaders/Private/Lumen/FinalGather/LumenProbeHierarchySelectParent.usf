// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"
#include "../../Random.ush"


//------------------------------------------------------- DEFINES

#define GROUP_SIZE 64

#define DEBUG_NEAREST_PROBE 0

#define SAMPLE_BATCH_SIZE 4


//------------------------------------------------------- PARAMETERS

uint2 ParentTilePixelOffset;
uint2 ParentResolveTileBoundary;
uint ParentHierarchyId;
uint HierarchyId;

StructuredBuffer<uint> ProbePerResolveTiles;
globallycoherent RWStructuredBuffer<FProbeInfo> ProbeArrayInout;
RWStructuredBuffer<FParentProbeInfo> ProbeParentListOutput;


//------------------------------------------------------- FUNCTIONS

float ComputeProbeProbability(FProbeInfo ProbeInfo, FProbeInfo ParentProbeInfo)
{
	float InvToleratedPrecisionLoss = rcp(ProbeInfo.WorldRadius * ProbeInfo.WorldRadius * PROBE_HIERARCHY_HIERARCHY_EXPONENT * PROBE_HIERARCHY_HIERARCHY_EXPONENT);

	float ParentWorldRadiusSquare = ParentProbeInfo.WorldRadius * ParentProbeInfo.WorldRadius;
	float ParentProbePrecision = rcp(ParentWorldRadiusSquare);

	float DistanceSquare = length2(ParentProbeInfo.TranslatedWorldPosition - ProbeInfo.TranslatedWorldPosition);

	float Probability = ParentProbePrecision; // * exp(-5.0 * DistanceSquare * InvToleratedPrecisionLoss);


	// Skip this Probe if this is too far.
	FLATTEN
	if (DistanceSquare > ParentWorldRadiusSquare)
	{
		Probability = 0.0;
	}

	return Probability;
}

uint ReadProbeIndexForTile(const uint HierarchyId, uint ResolveTileIndex, uint ProbeTileIndex)
{
	return ProbePerResolveTiles[(1 + MAX_PROBE_HIERARCHY_PER_TILE) * ResolveTileIndex + ProbeTileIndex];
}

uint ReadProbeCountForTile(const uint HierarchyId, uint ResolveTileIndex)
{
	return ReadProbeIndexForTile(HierarchyId, ResolveTileIndex, MAX_PROBE_HIERARCHY_PER_TILE);
}


//------------------------------------------------------- ENTRY POINT


#ifdef SETUP_PASS

RWBuffer<uint> DispatchParametersOutput;

[numthreads(PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH, 1, 1)]
void MainCS(uint GroupThreadIndex : SV_GroupIndex)
{
	if (GroupThreadIndex < PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH)
	{
		FHierarchyLevelParameters HierarchyLevel = GetProbeHierarchyLevelParameters(GroupThreadIndex);

		DispatchParametersOutput[3 * HierarchyLevel.Id + 0] = (HierarchyLevel.ProbeCount + (GROUP_SIZE - 1)) / GROUP_SIZE;
		DispatchParametersOutput[3 * HierarchyLevel.Id + 1] = 1;
		DispatchParametersOutput[3 * HierarchyLevel.Id + 2] = 1;
	}
}

#else

groupshared float4 SharedLighting[8 * 8];

[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(
	uint GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	FHierarchyLevelParameters HierarchyLevel = GetPassProbeHierarchyLevelParameters();

	uint ProbeIndex = HierarchyLevel.ProbeArrayOffset + GroupId * GROUP_SIZE + GroupThreadIndex;
	if (ProbeIndex >= (HierarchyLevel.ProbeArrayOffset + HierarchyLevel.ProbeCount))
	{
		return;
	}

	FProbeInfo ProbeInfo = ProbeArrayInout[ProbeIndex];

	float SceneDepth = GetProbeDepth(ProbeInfo);

	float2 ScreenPos = GetProbeScreenCoord(ProbeInfo);
	float2 ViewportUV = ScreenPosToViewportUV(ScreenPos);
	uint2 PixelPosition = ViewportUV * View.ViewSizeAndInvSize.xy;
	uint2 ResolveTileCoord = clamp((PixelPosition + ParentTilePixelOffset) / (uint(PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE) << ParentHierarchyId), uint2(0, 0), ParentResolveTileBoundary);

	const uint ResolveTileIndex = dot(ResolveTileCoord, uint2(1, ResolveTileStorageExtent.x));
	const uint ProbeCount = ReadProbeCountForTile(ParentHierarchyId, ResolveTileIndex);


	float Rand[PROBE_PARENT_COUNT];
	Rand[0] = InterleavedGradientNoise(ResolveTileCoord + 0.5, View.StateFrameIndexMod8);
	Rand[1] = InterleavedGradientNoise(ResolveTileCoord + 0.5, View.StateFrameIndexMod8 * 117);
	Rand[2] = InterleavedGradientNoise(ResolveTileCoord + 0.5, View.StateFrameIndexMod8 * 7901);
	Rand[3] = InterleavedGradientNoise(ResolveTileCoord + 0.5, View.StateFrameIndexMod8 * 84857);

	FParentProbeInfo ParentProbeList;
	{
		UNROLL_N(PROBE_PARENT_COUNT)
		for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
		{
			ParentProbeList.ProbeIndex[ParentId] = PROBE_INVALID_INDEX;
			ParentProbeList.Weight[ParentId] = 0.0;
		}
	}

	// Compute a total probability for first parent selection.
	float TotalProbabilityForNextSelection = 0.0;
	{
		LOOP
		for (uint ProbeTileIndex = 0; ProbeTileIndex < ProbeCount; ProbeTileIndex++)
		{
			uint ProbeIndex = ReadProbeIndexForTile(ParentHierarchyId, ResolveTileIndex, ProbeTileIndex);
			FProbeInfo ParentProbeInfo = ProbeArrayInout[ProbeIndex];

			TotalProbabilityForNextSelection += ComputeProbeProbability(ProbeInfo, ParentProbeInfo);
		}
	}

	uint TakenMask = 0x0;

	UNROLL_N(PROBE_PARENT_COUNT)
	for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
	{
		float DesiredRand = TotalProbabilityForNextSelection * Rand[ParentId];

		// Recompute a new total propability for the next parent id.
		TotalProbabilityForNextSelection = 0.0;

		// Select the probes
		LOOP
		for (uint ProbeTileIndex = 0; ProbeTileIndex < ProbeCount; ProbeTileIndex++)
		{
			uint ProbeIndex = ReadProbeIndexForTile(ParentHierarchyId, ResolveTileIndex, ProbeTileIndex);
			FProbeInfo ParentProbeInfo = ProbeArrayInout[ProbeIndex];
			
			float ProbeProbability = ComputeProbeProbability(ProbeInfo, ParentProbeInfo);

			ProbeProbability = ((1u << ProbeTileIndex) & TakenMask) == 0 ? ProbeProbability : 0.0;

			if (DesiredRand < ProbeProbability && ParentProbeList.ProbeIndex[ParentId] == PROBE_INVALID_INDEX)
			{
				ParentProbeList.ProbeIndex[ParentId] = ProbeIndex;
				ParentProbeList.Weight[ParentId] = 1; //ProbeProbability;

				TakenMask |= 1u << ProbeTileIndex;
			}
			else
			{
				TotalProbabilityForNextSelection += ProbeProbability;
			}

			DesiredRand -= ProbeProbability;
		}
	}

	// Normalize all the weights.
	{
		float TotalWeight = 0.0;
		{
			UNROLL_N(PROBE_PARENT_COUNT)
			for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
			{
				TotalWeight += ParentProbeList.Weight[ParentId];
			}
		}

		float InvWeight = rcp(TotalWeight);
		{
			UNROLL_N(PROBE_PARENT_COUNT)
			for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
			{
				ParentProbeList.Weight[ParentId] *= InvWeight;
			}
		}
	}

	// Updates TMax of the probe
	float WorldTMax = 0.0;
	{
		UNROLL_N(PROBE_PARENT_COUNT)
		for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
		{
			uint ParentProbeIndex = ParentProbeList.ProbeIndex[ParentId];

			if (ParentProbeIndex != PROBE_INVALID_INDEX)
			{
				FProbeInfo ParentProbeInfo = ProbeArrayInout[ParentProbeIndex];

				float WaterTightTMax = GetProbeTMin(ParentProbeInfo) + length(ProbeInfo.TranslatedWorldPosition - ParentProbeInfo.TranslatedWorldPosition);

				WorldTMax = max(WorldTMax, WaterTightTMax);
			}
		}
	}

	// Propage DirectionMask to parent probes
	{
		UNROLL_N(PROBE_PARENT_COUNT)
		for (uint ParentId = 0; ParentId < PROBE_PARENT_COUNT; ParentId++)
		{
			uint ParentProbeIndex = ParentProbeList.ProbeIndex[ParentId];

			if (ParentProbeIndex != PROBE_INVALID_INDEX)
			{
				InterlockedOr(/* inout */ ProbeArrayInout[ParentProbeIndex].DirectionMask, ProbeInfo.DirectionMask);
			}
		}
	}

	ProbeArrayInout[ProbeIndex].WorldTMax = WorldTMax;
	ProbeParentListOutput[ProbeIndex] = ParentProbeList;
}

#endif
