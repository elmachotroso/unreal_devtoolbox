// Copyright Epic Games, Inc. All Rights Reserved.

// Generate vector truncation warnings to errors.
#pragma warning(error: 3206)

//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"


#define GROUP_SIZE 8
#define Z_ORDER 1


//------------------------------------------------------- PARAMETERS

uint2 TileCount;
uint2 AtomicTileExtent;
uint TileListMaxLength;

Texture2D<uint> TileClassificationTexture;
Texture2D<uint> AtomicTileOffsetTexture;

RWStructuredBuffer<uint> TileListOutput;

RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- LDS

#if Z_ORDER

groupshared uint SharedTileClassification[GROUP_SIZE * GROUP_SIZE];

#else

groupshared uint SharedAtomicTileOffset[PROBE_OCCLUSION_MAX];

#endif


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	#if Z_ORDER
	{
		// NOP
	}
	#else
	{
		if (GroupThreadIndex < PROBE_OCCLUSION_MAX)
		{
			SharedAtomicTileOffset[GroupThreadIndex] = 0;
		}
		
		GroupMemoryBarrierWithGroupSync();
	}
	#endif

	uint2 TileOffset = 0;
	#if Z_ORDER
	{
		TileOffset = ZOrder2D(GroupThreadIndex, log2(GROUP_SIZE));
	}
	#else
	{
		TileOffset = uint2(GroupThreadIndex % GROUP_SIZE, GroupThreadIndex / GROUP_SIZE);
	}
	#endif

	uint2 TileCoord = GroupId * GROUP_SIZE + TileOffset;
	uint2 AtomicTileCoord = GroupId;

	bool bIsValidEmitTile = all(TileCoord < TileCount);

	uint Offset = AtomicTileOffsetTexture[AtomicTileCoord];

	//DebugOutput[TileCoord] = float4(
	//	TileCoord.x,
	//	AtomicTileCoord.x,
	//	Offset,
	//	0);

	uint ClassificationId = TileClassificationTexture[TileCoord];
	uint AtomicTileListOffset = AtomicTileOffsetTexture[AtomicTileCoord + uint2(0, ClassificationId * AtomicTileExtent.y)];

	uint TileListOffset = 0;
	#if Z_ORDER
	{
		SharedTileClassification[GroupThreadIndex] = bIsValidEmitTile ? ClassificationId : ~0;

		GroupMemoryBarrierWithGroupSync();

		LOOP
		for (uint i = 0; i < GROUP_SIZE * GROUP_SIZE; i++)
		{
			uint NeighborClassificationId = SharedTileClassification[i];
			bool bIsPrefixNeighbor = i < GroupThreadIndex;
			bool bNeigborSummonSameClassification = NeighborClassificationId == ClassificationId;

			TileListOffset += (bIsPrefixNeighbor && bNeigborSummonSameClassification) ? 1 : 0;
		}
	}
	#else
	if (bIsValidEmitTile)
	{
		InterlockedAdd(SharedAtomicTileOffset[ClassificationId], 1, /* out */ TileListOffset);
	}
	#endif

	uint CompressedTileCoord = TileCoord.x | TileCoord.y << 16;

	if (bIsValidEmitTile)
	{
		uint OutputListIndex = AtomicTileListOffset + TileListOffset + ClassificationId * TileListMaxLength;
		TileListOutput[OutputListIndex] = CompressedTileCoord;

		//uint Offset = AtomicTileOffsetTexture[AtomicTileCoord + uint2(0, ClassificationId * AtomicTileExtent.y)];
		//
		//DebugOutput[TileCoord] = float4(
		//	OutputListIndex,
		//	Offset,
		//	TileListOffset[ClassificationId],
		//	0);
	}
}
