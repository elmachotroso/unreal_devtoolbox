// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- DEFINES

#define TILE_SIZE 8

#define DILATE 1
#define DEPTH_RANGE_TEST 1


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"
#include "../../DeferredShadingCommon.ush"


//------------------------------------------------------- PARAMETERS

uint2 EmitTileCount;
uint2 TileCount;
uint2 TileOffset;
uint HierarchyId;

Texture2D<uint> ProbeListPerEmitTile;
Texture2D<float2> TiledDepthBounds;
Texture2D ClosestHZB;
Texture2D FurthestHZB;

RWStructuredBuffer<uint> ProbePerTilesOutput;
RWTexture2D<float4> DebugOutput;




//------------------------------------------------------- FUNCTIONS

uint ResolveTileCoordToTileIndex(uint2 ResolveTileCoord)
{
	return dot(ResolveTileCoord, uint2(1, ResolveTileStorageExtent.x));
}

float SampleHZBAtTileCoord(Texture2D HZBTexture, uint2 ResolveTileCoord)
{
	return ConvertFromDeviceZ(HZBTexture.Load(uint3(ResolveTileCoord, 2 + HierarchyId)).r);
}

void WriteProbeIndexForResolveTile(uint TileIndex, uint ProbeTileIndex, uint ProbeIndex)
{
	ProbePerTilesOutput[(1 + MAX_PROBE_HIERARCHY_PER_TILE) * TileIndex + ProbeTileIndex] = ProbeIndex;
}

void WriteProbeCountForResolveTile(uint TileIndex, uint ProbeCount)
{
	WriteProbeIndexForResolveTile(TileIndex, MAX_PROBE_HIERARCHY_PER_TILE, ProbeCount);
}

float ComputeDistanceToProbe(FProbeInfo ProbeInfo, float ClosestDepth, float FurthestDepth)
{
	float ProbeDepth = GetProbeDepth(ProbeInfo);

	float DistanceToResolveTileDepthBounds = max(
		max(ClosestDepth - ProbeDepth, 0.0),	
		max(ProbeDepth - FurthestDepth, 0.0));

	return DistanceToResolveTileDepthBounds;
}

void GatherEmitTiles(uint2 EmitTileCoord, float ClosestDepth, float FurthestDepth, uint ResolveTileIndex, inout uint ProbeCount)
{
	UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
	for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
	{
		uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
		uint ProbeIndex = ProbeListPerEmitTile.Load(int3(ProbeStorageCoord, 0));

		if (ProbeIndex != PROBE_INVALID_INDEX && ProbeCount < MAX_PROBE_HIERARCHY_PER_TILE)
		{
			FProbeInfo ProbeInfo = ReadProbeInfo(ProbeIndex);

			float DistanceToResolveTileDepthBounds = ComputeDistanceToProbe(ProbeInfo, ClosestDepth, FurthestDepth);

			if (DistanceToResolveTileDepthBounds < ProbeInfo.WorldRadius || !DEPTH_RANGE_TEST)
			{
				WriteProbeIndexForResolveTile(ResolveTileIndex, ProbeCount, ProbeIndex);
				ProbeCount++;
			}
		}
	}
}


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint2 ResolveTileCoord = DispatchThreadId;
	uint2 EmitTileCoord = (ResolveTileCoord + TileOffset) / (PROBE_HIERARCHY_EMIT_TILE_SIZE / PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE);

	bool bIsvalidResolveTileCoord = all(ResolveTileCoord < TileCount);

	uint ResolveTileIndex = ResolveTileCoordToTileIndex(ResolveTileCoord);

#if 1
	float2 DepthBounds = TiledDepthBounds.Load(uint3(ResolveTileCoord, HierarchyId));

	float ClosestDepth = ConvertFromDeviceZ(DepthBounds.x);
	float FurthestDepth = ConvertFromDeviceZ(DepthBounds.y);
#else
	float ClosestDepth = SampleHZBAtTileCoord(ClosestHZB, ResolveTileCoord);
	float FurthestDepth = SampleHZBAtTileCoord(FurthestHZB, ResolveTileCoord);
#endif
	
	uint ProbeCount = 0;

	// Copy over already assigned tiles.
	if (bIsvalidResolveTileCoord)
	{
		GatherEmitTiles(EmitTileCoord, ClosestDepth, FurthestDepth, ResolveTileIndex, /* inout */ ProbeCount);
	}
	
	const bool bDilate = DILATE != 0; // && HierarchyId > 0;

	// Look for neighborhood in + fashion.
	if (bDilate)
	{
		const int DilateRadius = 1;

		UNROLL
		for (int y = -DilateRadius; y <= DilateRadius; y++)
		{
			UNROLL
			for (int x = -DilateRadius; x <= DilateRadius; x++)
			{
				if (x == 0 && y == 0)
					continue;

				if (!(x == 0 || y == 0))
					continue;

				uint2 NeighborTileCoord = uint2(int2(EmitTileCoord) + int2(x, y));
				
				if (all(NeighborTileCoord < EmitTileCount))
				{
					GatherEmitTiles(NeighborTileCoord, ClosestDepth, FurthestDepth, ResolveTileIndex, /* inout */ ProbeCount);
				}
			}
		}
	}
	
	// Look for neighborhood in x fashion.
	if (bDilate)
	{
		const int DilateRadius = 1;

		UNROLL
		for (int y = -DilateRadius; y <= DilateRadius; y++)
		{
			UNROLL
			for (int x = -DilateRadius; x <= DilateRadius; x++)
			{
				if (x == 0 && y == 0)
					continue;

				if (x == 0 || y == 0)
					continue;

				uint2 NeighborTileCoord = uint2(int2(EmitTileCoord) + int2(x, y));
				
				if (all(NeighborTileCoord < EmitTileCount))
				{
					GatherEmitTiles(NeighborTileCoord, ClosestDepth, FurthestDepth, ResolveTileIndex, /* inout */ ProbeCount);
				}
			}
		}
	}
	
	#if 0
	{
		uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, 0);
		uint ProbeIndex = ProbeListPerEmitTile.Load(int3(ProbeStorageCoord, 0));

		float ProbeDepth = 0.0;
		float2 ViewportUV = 0.0;
		if (ProbeIndex != PROBE_INVALID_INDEX)
		{
			// Depth test with HZB.

			FProbeInfo ProbeInfo = ReadProbeInfo(ProbeIndex);

			ProbeDepth = GetProbeDepth(ProbeInfo);
			ViewportUV = GetProbeScreenCoord(ProbeInfo) * 0.5 + 0.5;
		}

		DebugOutput[ResolveTileCoord] = float4(
			ViewportUV,
			ProbeDepth,
			0.0);
	}
	#endif

	#if 0
	{
		DebugOutput[ResolveTileCoord] = float4(
			ProbeCount,
			ClosestDepth,
			FurthestDepth,
			0.0);
	}
	#endif

	WriteProbeCountForResolveTile(ResolveTileIndex, ProbeCount);
}
