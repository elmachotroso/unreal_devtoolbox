// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"


//------------------------------------------------------- PARAMETERS

Buffer<uint> ProbeGlobalCounters;

RWStructuredBuffer<uint> ProbeHierarchyInfoOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(1, 1, 1)]
void MainCS()
{
	const uint OffsetBoundaries = PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE * PROBE_HIERARCHY_MIN_ATLAS_GRID_SIZE;
	uint ProbeArrayOffset = PROBE_INVALID_INDEX + 1;
	uint ProbeAtlasOffset = 0;

	UNROLL_N(PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH)
	for (uint HierarchyLevelId = 0; HierarchyLevelId < PROBE_HIERARCHY_MAX_HIERARCHY_DEPTH; HierarchyLevelId++)
	{
		uint ProbeCount = ProbeGlobalCounters[HierarchyLevelId];

		ProbeHierarchyInfoOutput[3 * HierarchyLevelId + 0] = ProbeCount;
		ProbeHierarchyInfoOutput[3 * HierarchyLevelId + 1] = ProbeArrayOffset;
		ProbeHierarchyInfoOutput[3 * HierarchyLevelId + 2] = ProbeAtlasOffset;
		
		ProbeArrayOffset += ProbeCount;
		ProbeArrayOffset = OffsetBoundaries * ((ProbeArrayOffset + (OffsetBoundaries - 1)) / OffsetBoundaries);

		uint ResolutionMultiplier = GET_SCALAR_ARRAY_ELEMENT(LevelResolutionArray, HierarchyLevelId) / PROBE_HIERARCHY_RESOLUTION;

		ProbeAtlasOffset += ResolutionMultiplier * ResolutionMultiplier * ProbeCount;
		ProbeAtlasOffset = OffsetBoundaries * ((ProbeAtlasOffset + (OffsetBoundaries - 1)) / OffsetBoundaries);
	}
}
