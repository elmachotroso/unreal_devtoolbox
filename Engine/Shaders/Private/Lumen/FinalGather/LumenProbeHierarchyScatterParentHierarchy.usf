// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"


#define DEBUG_OUTPUT 0

#define EMIT_TILE_SPAN 8
#define REDUCE_TILE_SIZE 2
#define REDUCE_TILE_COUNT (EMIT_TILE_SPAN / REDUCE_TILE_SIZE)
#define GROUP_SIZE (EMIT_TILE_SPAN)

// Minimum number of children a parent must have to not increase too much number of rays traced per root probes
#define MIN_CHILD_COUNT 1


//------------------------------------------------------- PARAMETERS

uint2 ChildEmitTileCount;
uint2 ChildEmitTileOffset;

Texture2D<uint> ProjectedProbes;

RWTexture2D<uint> ParentProbesOutput_0;
RWTexture2D<uint> ParentTileCountersOutput_0;


#if DEBUG_OUTPUT
RWTexture2D<float4> DebugOutput;
#endif


//------------------------------------------------------- LDS

groupshared uint SharedProbeArray[GROUP_SIZE * GROUP_SIZE * PROBE_HIERARCHY_MAX_EMIT_PER_TILE];

groupshared uint SharedInputTileCounters;
groupshared uint SharedParentTileCounters;


//------------------------------------------------------- FUNCTIONS


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, PROBE_HIERARCHY_MAX_EMIT_PER_TILE)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	{
		if (GroupThreadIndex == 0)
		{
			SharedInputTileCounters = 0;
			SharedParentTileCounters = 0;
		}
	}

	GroupMemoryBarrierWithGroupSync();

	uint2 EmitAtomicTileCoord = GroupId / 2;

	{
		uint2 EmitTileCoord = GroupId * EMIT_TILE_SPAN + uint2(GroupThreadIndex, GroupThreadIndex / EMIT_TILE_SPAN) % EMIT_TILE_SPAN;
		uint EmitProbeIndex = GroupThreadIndex / (EMIT_TILE_SPAN * EMIT_TILE_SPAN);
	
		uint2 ReduceTileCoord = EmitTileCoord / REDUCE_TILE_SIZE;

		// Read probe.
		uint CompressedProbe = 0;
		if (all(EmitTileCoord - ChildEmitTileOffset < ChildEmitTileCount))
		{
			uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord - ChildEmitTileOffset, EmitProbeIndex);
			CompressedProbe = ProjectedProbes.Load(int3(ProbeStorageCoord, 0));
		}

		if (CompressedProbe)
		{
			InterlockedAdd(SharedInputTileCounters, 1);
		}

		// Store probe to LDS
		{
			uint LDSCoord = (
				EmitProbeIndex +
				dot(EmitTileCoord % REDUCE_TILE_SIZE, uint2(1, REDUCE_TILE_SIZE)) * PROBE_HIERARCHY_MAX_EMIT_PER_TILE +
				dot(ReduceTileCoord % REDUCE_TILE_COUNT, uint2(1, REDUCE_TILE_COUNT)) * PROBE_HIERARCHY_MAX_EMIT_PER_TILE * REDUCE_TILE_SIZE * REDUCE_TILE_SIZE);
			
			SharedProbeArray[LDSCoord] = CompressedProbe;
		}
	}
	
	GroupMemoryBarrierWithGroupSync();
	
#if 0
	// Early return
	if (SharedInputTileCounters == 0 && 0)
	{
		uint2 ReduceTileCoord = GroupId * REDUCE_TILE_COUNT + ReduceTileOffset;

		UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(ReduceTileCoord, EmitProbeIndex);
			uint CompressedProbe = CompressProbeToProbeMap(ProbeDepthArray[EmitProbeIndex], ProbeRadiusArray[EmitProbeIndex]);

			ParentProbesOutput_0[ProbeStorageCoord] = CompressedProbe;
		}
		return;
	}
#endif

	// Bitonic sort within a reduce tile.
	{
		uint D = SharedProbeArray[GroupThreadIndex];
			
		const uint IterationCount = uint(log2(PROBE_HIERARCHY_MAX_EMIT_PER_TILE * REDUCE_TILE_SIZE * REDUCE_TILE_SIZE));

		UNROLL
		for (uint i = 0; i < IterationCount; i++)
		{
			bool bBottomLaneTakeMax = !( ((GroupThreadIndex & (2u << i)) == 0) && (i != (IterationCount - 1)) );

			LOOP
			for (uint j = 0; j <= i; j++)
			{
				const uint SwapMask = 1u << (i - j);

				uint I1 = GroupThreadIndex ^ SwapMask;

				uint D0 = D;
				uint D1 = SharedProbeArray[I1];
					
				// This is DeviceZ in the highest signigicant bits, but 0 is invalid probe and should be first.
				// uint DMax = min(D0, D1);
				// uint DMin = max(D0, D1);
				uint DMax = (D0 < D1 && D1) ? D0 : D1;
				uint DMin = (D0 < D1 && D1) ? D1 : D0;
					
				bool bIsBottomLane = (GroupThreadIndex & SwapMask) != 0;
				D = (bIsBottomLane == bBottomLaneTakeMax) ? DMax : DMin;
					
				GroupMemoryBarrierWithGroupSync();

				SharedProbeArray[GroupThreadIndex] = D;
					
				GroupMemoryBarrierWithGroupSync();
			}
		}
	}
	
	//DebugOutput[DispatchThreadId] = float4(f16tof32(SharedProbeArray[GroupThreadIndex] >> 16), 0, 0, 0);

	// Emit
	if (GroupThreadIndex < REDUCE_TILE_COUNT * REDUCE_TILE_COUNT)
	{
		// *2 to to multiply to radius to diameter
		// / sqrt(3) to be conservative for a cube.
		const float WorldRadiusCompareMultiplier = 2.0 * rsqrt(3.0);

		const uint MaxInputProbePerReduceTile = PROBE_HIERARCHY_MAX_EMIT_PER_TILE * REDUCE_TILE_SIZE * REDUCE_TILE_SIZE;

		uint ReduceTileId = GroupThreadIndex;
		uint2 ReduceTileOffset = uint2(GroupThreadIndex % REDUCE_TILE_COUNT, GroupThreadIndex / REDUCE_TILE_COUNT);

		const uint ResumeIteration = 1;

		uint ProbeTileIndex = 0;
			
		uint Iteration = ResumeIteration;
		uint BrowsedPos = ~0;

		uint SampleCount = 0;
		float ClosestDepth = 0.0;
		float FurthestDepth = 0.0;
		float SmallestWorldRadius = 0.0;
		float TakenWorldRadius = 0.0;

		uint CompressedProbeArray[PROBE_HIERARCHY_MAX_EMIT_PER_TILE];
		{
			UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
			for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
			{
				CompressedProbeArray[EmitProbeIndex] = 0;
			}
		}

		LOOP
		while (Iteration > 0)
		{
			uint NewPos = uint(int(BrowsedPos) + int(Iteration));
			uint NewCompressedProbe = SharedProbeArray[NewPos + ReduceTileId * MaxInputProbePerReduceTile];

			float NewWorldDepth;
			float NewWorldRadius;
			UncompressProbeFromProbeMap(NewCompressedProbe, /* out */ NewWorldDepth, /* out */ NewWorldRadius);


			NewWorldRadius *= PROBE_HIERARCHY_HIERARCHY_EXPONENT;

			// Allow to increase from the minimum world radius by one hierarchy step.
			float FinalWorldRadius = clamp(NewWorldRadius, SmallestWorldRadius, SmallestWorldRadius);

			BRANCH
			if (NewWorldDepth == 0.0)
			{
				BrowsedPos = NewPos;
				Iteration = min(ResumeIteration, MaxInputProbePerReduceTile - 1 - BrowsedPos);
			}
			else if (SampleCount == 0) // && Iteration == 1)
			{
				FurthestDepth = NewWorldDepth;
				ClosestDepth = NewWorldDepth;
				SmallestWorldRadius = NewWorldRadius;
				TakenWorldRadius = NewWorldRadius;
				SampleCount = 1;
					
				BrowsedPos = NewPos;
				Iteration = min(ResumeIteration, MaxInputProbePerReduceTile - 1 - BrowsedPos);
			}
			else if ((NewWorldDepth - ClosestDepth) < (WorldRadiusCompareMultiplier * FinalWorldRadius)) // && SampleCount != 0)
			{
				FurthestDepth = NewWorldDepth; 
				TakenWorldRadius = FinalWorldRadius;
				SampleCount++;
					
				BrowsedPos = NewPos;
				Iteration = min(Iteration, MaxInputProbePerReduceTile - 1 - BrowsedPos);
			}
			//else if (Iteration > 1)
			//{
			//	Iteration = Iteration / 2;
			//}
			else
			{
				BRANCH
				if (ProbeTileIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE && SampleCount >= MIN_CHILD_COUNT)
				{
					float MiddleDepth = (ClosestDepth + FurthestDepth) * 0.5;
					CompressedProbeArray[ProbeTileIndex] = CompressProbeToProbeMap(MiddleDepth, TakenWorldRadius);
					ProbeTileIndex++;
				}

				ClosestDepth = NewWorldDepth;
				FurthestDepth = NewWorldDepth;
				SampleCount = 1;
				SmallestWorldRadius = NewWorldRadius;
				TakenWorldRadius = NewWorldRadius;
					
				BrowsedPos = NewPos;
				Iteration = min(ResumeIteration, MaxInputProbePerReduceTile - 1 - BrowsedPos);
			}
		}
		
		BRANCH
		if (ProbeTileIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE && SampleCount >= MIN_CHILD_COUNT)
		{
			float MiddleDepth = (ClosestDepth + FurthestDepth) * 0.5;
			CompressedProbeArray[ProbeTileIndex] = CompressProbeToProbeMap(MiddleDepth, TakenWorldRadius);
			ProbeTileIndex++;
		}
		
		InterlockedAdd(SharedParentTileCounters, ProbeTileIndex);
		
		// Output this 
		{
			uint2 ReduceTileCoord = GroupId * REDUCE_TILE_COUNT + ReduceTileOffset;

			UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
			for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
			{
				uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(ReduceTileCoord, EmitProbeIndex);
				ParentProbesOutput_0[ProbeStorageCoord] = CompressedProbeArray[EmitProbeIndex];
			}
		}
	}

	// TODO: try incrementing in texture directly instead to avoid the group sync?
	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadIndex == 0)
	{
		InterlockedAdd(ParentTileCountersOutput_0[EmitAtomicTileCoord], SharedParentTileCounters);
		
		//ParentTileCountersOutput_0[EmitAtomicTileCoord] = SharedParentTileCounters;
		//ParentTileCountersOutput_0[EmitAtomicTileCoord] = SharedInputTileCounters;
	}
	
	//DebugOutput[DispatchThreadId] = float4(SharedParentTileCounters, 0, 0, 0);
}
