// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"

#define GROUP_SIZE 8


//------------------------------------------------------- PARAMETERS

uint2 ParentTileCount;
uint2 ParentTileOffset;
uint2 TileCount;

Texture2D<float2> ParentTiledDepthBounds;
RWTexture2D<float2> TiledDepthBoundsOutput;


//------------------------------------------------------- FUNCTIONS

void ExtendDepthBounds(uint2 OutputTileCoord, uint2 SubTileOffset, inout float2 DepthBounds)
{
	int2 InputTileCoord = OutputTileCoord * 2 + SubTileOffset - ParentTileOffset;
	InputTileCoord = clamp(InputTileCoord, int2(0, 0), int2(ParentTileCount - 1));

	float2 NeighborDepthBounds = ParentTiledDepthBounds.Load(int3(InputTileCoord, 0));

	// Closest DeviceZ
	DepthBounds.x = max(DepthBounds.x, NeighborDepthBounds.x);

	// Furthest DeviceZ
	DepthBounds.y = min(DepthBounds.y, NeighborDepthBounds.y);
}


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 OutputTileCoord = DispatchThreadId;

	float2 DepthBounds = float2(0.0, 1.0);
	ExtendDepthBounds(OutputTileCoord, uint2(0, 0), /* inout */ DepthBounds);
	ExtendDepthBounds(OutputTileCoord, uint2(1, 0), /* inout */ DepthBounds);
	ExtendDepthBounds(OutputTileCoord, uint2(0, 1), /* inout */ DepthBounds);
	ExtendDepthBounds(OutputTileCoord, uint2(1, 1), /* inout */ DepthBounds);

	if (all(OutputTileCoord < TileCount))
	{
		TiledDepthBoundsOutput[OutputTileCoord] = DepthBounds;
	}
}
