// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"
#include "../../SceneTextureParameters.ush"
#include "../../ShadingModelsSampling.ush"
#include "../../Random.ush"


#define SAMPLE_BATCH_SIZE 4


//------------------------------------------------------- PARAMETERS

uint SamplePerPixel;

Texture2D<uint> ResolvedProbeIndexes;
Texture2D<uint> DiffuseSampleMaskTexture;
Texture2D<uint> SpecularSampleMaskTexture;

globallycoherent RWStructuredBuffer<FProbeInfo> ProbeArrayInout;
RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- FUNCTIONS

uint ComputeDirectionMask(float3 L)
{
	uint Axis = 2;
	if (abs(L.x) >= abs(L.y) && abs(L.x) >= abs(L.z))
	{
		Axis = 0;
	}
	else if (abs(L.y) > abs(L.z))
	{
		Axis = 1;
	}
	uint FaceIndex = Axis * 2;


	L = Axis == 0 ? L.yzx : L;
	L = Axis == 1 ? L.xzy : L;

	FaceIndex += L.z > 0 ? 0 : 1;

	L.xy *= rcp(L.z);

	const uint MaskResolution = 2;
	uint2 DirectionMaskTexelCoord = uint2(floor(L.xy * (PROBE_MASK_RESOLUTION * 0.5) + PROBE_MASK_RESOLUTION * 0.5));

	uint DirectionMaskBitId = FaceIndex * (PROBE_MASK_RESOLUTION * PROBE_MASK_RESOLUTION) + dot(DirectionMaskTexelCoord, uint2(1, PROBE_MASK_RESOLUTION));

	return 0x1u << DirectionMaskBitId;
}


//------------------------------------------------------- ENTRY POINT

[numthreads(PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	bool bIsValidViewPixel = all(uint2(DispatchThreadId) < uint2(View.ViewSizeAndInvSize.xy));

	float2 SceneBufferUV = (DispatchThreadId + 0.5) * View.BufferSizeAndInvSize.zw;
	SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	
	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);
		
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(SceneBufferUV);
	bool bComputeIndirectLighting = ShouldComputeIndirectLighting(GBuffer.ShadingModelID);

	float4 ClipPosition = float4(ScreenPosition * (View.ViewToClip[3][3] < 1.0f ? GBuffer.Depth : 1.0f), GBuffer.Depth, 1);
	float3 TranslatedWorldPosition = mul(ClipPosition, View.ScreenToTranslatedWorld).xyz;
	float3 V = normalize(View.TranslatedWorldCameraOrigin - TranslatedWorldPosition);
	
	float Roughness = GBuffer.Roughness;
	float a2 = Pow4(Roughness);

	bool bAdditionalSpecularRay = RequiresAdditionalSpecularRay(Roughness, GBuffer.ShadingModelID);

	// Select an Probe to sample.
	uint ProbeIndex = ResolvedProbeIndexes.Load(int3(DispatchThreadId, 0));

	if (ProbeIndex != PROBE_INVALID_INDEX && bIsValidViewPixel)
	{
		uint ProbeDirectionMask = 0x0;

		// Sample the Probe for diffuse.
		{
			const uint TermMask = SHADING_TERM_DIFFUSE | SHADING_TERM_HAIR_R | SHADING_TERM_HAIR_TT | SHADING_TERM_HAIR_TRT;

			uint FullResSampleMask = DiffuseSampleMaskTexture.Load(int3(DispatchThreadId, 0));

			LOOP
			for (uint PixelRayIndex = 0; PixelRayIndex < SamplePerPixel; PixelRayIndex += SAMPLE_BATCH_SIZE)
			{
				UNROLL_N(SAMPLE_BATCH_SIZE)
				for (uint BatchRayIndex = 0; BatchRayIndex < SAMPLE_BATCH_SIZE; BatchRayIndex++)
				{
					uint TracingRayIndex = PixelRayIndex + BatchRayIndex;

					float4 E = ComputeIndirectLightingSampleE(DispatchThreadId, TracingRayIndex, INDIRECT_SAMPLE_COUNT);

					FBxDFSample BxDFSample = SampleBxDF(TermMask, GBuffer, V, E);

					bool bAlreadySampled = (FullResSampleMask & (0x1u << (2 * TracingRayIndex))) != 0;

					if (!bAlreadySampled)
						ProbeDirectionMask |= ComputeDirectionMask(BxDFSample.L);
				}
			}
		}

		// Sample the probes for specular.
		if (bAdditionalSpecularRay)
		{
			uint FullResSampleMask = SpecularSampleMaskTexture.Load(int3(DispatchThreadId, 0));

			LOOP
			for (uint TracingRayIndex = 0; TracingRayIndex < 1; TracingRayIndex ++)
			{
				float4 E = ComputeIndirectLightingSampleE(DispatchThreadId, TracingRayIndex, INDIRECT_SAMPLE_COUNT);

				E = BiasBSDFImportantSample(E);

				FBxDFSample BxDFSample = SampleBxDF(SHADING_TERM_SPECULAR, GBuffer, V, E);

				bool bAlreadySampled = (FullResSampleMask & (0x1u << (2 * TracingRayIndex))) != 0;

				if (!bAlreadySampled)
					ProbeDirectionMask |= ComputeDirectionMask(BxDFSample.L);
			}
		}

		InterlockedOr(/* inout */ ProbeArrayInout[ProbeIndex].DirectionMask, ProbeDirectionMask);
	}
}
