// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

//------------------------------------------------------- INCLUDES

#include "LumenProbeOcclusion.ush"


//------------------------------------------------------- DEFAULTS FROM PASS SETTINGS

#ifndef CONFIG_WAVE_LAYOUT
	#error Unknown wave layout.
#endif

#ifndef CONFIG_IS_FIRST_PASS
	#define CONFIG_IS_FIRST_PASS 0
#endif


//------------------------------------------------------- CONFIG

#define CONFIG_RAY_COUNT (INDIRECT_SAMPLE_COUNT)

#if CONFIG_WAVE_LAYOUT == WAVE_LAYOUT_ONE_WAVE_PER_TILE
	#define TILE_PIXEL_SIZE_X (TRACING_CLASSIFICATION_TILE_SIZE)
	#define TILE_PIXEL_SIZE_Y (TRACING_CLASSIFICATION_TILE_SIZE)

#else
	#error Unknown wave layout

#endif

#if DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_UNLIT
	// NOP

#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_LIT
	#define CONFIG_FETCH_COMPRESSED_ROUGHNESS 1

#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_SIMPLE_SHADING
	#define CONFIG_FETCH_COMPRESSED_ROUGHNESS 1
	#define CONFIG_FETCH_COMPRESSED_SHADING_MODEL 1

#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_SIMPLE_SHADING_EXTRA_SPECULAR
	//#define CONFIG_FETCH_COMPRESSED_ROUGHNESS 1
	//#define CONFIG_FETCH_COMPRESSED_SHADING_MODEL 1
	#define CONFIG_CAST_SPECULAR_RAYS 1

#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_SIMPLE_SHADING_BENT_NORMAL
	#define CONFIG_FETCH_COMPRESSED_ROUGHNESS 1
	#define CONFIG_FETCH_COMPRESSED_SHADING_MODEL 1
	#define CONFIG_DIFFUSE_SAMPLE_OCCLUSION (GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION)
	#define CONFIG_CAST_SPECULAR_RAYS 1

#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_COMPLEX_SHADING_BENT_NORMAL
	#define CONFIG_DIFFUSE_SAMPLE_OCCLUSION (GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION)
	#define CONFIG_CAST_SPECULAR_RAYS 1

#else
	#error Unknown DIM_PROBE_OCCLUSION_CLASSIFICATION

#endif

#define TILE_PIXEL_COUNT (TILE_PIXEL_SIZE_X * TILE_PIXEL_SIZE_Y)
#define LANE_PER_GROUPS (TILE_PIXEL_COUNT * CONFIG_RAY_COUNT)


//------------------------------------------------------- DEFAULTS

#define CONFIG_FETCH_COMPRESSED_DEPTH 1

#ifndef CONFIG_FETCH_COMPRESSED_ROUGHNESS
#define CONFIG_FETCH_COMPRESSED_ROUGHNESS 0
#endif

#ifndef CONFIG_FETCH_COMPRESSED_SHADING_MODEL
#define CONFIG_FETCH_COMPRESSED_SHADING_MODEL 0
#endif

#ifndef CONFIG_DIFFUSE_SAMPLE_OCCLUSION
#define CONFIG_DIFFUSE_SAMPLE_OCCLUSION 0
#endif


//------------------------------------------------------- ENUMS


//------------------------------------------------------- PARAMETERS

uint TileListMaxLength;
uint MaxTilePerDispatch;
uint DispatchOffset;
uint EnableBentNormal;

Texture2D<float> ProbeOcclusionDistanceTexture;

StructuredBuffer<uint> TileListBuffer;
Buffer<uint> GlobalClassificationCountersBuffer;

Texture2D<float> CompressedDepthTexture;
Texture2D<float4> CompressedRoughnessTexture;
Texture2D<uint> CompressedShadingModelTexture;

RWTexture2D<float3>	DiffuseLightingOutput;
RWTexture2D<uint>	DiffuseSampleMaskOutput;
RWTexture2D<float3>	SpecularLightingOutput;
RWTexture2D<uint>	SpecularSampleMaskOutput;

globallycoherent RWCoherentBuffer(uint) DispatchParametersOutput;


//------------------------------------------------------- LDS

groupshared uint SharedMemory0[LANE_PER_GROUPS];
groupshared uint SharedMemory1[LANE_PER_GROUPS];
groupshared uint SharedMemory2[LANE_PER_GROUPS];
groupshared uint SharedMemory3[LANE_PER_GROUPS];
groupshared uint SharedMemory4[LANE_PER_GROUPS];


//------------------------------------------------------- FUNCTIONS

uint CompressN(float3 N)
{
	// matches 8bits GBuffer A to be lossless.
	uint3 K = uint3(saturate(N * 0.5 + 0.5) * 255.0);
	return uint(K.x << 0 | K.y << 8 | K.z << 16);
}

float3 DecompressN(uint EncodedN)
{
	uint3 K;
	K.x = (EncodedN >> 0) & 0xFF;
	K.y = (EncodedN >> 8) & 0xFF;
	K.z = (EncodedN >> 16) & 0xFF;

	return normalize(float3(K) * (2.0 / 255.0) - 1.0);
}

uint2 DecodeGroupPixelOffset(uint GroupPixelId)
{
	return uint2(GroupPixelId % TILE_PIXEL_SIZE_X, (GroupPixelId / TILE_PIXEL_SIZE_X) % TILE_PIXEL_SIZE_Y);
}

uint EncodeGroupPixelOffset(uint2 GroupPixelOffset)
{
	return GroupPixelOffset.x | (GroupPixelOffset.y * TILE_PIXEL_SIZE_X);
}

uint2 ComputePixelPosition(uint2 GroupOffset, uint2 GroupPixelOffset)
{
	return GroupOffset * uint2(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y) + GroupPixelOffset;
}

void UpdateLane2DCoordinateInformations(
	uint2 PixelPosition,
	out float2 BufferUV,
	out float2 ScreenPos)
{
	float2 FullResPixelPosition = PixelPosition; // *PixelPositionToFullResPixel + FullResPixelOffset;

	// TODO: split screen
	BufferUV = FullResPixelPosition * View.BufferSizeAndInvSize.zw;
	ScreenPos = ViewportUVToScreenPos(FullResPixelPosition * View.ViewSizeAndInvSize.zw);
}

float3 ComputeTranslatedWorldPositions(float2 ScreenPos, float SceneDepth)
{
	return mul(float4(ScreenPos * SceneDepth, SceneDepth, 1), View.ScreenToTranslatedWorld).xyz;
}

uint2 ComputePixelPosition(float3 TranslatedWorldPosition)
{
	float4 ClipPosition = mul(float4(TranslatedWorldPosition, 1), View.TranslatedWorldToClip);
	float2 ScreenPos = ClipPosition.xy * rcp(ClipPosition.w);
	float2 ViewportUV = ScreenPosToViewportUV(ScreenPos);
	return uint2(ViewportUV * View.ViewSizeAndInvSize.xy);
}

float ComputeSceneDepth(float3 TranslatedWorldPosition)
{
	// TODO: do everything in view space instead of world space?
	return mul(float4(TranslatedWorldPosition, 1.0), View.TranslatedWorldToView).z;
}

FGBufferData FetchGBufferDataForProbeOcclusion(float2 BufferUV, out float DeviceZ)
{
	float4 GBufferA = GBufferATexture.SampleLevel(GBufferATextureSampler, BufferUV, 0);
	float4 GBufferB = GBufferBTexture.SampleLevel(GBufferBTextureSampler, BufferUV, 0);
	float4 GBufferC = GBufferCTexture.SampleLevel(GBufferCTextureSampler, BufferUV, 0);
	float4 GBufferD = GBufferDTexture.SampleLevel(GBufferDTextureSampler, BufferUV, 0);
	float4 GBufferE = GBufferETexture.SampleLevel(GBufferETextureSampler, BufferUV, 0);
#if GBUFFER_HAS_TANGENT
	float4 GBufferF = GBufferFTexture.SampleLevel(GBufferFTextureSampler, UV, 0);
#else
	float4 GBufferF = 0.5f;
#endif
	float4 GBufferVelocity = GBufferVelocityTexture.SampleLevel(GBufferVelocityTextureSampler, BufferUV, 0);

	uint CustomStencil = 0;
	float CustomNativeDepth = 0;

	uint2 TexelCoord = BufferUV * View.BufferSizeAndInvSize.xy;

	#if CONFIG_FETCH_COMPRESSED_DEPTH
		DeviceZ = CompressedDepthTexture[TexelCoord];
	#else
		DeviceZ = SampleDeviceZFromSceneTextures(BufferUV);
	#endif

	float SceneDepth = ConvertFromDeviceZ(DeviceZ);

	bool bGetNormalizedNormal = true;
	FGBufferData GBuffer = DecodeGBufferData(GBufferA, GBufferB, GBufferC, GBufferD, GBufferE, GBufferF, GBufferVelocity, CustomNativeDepth, CustomStencil, SceneDepth, bGetNormalizedNormal, CheckerFromSceneColorUV(BufferUV));

	#if CONFIG_FETCH_COMPRESSED_ROUGHNESS
		GBuffer.Roughness = CompressedRoughnessTexture[TexelCoord].r;
	#endif

	#if DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_LIT
		GBuffer.ShadingModelID = SHADINGMODELID_DEFAULT_LIT;
	#elif CONFIG_FETCH_COMPRESSED_SHADING_MODEL
		GBuffer.ShadingModelID = CompressedShadingModelTexture[TexelCoord];
	#endif

	return GBuffer;
} // FetchGBufferDataForProbeOcclusion()

#if defined(DIM_PROBE_OCCLUSION_CLASSIFICATION)

FTracingRayInfos ComputeRayInfos(FTracingPixelInfos PixelInfos, float ProbeOcclusionDistance, float4 E)
{
	FTracingRayInfos RayInfos;

	#if DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_COMPLEX_SHADING_BENT_NORMAL
	{
		const uint kClampingBoxSize = 3;

		const uint TermMask = SHADING_TERM_DIFFUSE | SHADING_TERM_HAIR_R | SHADING_TERM_HAIR_TT | SHADING_TERM_HAIR_TRT;
		RayInfos.BxDFSample = SampleBxDF(TermMask, PixelInfos.GBuffer, PixelInfos.V, E);
		RayInfos.bIsInfinitRay = false;
		RayInfos.TMax = ProbeOcclusionDistance;
		RayInfos.ConeHalfAngle = 0.5 * RayPDFToConeAngle(RayInfos.BxDFSample.PDF, CONFIG_RAY_COUNT);
	}
	#else
	{
		const uint kClampingBoxSize = 3;

		RayInfos.BxDFSample = SampleDefaultLitBxDF(SHADING_TERM_DIFFUSE, PixelInfos.GBuffer, PixelInfos.V, E);
		RayInfos.bIsInfinitRay = false;
		RayInfos.TMax = ProbeOcclusionDistance;
		RayInfos.ConeHalfAngle = 0.5 * RayPDFToConeAngle(RayInfos.BxDFSample.PDF, CONFIG_RAY_COUNT);
	}
	#endif

	return RayInfos;
}

#endif // defined(DIM_PROBE_OCCLUSION_CLASSIFICATION)


//------------------------------------------------------- ENTRY POINT

// Setup compute shader.
#ifndef DIM_PROBE_OCCLUSION_CLASSIFICATION

[numthreads(PROBE_OCCLUSION_MAX, 1, 1)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint DispatchId = GroupId.x;
	uint DispatchOffset = DispatchId * MaxTilePerDispatch;

	uint TileClassification = GroupThreadIndex;

	uint TileCount = GlobalClassificationCountersBuffer[TileClassification];

	uint GroupPerTile;
	FLATTEN
	if (TileClassification == PROBE_OCCLUSION_UNLIT)
	{
		GroupPerTile = 1;
	}
	else
	{
		GroupPerTile = (TRACING_CLASSIFICATION_TILE_SIZE * TRACING_CLASSIFICATION_TILE_SIZE) / TILE_PIXEL_COUNT;
	}

	uint DispatchTileCount = uint(clamp(int(TileCount) - int(DispatchOffset), 0, int(MaxTilePerDispatch)));

	DispatchParametersOutput[DispatchId * (3 * PROBE_OCCLUSION_MAX) + 3 * TileClassification + 0] = GroupPerTile;
	DispatchParametersOutput[DispatchId * (3 * PROBE_OCCLUSION_MAX) + 3 * TileClassification + 1] = DispatchTileCount;
	DispatchParametersOutput[DispatchId * (3 * PROBE_OCCLUSION_MAX) + 3 * TileClassification + 2] = 1;
}

// Unlit tile that should clear the render targets.
#elif DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_UNLIT

[numthreads(TRACING_CLASSIFICATION_TILE_SIZE, TRACING_CLASSIFICATION_TILE_SIZE, 1)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint GroupPixelId = GroupThreadIndex;
	uint PackedGroupOffset = TileListBuffer[DispatchOffset + GroupId.y];
	uint2 GroupOffset = uint2(PackedGroupOffset & 0x0000FFFF, PackedGroupOffset >> 16);

	uint2 GroupPixelOffset = uint2(GroupPixelId % TRACING_CLASSIFICATION_TILE_SIZE, GroupPixelId / TRACING_CLASSIFICATION_TILE_SIZE);
	uint2 OutputPixelCoordinate = TRACING_CLASSIFICATION_TILE_SIZE * GroupOffset + GroupPixelOffset;

	DiffuseLightingOutput[OutputPixelCoordinate] = 0.0;
	DiffuseSampleMaskOutput[OutputPixelCoordinate] = 0x0;

	SpecularLightingOutput[OutputPixelCoordinate] = 0.0;
	SpecularSampleMaskOutput[OutputPixelCoordinate] = 0x0;
}

// One single lane per pixel.
#elif CONFIG_WAVE_LAYOUT == WAVE_LAYOUT_ONE_WAVE_PER_TILE

#define CONFIG_OPTIMISE_VGPR 0

#if DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_COMPLEX_SHADING_BENT_NORMAL
	// To much stuf in the gbuffer... hard to maintain up to date compression.
	#define COMPRESS_TRACING_PIXEL_INFOS 0
#else
	#define COMPRESS_TRACING_PIXEL_INFOS 0
#endif

FTracingPixelInfos UncompressPixelInfos(uint GroupThreadIndex, FTracingPixelInfos OriginalPixelInfos)
#if COMPRESS_TRACING_PIXEL_INFOS
{
	// Avoid storing the group thread index into VGPR.
	#if COMPILER_SUPPORTS_WAVE_ONCE
	ISOLATE
	{
		GroupThreadIndex = WaveGetLaneIndex();
	}
	#endif

	FTracingPixelInfos PixelInfos = (FTracingPixelInfos) 0;
	PixelInfos.TileId = OriginalPixelInfos.TileId;
	PixelInfos.GBuffer.Depth = OriginalPixelInfos.GBuffer.Depth;
	PixelInfos.GBuffer.Roughness = OriginalPixelInfos.GBuffer.Roughness;

	// Decompress some stuf from LDS.
	ISOLATE
	{
		PixelInfos.GBuffer.WorldNormal = DecompressN(SharedMemory0[GroupThreadIndex]);
		PixelInfos.GBuffer.ShadingModelID = SharedMemory0[GroupThreadIndex] >> 24;
		
		#if DIM_PROBE_OCCLUSION_CLASSIFICATION == PROBE_OCCLUSION_LIT
			PixelInfos.GBuffer.ShadingModelID = SHADINGMODELID_DEFAULT_LIT;
		#endif
	}

	// Compute derived infos
	ISOLATE
	{
		uint GroupPixelId = GroupThreadIndex;
		uint2 GroupPixelOffset = uint2(GroupPixelId % TRACING_CLASSIFICATION_TILE_SIZE, GroupPixelId / TRACING_CLASSIFICATION_TILE_SIZE);
		PixelInfos.PixelPosition = TRACING_CLASSIFICATION_TILE_SIZE * PixelInfos.TileId + GroupPixelOffset;

		UpdateLane2DCoordinateInformations(PixelInfos.PixelPosition, /* out */ PixelInfos.BufferUV, /* out */ PixelInfos.ScreenPos);

		PixelInfos.TranslatedWorldPosition = mul(float4(PixelInfos.ScreenPos * OriginalPixelInfos.GBuffer.Depth, PixelInfos.GBuffer.Depth, 1), View.ScreenToTranslatedWorld).xyz;
		PixelInfos.V = normalize(View.TranslatedWorldCameraOrigin - PixelInfos.TranslatedWorldPosition);
	}

	return PixelInfos;
}
#else
{
	return OriginalPixelInfos;
}
#endif

[numthreads(TRACING_CLASSIFICATION_TILE_SIZE, TRACING_CLASSIFICATION_TILE_SIZE, 1)]
void MainCS(
	uint3 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;

	bool bAdditionalSpecularRay;
	bool bTraceAnyRay;
	float ProbeOcclusionDistance;
	FTracingPixelInfos OriginalPixelInfos;
	{
		uint GroupPixelId = GroupThreadIndex;
		uint PackedGroupOffset = TileListBuffer[DispatchOffset + GroupId.y + DIM_PROBE_OCCLUSION_CLASSIFICATION * TileListMaxLength];
		OriginalPixelInfos.TileId = uint2(PackedGroupOffset & 0x0000FFFF, PackedGroupOffset >> 16);

		uint2 GroupPixelOffset = uint2(GroupPixelId % TRACING_CLASSIFICATION_TILE_SIZE, GroupPixelId / TRACING_CLASSIFICATION_TILE_SIZE);
		OriginalPixelInfos.PixelPosition = TRACING_CLASSIFICATION_TILE_SIZE * OriginalPixelInfos.TileId + GroupPixelOffset;

		UpdateLane2DCoordinateInformations(OriginalPixelInfos.PixelPosition, /* out */ OriginalPixelInfos.BufferUV, /* out */ OriginalPixelInfos.ScreenPos);

		float DeviceZ;
		OriginalPixelInfos.GBuffer = FetchGBufferDataForProbeOcclusion(OriginalPixelInfos.BufferUV, /* out */ DeviceZ);

		ProbeOcclusionDistance = ProbeOcclusionDistanceTexture[OriginalPixelInfos.PixelPosition].x;

		bTraceAnyRay = SupportsSampleBxDF(OriginalPixelInfos.GBuffer.ShadingModelID) && ProbeOcclusionDistance != 0.0;

		#if CONFIG_CAST_SPECULAR_RAYS
			bAdditionalSpecularRay = RequiresAdditionalSpecularRay(OriginalPixelInfos.GBuffer.Roughness, OriginalPixelInfos.GBuffer.ShadingModelID);
		#else
			bAdditionalSpecularRay = false;
		#endif

		OriginalPixelInfos.TranslatedWorldPosition = mul(float4(OriginalPixelInfos.ScreenPos * OriginalPixelInfos.GBuffer.Depth, OriginalPixelInfos.GBuffer.Depth, 1), View.ScreenToTranslatedWorld).xyz;
		OriginalPixelInfos.V = normalize(View.TranslatedWorldCameraOrigin - OriginalPixelInfos.TranslatedWorldPosition);
		
		// Compressed some of the VGPRs
		#if COMPRESS_TRACING_PIXEL_INFOS
		{
			SharedMemory0[GroupThreadIndex] = CompressN(OriginalPixelInfos.GBuffer.WorldNormal) | (OriginalPixelInfos.GBuffer.ShadingModelID << 24);
		}
		#endif
	}

	// Load previously accumulated lighting channels
	uint DiffuseSampleMask = 0x0;
	uint SpecularSampleMask = 0x0;
	float3 DiffuseLighting = 0.0;
	float3 SpecularLighting = 0.0;
	{
		#if !CONFIG_IS_FIRST_PASS
		{
			DiffuseSampleMask = DiffuseSampleMaskOutput[OriginalPixelInfos.PixelPosition];

			#if CONFIG_CAST_SPECULAR_RAYS
			{
				SpecularSampleMask = SpecularSampleMaskOutput[OriginalPixelInfos.PixelPosition];
			}
			#endif
			
			DiffuseLighting = DiffuseLightingOutput[OriginalPixelInfos.PixelPosition] * CONFIG_RAY_COUNT;
			SpecularLighting = SpecularLightingOutput[OriginalPixelInfos.PixelPosition] * CONFIG_RAY_COUNT;
		}
		#elif CONFIG_DIFFUSE_SAMPLE_OCCLUSION
		{
			// Rays occluded from bent normal should have bHit=true and bFullyTraced=true
			UNROLL_N(INDIRECT_SAMPLE_COUNT)
			for (uint PixelRayIndex = 0; PixelRayIndex < INDIRECT_SAMPLE_COUNT; PixelRayIndex++)
			{
				bool bIsBentNormalOccluded = (OriginalPixelInfos.GBuffer.DiffuseIndirectSampleOcclusion & (1 << PixelRayIndex)) != 0;
				DiffuseSampleMask |= (bIsBentNormalOccluded && EnableBentNormal != 0) ? (0x3 << (2 * PixelRayIndex)) : 0;
			}
		}
		#endif
	}

	// Traces the rays.
	BRANCH
	if (bTraceAnyRay)
	{
		// Setup lane context.
		FTracingLaneCtx LaneCtx = InitTracingLaneCtx(OriginalPixelInfos);

		uint RemainingMask = (~DiffuseSampleMask) & 0x0000AAAA;

		// TODO: compress OriginalPixelInfos
		LOOP
		for (uint i = 0; i < CONFIG_RAY_COUNT; i++)
		{
			bool bTraceRay;
			uint RaySequenceId = 0;
			#if CONFIG_IS_FIRST_PASS
			{
				RaySequenceId = i;
				bTraceRay = ((DiffuseSampleMask & (0x2u << (2 * RaySequenceId))) == 0);
				
				#if !CONFIG_DIFFUSE_SAMPLE_OCCLUSION
				{
					bTraceRay = true;
				}
				#endif
			}
			#else
			{
				bTraceRay = (RemainingMask != 0x0);
				FLATTEN
				if (bTraceRay)
				{
					uint NextAvailableBit = uint(firstbitlow(RemainingMask));
					RemainingMask &= ~(0x1u << NextAvailableBit);
					RaySequenceId = NextAvailableBit / 2;
				}
				else
				{
					RaySequenceId = CONFIG_RAY_COUNT;
				}
			}
			#endif

			BRANCH
			if (bTraceRay)
			{
				FTracingPixelInfos PixelInfos = UncompressPixelInfos(GroupThreadIndex, OriginalPixelInfos);

				float4 E = ComputeIndirectLightingSampleE(PixelInfos.PixelPosition, RaySequenceId, CONFIG_RAY_COUNT);

				// Compute ray informations.
				FTracingRayInfos RayInfos = ComputeRayInfos(PixelInfos, ProbeOcclusionDistance, E);

				// Trace the ray.
				float3 RayLighting;
				bool bFullyTraced;
				bool bHit;
				TraceRay(
					LaneCtx, PixelInfos, RayInfos,
					/* out */ RayLighting,
					/* out */ bFullyTraced,
					/* out */ bHit);

				uint RaySampleMask = ((bHit ? 0x1u : 0x0u) | (bFullyTraced ? 0x2u : 0x0u)) << (2 * RaySequenceId);
				
				float RaySpecularWeight = ComputeSpecularRayFromDiffuseRayWeight(
					PixelInfos.GBuffer.WorldNormal, PixelInfos.V, RayInfos.BxDFSample.L, PixelInfos.GBuffer.Roughness);

				DiffuseSampleMask |= RaySampleMask;
				DiffuseLighting += RayLighting * RayInfos.BxDFSample.Weight;
				SpecularLighting += RayLighting * RaySpecularWeight;
			}
		} // for (uint i = 0; i < CONFIG_RAY_COUNT; i++)

		#if CONFIG_CAST_SPECULAR_RAYS
		BRANCH
		if (bAdditionalSpecularRay)
		{
			const uint RaySequenceId = 0;
			bool bTraceRay = ((SpecularSampleMask & (0x2u << (2 * RaySequenceId))) == 0);

			#if CONFIG_IS_FIRST_PASS && !CONFIG_DIFFUSE_SAMPLE_OCCLUSION
			{
				bTraceRay = true;
			}
			#endif
			
			BRANCH
			if (bTraceRay)
			{
				FTracingPixelInfos PixelInfos = UncompressPixelInfos(GroupThreadIndex, OriginalPixelInfos);

				float4 E = ComputeIndirectLightingSampleE(PixelInfos.PixelPosition, RaySequenceId, CONFIG_RAY_COUNT);
				
				E = BiasBSDFImportantSample(E);

				// Compute ray informations.
				FTracingRayInfos RayInfos;
				{
					float a2 = Pow4(PixelInfos.GBuffer.Roughness);

					#ifdef CONFIG_RAY_STEPS // TODO: is it really needed?
						const float WorldTMaxTightness = (1.0 + rcp(CONFIG_RAY_STEPS));
					#else
						const float WorldTMaxTightness = 1.0;
					#endif

					RayInfos.BxDFSample = SampleBxDF(SHADING_TERM_SPECULAR, PixelInfos.GBuffer, PixelInfos.V, E);
					RayInfos.TMax = ComputeMinimalProbeWorldRadiusAtDepth(PixelInfos.GBuffer.Depth) * WorldTMaxTightness;
					
					float SampleConeAngle = RayPDFToConeAngle(RayInfos.BxDFSample.PDF, /* TotalSamples = */ 8);

					float MajorRoughnessLobeAngle;
					float MinorRoughnessLobeAngle;
					ComputeSpecularLobeAngles(
						PixelInfos.V, PixelInfos.GBuffer.WorldNormal, PixelInfos.GBuffer.Roughness,
						/* out */ MajorRoughnessLobeAngle, /* out */ MinorRoughnessLobeAngle);

					const float MaxCubemapTexelAngle = (360 / (4 * PROBE_HIERARCHY_RESOLUTION)) * (PI / 180);
					const float MinCubemapTexelViewportRadius = LobeAngleToViewportRadius(MaxCubemapTexelAngle) * sqrt(2);

					RayInfos.bIsInfinitRay = SampleConeAngle < MaxCubemapTexelAngle || PixelInfos.GBuffer.Roughness < 0.05;
					RayInfos.TMax = RayInfos.bIsInfinitRay ? 1000000  : RayInfos.TMax;
					RayInfos.ConeHalfAngle = 0.5 * SampleConeAngle;
				}

				// Trace the ray.
				float3 RaySpecularLighting;
				bool bFullyTraced;
				bool bHit;
				TraceRay(
					LaneCtx, PixelInfos, RayInfos,
					/* out */ RaySpecularLighting,
					/* out */ bFullyTraced,
					/* out */ bHit);

				uint RaySampleMask = ((bHit ? 0x1u : 0x0u) | (bFullyTraced ? 0x2u : 0x0u)) << (2 * RaySequenceId);
				
				float RaySpecularWeight = 1.0; ComputeSpecularRayFromDiffuseRayWeight(
					PixelInfos.GBuffer.WorldNormal, PixelInfos.V, RayInfos.BxDFSample.L, PixelInfos.GBuffer.Roughness);

				SpecularSampleMask |= RaySampleMask;
				SpecularLighting += RaySpecularLighting * RaySpecularWeight;
			}
		}
		#endif
	}
	
	{
		DiffuseLighting *= rcp(float(CONFIG_RAY_COUNT));
		SpecularLighting *= rcp(float(CONFIG_RAY_COUNT));
	}

	// Output to UAV.
	{
		// TODO: decompression.
		FTracingPixelInfos PixelInfos = UncompressPixelInfos(GroupThreadIndex, OriginalPixelInfos);

		float3 TranslatedWorldPosition = PixelInfos.TranslatedWorldPosition;

		#if CONFIG_OPTIMISE_VGPR
			uint2 OutputPixelCoordinate = ComputePixelPosition(PixelInfos.TranslatedWorldPosition);
		#else
			uint2 OutputPixelCoordinate = PixelInfos.PixelPosition;
		#endif

		DiffuseLightingOutput[OutputPixelCoordinate] = DiffuseLighting;
		DiffuseSampleMaskOutput[OutputPixelCoordinate] = DiffuseSampleMask;

		SpecularLightingOutput[OutputPixelCoordinate] = SpecularLighting;

		#if CONFIG_CAST_SPECULAR_RAYS
		{
			SpecularSampleMaskOutput[OutputPixelCoordinate] = SpecularSampleMask;
		}
		#endif

		#if DEBUG_OUTPUT
			DebugOutput[OutputPixelCoordinate] = Debug;
		#endif
	}
} // MainCS()

#else
#error Fix me

#endif
