// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"

#define GROUP_SIZE 8
#define Z_ORDER 1


//------------------------------------------------------- PARAMETERS

uint2 EmitTileCount;
uint2 TilePixelOffset;

Texture2D<uint> ProjectedProbes;
Texture2D<uint> EmitAtomicTileProbeOffsets;

RWTexture2D<uint> ProbeListPerEmitTileOutput;
RWStructuredBuffer<FProbeInfo> ProbeArrayOutput;
RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- LDS

#if Z_ORDER

groupshared uint SharedEmitTileCount[GROUP_SIZE * GROUP_SIZE];

#else

groupshared uint SharedAtomicTileProbeOffset;

#endif


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	#if Z_ORDER
	{
		// NOP
	}
	#else
	{
		if (GroupThreadIndex == 0)
		{
			SharedAtomicTileProbeOffset = 0;
		}
		
		GroupMemoryBarrierWithGroupSync();
	}
	#endif
	
	uint2 EmitTileOffset = 0;
	#if Z_ORDER
	{
		EmitTileOffset = ZOrder2D(GroupThreadIndex, log2(GROUP_SIZE));
	}
	#else
	{
		EmitTileOffset = uint2(GroupThreadIndex % GROUP_SIZE, GroupThreadIndex / GROUP_SIZE);
	}
	#endif

	uint2 EmitTileCoord = GroupId * GROUP_SIZE + EmitTileOffset;
	uint2 EmitAtomicTileCoord = GroupId;

	bool bIsValidEmitTile = all(EmitTileCoord < EmitTileCount);

	FHierarchyLevelParameters HierarchyLevel = GetPassProbeHierarchyLevelParameters();

	float2 CenterSceneBufferUV = float2(int2(((EmitTileCoord * PROBE_HIERARCHY_EMIT_TILE_SIZE + PROBE_HIERARCHY_EMIT_TILE_SIZE / 2) << HierarchyLevel.Id) - TilePixelOffset)) * View.BufferSizeAndInvSize.zw;
	CenterSceneBufferUV = clamp(CenterSceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	
	float2 CenterViewportUV = BufferUVToViewportUV(CenterSceneBufferUV);
	float2 CenterScreenPosition = ViewportUVToScreenPos(CenterViewportUV);

	uint EmitProbeCount = 0;
	uint CompressedProbe[PROBE_HIERARCHY_MAX_EMIT_PER_TILE];

	// fetch the current probes
	{
		UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
			CompressedProbe[EmitProbeIndex] = ProjectedProbes.Load(int3(ProbeStorageCoord, 0));

			FLATTEN
			if (CompressedProbe[EmitProbeIndex])
			{
				EmitProbeCount = EmitProbeIndex + 1;
			}
		}
	}
	
	// Clear data if sampled invalid.
	if (!bIsValidEmitTile)
	{
		UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			CompressedProbe[EmitProbeIndex] = 0;
		}

		EmitProbeCount = 0;
	}
	
	uint AtomicTileProbeOffset = EmitAtomicTileProbeOffsets[EmitAtomicTileCoord];
	uint TileProbeOffset = 0;
	#if Z_ORDER
	{
		SharedEmitTileCount[GroupThreadIndex] = EmitProbeCount;

		GroupMemoryBarrierWithGroupSync();

		UNROLL_N(GROUP_SIZE * GROUP_SIZE)
		for (uint i = 0; i < GROUP_SIZE * GROUP_SIZE; i++)
		{
			TileProbeOffset += (i < GroupThreadIndex) ? SharedEmitTileCount[i] : 0;
		}
	}
	#else
	{
		InterlockedAdd(SharedAtomicTileProbeOffset, EmitProbeCount, /* out */ TileProbeOffset);
	}
	#endif

	// Output probes in the array
	uint ProbeIndexes[PROBE_HIERARCHY_MAX_EMIT_PER_TILE];
	{
		UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			uint ProbeIndex;
			BRANCH
			if (CompressedProbe[EmitProbeIndex])
			{
				float WorldDepth;
				float WorldRadius;
				UncompressProbeFromProbeMap(CompressedProbe[EmitProbeIndex], /* out */ WorldDepth, /* out */ WorldRadius);

				//float DeviceZ = f16tof32(CompressedProbe[EmitProbeIndex] >> 16);

				float4 CenterClipPosition = float4(CenterScreenPosition * (View.ViewToClip[3][3] < 1.0f ? WorldDepth : 1.0f), WorldDepth, 1);
				
				//if (EmitProbeIndex == 0)
				//{
				//	DebugOutput[EmitTileCoord] = float4(CenterScreenPosition * 0.5 + 0.5, DeviceZ, 0);
				//}

				FProbeInfo ProbeInfo;
				ProbeInfo.TranslatedWorldPosition = mul(CenterClipPosition, View.ScreenToTranslatedWorld).xyz;
				ProbeInfo.WorldRadius = WorldRadius;

				// Initialize
				ProbeInfo.WorldTMax = WorldRadius * CounterParrallaxError * PROBE_HIERARCHY_HIERARCHY_EXPONENT;

				ProbeInfo.DirectionMask = 0x0;
				ProbeInfo._Padding[0] = 0;
				ProbeInfo._Padding[1] = 0;

				ProbeIndex = HierarchyLevel.ProbeArrayOffset + AtomicTileProbeOffset + TileProbeOffset + EmitProbeIndex;

				ProbeArrayOutput[ProbeIndex] = ProbeInfo;
			}
			else
			{
				ProbeIndex = PROBE_INVALID_INDEX;
			}

			ProbeIndexes[EmitProbeIndex] = ProbeIndex;
		}
	}
	
	//DebugOutput[EmitTileCoord] = float4(EmitProbeCount, 0, 0, 0);

	// Output the lsit of probe indexes for this emit tile
	if (bIsValidEmitTile)
	{
		UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
			ProbeListPerEmitTileOutput[ProbeStorageCoord] = ProbeIndexes[EmitProbeIndex];
		}
	}
}
