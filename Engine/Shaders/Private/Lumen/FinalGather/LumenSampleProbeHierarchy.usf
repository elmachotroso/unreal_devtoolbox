// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#define USE_HAIR_COMPLEX_TRANSMITTANCE 1

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"
#include "../../SceneTextureParameters.ush"
#include "../../DeferredShadingCommon.ush"
#include "../../MonteCarlo.ush"
#include "../../Random.ush"


#define DEBUG_IGNORE_PREVIOUS_TRACING 0

#define DEBUG_NEAREST_PROBE 0

#define SAMPLE_BATCH_SIZE 4


//------------------------------------------------------- PARAMETERS

float2 FinalProbeAtlasPixelSize;
uint SamplePerPixel;
float fSamplePerPixel;
float fInvSamplePerPixel;
uint DiffuseIndirectMipLevel;

Texture2D FinalProbeAtlas;

Texture2D<uint> ResolvedProbeIndexes;

Texture2D<uint> DiffuseSampleMaskTexture;
Texture2D<uint> SpecularSampleMaskTexture;


Texture2D<float> CompressedDepthTexture;

RWTexture2D<float4> DiffuseLightingOutput;
RWTexture2D<float4> SpecularLightingOutput;
RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float2 SceneBufferUV = (DispatchThreadId + 0.5) * View.BufferSizeAndInvSize.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}
	
	//float3 Rand = float3(
	//	InterleavedGradientNoise(DispatchThreadId + 0.5, Seed),
	//	InterleavedGradientNoise(PixelCoord.xy, Seed * 117),
	//	InterleavedGradientNoise(PixelCoord.xy, Seed * 7901));

	FHierarchyLevelParameters HierarchyLevel = GetPassProbeHierarchyLevelParameters();

	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);
		
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(SceneBufferUV);

#if 1
	GBuffer.Depth = ConvertFromDeviceZ(CompressedDepthTexture[DispatchThreadId]);
#endif

	bool bComputeIndirectLighting = ShouldComputeIndirectLighting(GBuffer.ShadingModelID);

	float4 ClipPosition = float4(ScreenPosition * (View.ViewToClip[3][3] < 1.0f ? GBuffer.Depth : 1.0f), GBuffer.Depth, 1);
	float3 TranslatedWorldPosition = mul(ClipPosition, View.ScreenToTranslatedWorld).xyz;
	float3 V = normalize(View.TranslatedWorldCameraOrigin - TranslatedWorldPosition);

	float Roughness = GBuffer.Roughness;
	float a2 = Pow4(Roughness);
	
	// Select an Probe to sample.
	uint ProbeIndex = ResolvedProbeIndexes.Load(int3(DispatchThreadId, 0));

	bool bValidProbeIndex = ProbeIndex != PROBE_INVALID_INDEX;
	bool bAdditionalSpecularRay = RequiresAdditionalSpecularRay(Roughness, GBuffer.ShadingModelID);

	float3 DiffuseLighting = DiffuseLightingOutput[DispatchThreadId].rgb;
	float3 SpecularLighting = SpecularLightingOutput[DispatchThreadId].rgb;
	uint FullResSampleMask = DiffuseSampleMaskTexture.Load(int3(DispatchThreadId, 0));
	uint SpecularSampleMask = SpecularSampleMaskTexture.Load(int3(DispatchThreadId, 0));

	#if DEBUG_IGNORE_PREVIOUS_TRACING
	{
		DiffuseLighting= 0;
		SpecularLighting = 0;
		FullResSampleMask = 0;
		SpecularSampleMask = 0;
	}
	#endif

	// Sample the Probe for diffuse.
	if (bValidProbeIndex)
	{
		DiffuseLighting *= fSamplePerPixel;
		SpecularLighting *= fSamplePerPixel;

		float SpecularRayWeightSum = 0;

		const uint TermMask = SHADING_TERM_DIFFUSE | SHADING_TERM_HAIR_R | SHADING_TERM_HAIR_TT | SHADING_TERM_HAIR_TRT;
		
		LOOP
		for (uint PixelRayIndex = 0; PixelRayIndex < SamplePerPixel; PixelRayIndex += SAMPLE_BATCH_SIZE)
		{
			UNROLL_N(SAMPLE_BATCH_SIZE)
			for (uint BatchRayIndex = 0; BatchRayIndex < SAMPLE_BATCH_SIZE; BatchRayIndex++)
			{
				uint TracingRayIndex = PixelRayIndex + BatchRayIndex;

				float4 E = ComputeIndirectLightingSampleE(DispatchThreadId, TracingRayIndex, INDIRECT_SAMPLE_COUNT);

				FBxDFSample BxDFSample = SampleBxDF(TermMask, GBuffer, V, E);

				float3 RayLuminance = SampleProbeHierarchy(
					FinalProbeAtlas,
					FinalProbeAtlasPixelSize,
					HierarchyLevel,
					FullResSampleMask, TracingRayIndex, ProbeIndex, BxDFSample.L,
					/* MipLevel = */ DiffuseIndirectMipLevel);

				DiffuseLighting += RayLuminance * BxDFSample.Weight;

				float RaySpecularWeight = ComputeSpecularRayFromDiffuseRayWeight(GBuffer.WorldNormal, V, BxDFSample.L, Roughness);
				SpecularLighting += RayLuminance * RaySpecularWeight;
				SpecularRayWeightSum += RaySpecularWeight;
			}
		}

		DiffuseLighting *= fInvSamplePerPixel;

		#if GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION
		{
			// Diffuse occlusion from the material's bent normal
			float DiffuseMaterialBentNormalOcclusion = GBuffer.GBufferAO;

			DiffuseLighting *= AOMultiBounce(GBuffer.BaseColor, DiffuseMaterialBentNormalOcclusion) * (DiffuseMaterialBentNormalOcclusion > 0.0 ? rcp(DiffuseMaterialBentNormalOcclusion) : 0.0);
		}
		#endif

		// Sample the probes for specular.
		BRANCH
		if (bAdditionalSpecularRay)
		{
			LOOP
			for (uint TracingRayIndex = 0; TracingRayIndex < 1; TracingRayIndex++)
			{
				float4 E = ComputeIndirectLightingSampleE(DispatchThreadId, TracingRayIndex, INDIRECT_SAMPLE_COUNT);
				
				E = BiasBSDFImportantSample(E);

				FBxDFSample BxDFSample = SampleBxDF(SHADING_TERM_SPECULAR, GBuffer, V, E);

				float3 RayLuminance = SampleProbeHierarchy(
					FinalProbeAtlas,
					FinalProbeAtlasPixelSize,
					HierarchyLevel,
					SpecularSampleMask, TracingRayIndex, ProbeIndex, BxDFSample.L,
					/* MipLevel = */ 0);

				float RaySpecularWeight = 1.0;
				SpecularLighting += RayLuminance * RaySpecularWeight;
				SpecularRayWeightSum += RaySpecularWeight;
			}
		}
		
		float InvSpecularRayWeightSum = SpecularRayWeightSum > 0 ? rcp(SpecularRayWeightSum) : 0;
		SpecularLighting *= InvSpecularRayWeightSum;
	}

	DiffuseLightingOutput[DispatchThreadId] = float4(DiffuseLighting, 1.0);
	SpecularLightingOutput[DispatchThreadId] = float4(SpecularLighting, 1.0);
}
