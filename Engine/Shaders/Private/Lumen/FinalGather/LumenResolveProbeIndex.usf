// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"
#include "../../SceneTextureParameters.ush"
#include "../../DeferredShadingCommon.ush"
#include "../../MonteCarlo.ush"
#include "../../Random.ush"


#define DEBUG_NEAREST_PROBE 0


//------------------------------------------------------- PARAMETERS

uint2 GlobalEmitTileClassificationOffset;

StructuredBuffer<uint> ProbePerResolveTiles;

RWTexture2D<uint> ResolvedIndexesOutput;
RWTexture2D<float> ProbeOcclusionDistanceOutput;
RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- LDS

groupshared float3 SharedProbeTranslatedWorldPosition[MAX_PROBE_HIERARCHY_PER_TILE];
groupshared float SharedProbeWorldRadius[MAX_PROBE_HIERARCHY_PER_TILE];
groupshared float SharedProbeIndex[MAX_PROBE_HIERARCHY_PER_TILE];


//------------------------------------------------------- FUNCTIONS

void LoadProbeInfoFromLDS(uint ProbeTileIndex, out FProbeInfo ProbeInfo, out uint ProbeIndex)
{
	ProbeInfo.TranslatedWorldPosition = SharedProbeTranslatedWorldPosition[ProbeTileIndex];
	ProbeInfo.WorldRadius = SharedProbeWorldRadius[ProbeTileIndex];
	ProbeInfo.WorldTMax = 0.0; // unused
	ProbeInfo.DirectionMask = 0x0;
	ProbeInfo._Padding[0] = 0;
	ProbeInfo._Padding[1] = 0;

	ProbeIndex = SharedProbeIndex[ProbeTileIndex];
}

uint2 ComputeTileClassificationOffset(uint ParentTileSize, uint ChildTileSize)
{
	//return uint2(0, 0);
	return uint2(
		(GlobalEmitTileClassificationOffset.x % ParentTileSize) / ChildTileSize,
		(GlobalEmitTileClassificationOffset.y % ParentTileSize) / ChildTileSize);
}

uint ResolveTileCoordToTileIndex(uint2 ResolveTileCoord)
{
	return dot(ResolveTileCoord, uint2(1, ResolveTileStorageExtent.x));
}

uint ReadProbeIndexForTile(uint ResolveTileIndex, uint ProbeTileIndex)
{
	return ProbePerResolveTiles[(1 + MAX_PROBE_HIERARCHY_PER_TILE) * ResolveTileIndex + ProbeTileIndex];
}

uint ReadProbeCountForTile(uint ResolveTileIndex)
{
	return ReadProbeIndexForTile(ResolveTileIndex, MAX_PROBE_HIERARCHY_PER_TILE);
}

float ComputeProbeProbability(float3 TranslatedWorldPosition, float MostPreciseProbeRadius, FProbeInfo ProbeInfo)
{
	float WorldRadiusSquare = ProbeInfo.WorldRadius * ProbeInfo.WorldRadius;
	float InvWorldRadiusSquare = rcp(WorldRadiusSquare);

	float DistanceSquare = length2(ProbeInfo.TranslatedWorldPosition - TranslatedWorldPosition);

	float ProbePrecision = saturate((MostPreciseProbeRadius * MostPreciseProbeRadius) * InvWorldRadiusSquare);
	float Probability = ProbePrecision * exp(-5.0 * DistanceSquare * InvWorldRadiusSquare);


	// Skip this Probe if this is too far.
	FLATTEN
	if (DistanceSquare > WorldRadiusSquare)
	{
		Probability = 0.0;
	}

	return Probability;
}


//------------------------------------------------------- ENTRY POINT

[numthreads(PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint2 ResolveTileOffset = ComputeTileClassificationOffset(/* ParentTileSize = */ PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE, /* ChildTileSize = */ 1);

	int2 PixelCoord = DispatchThreadId - ResolveTileOffset;

	bool bIsValidViewPixel = all(uint2(PixelCoord) < uint2(View.ViewSizeAndInvSize.xy));

	float2 SceneBufferUV = (PixelCoord + 0.5) * View.BufferSizeAndInvSize.zw;
	SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	
	//float3 Rand = float3(
	//	InterleavedGradientNoise(DispatchThreadId + 0.5, Seed),
	//	InterleavedGradientNoise(PixelCoord.xy, Seed * 117),
	//	InterleavedGradientNoise(PixelCoord.xy, Seed * 7901));

	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);
		
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(SceneBufferUV);
	bool bComputeIndirectLighting = ShouldComputeIndirectLighting(GBuffer.ShadingModelID);

	float4 ClipPosition = float4(ScreenPosition * (View.ViewToClip[3][3] < 1.0f ? GBuffer.Depth : 1.0f), GBuffer.Depth, 1);
	float3 TranslatedWorldPosition = mul(ClipPosition, View.ScreenToTranslatedWorld).xyz;
	
	// Select an Probe to sample.
	uint SelectedProbeTileIndex = ~0;

	uint2 ResolveTileCoord = GroupId;
	uint ResolveTileIndex = ResolveTileCoordToTileIndex(ResolveTileCoord);

	// Load all probes into LDS.
	if (GroupThreadIndex < MAX_PROBE_HIERARCHY_PER_TILE)
	{
		uint ProbeTileIndex = GroupThreadIndex;

		uint ProbeIndex = ReadProbeIndexForTile(ResolveTileIndex, ProbeTileIndex);
		FProbeInfo ProbeInfo = ReadProbeInfo(ProbeIndex);

		SharedProbeTranslatedWorldPosition[ProbeTileIndex] = ProbeInfo.TranslatedWorldPosition;
		SharedProbeWorldRadius[ProbeTileIndex] = ProbeInfo.WorldRadius;
		SharedProbeIndex[ProbeTileIndex] = ProbeIndex;
	}

	GroupMemoryBarrierWithGroupSync();

	if (SupportsSampleBxDF(GBuffer.ShadingModelID) && bIsValidViewPixel)
	{
		float MostPreciseProbeRadius = ComputeMinimalProbeWorldRadiusAtDepth(GBuffer.Depth);

		const uint ProbeCount = ReadProbeCountForTile(ResolveTileIndex);

		float TotalProbability = 0.0;

		{
			LOOP
			for (uint ProbeTileIndex = 0; ProbeTileIndex < ProbeCount; ProbeTileIndex++)
			{
				uint ProbeIndex;
				FProbeInfo ProbeInfo;
				LoadProbeInfoFromLDS(ProbeTileIndex, /* out */ ProbeInfo, /* out */ ProbeIndex);

				float ProbeProbability = ComputeProbeProbability(TranslatedWorldPosition, MostPreciseProbeRadius, ProbeInfo);

				//if (ProbeTileIndex == 0)
				//{
				//	DebugOutput[PixelCoord] = float4(GetProbeScreenCoord(ProbeInfo) * 0.5 + 0.5, GetProbeDepth(ProbeInfo), 0);
				//}

				TotalProbability += ProbeProbability;
			}
		}
		
		float PixelDesiredRand = TotalProbability * InterleavedGradientNoise(PixelCoord + 0.5, View.StateFrameIndexMod8);
		
		//DebugOutput[PixelCoord] = float4(bFailed ? 1.0 : 0.0, ProbeCount, TotalProbability, 0);

		LOOP
		for (uint ProbeTileIndex = 0; ProbeTileIndex < ProbeCount; ProbeTileIndex++)
		{
			uint ProbeIndex;
			FProbeInfo ProbeInfo;
			LoadProbeInfoFromLDS(ProbeTileIndex, /* out */ ProbeInfo, /* out */ ProbeIndex);

			float ProbeProbability = ComputeProbeProbability(TranslatedWorldPosition, MostPreciseProbeRadius, ProbeInfo);

			if (PixelDesiredRand < ProbeProbability && SelectedProbeTileIndex == ~0)
			{
				SelectedProbeTileIndex = ProbeTileIndex;
			}

			PixelDesiredRand -= ProbeProbability;
		}
	}
	
	float ProbeOcclusionDistance;
	uint SelectedProbeIndex;
	BRANCH
	if (SelectedProbeTileIndex != ~0)
	{
		uint ProbeIndex;
		FProbeInfo ProbeInfo;
		LoadProbeInfoFromLDS(SelectedProbeTileIndex, /* out */ ProbeInfo, /* out */ SelectedProbeIndex);

		ProbeOcclusionDistance = GetProbeTMin(ProbeInfo) + length(TranslatedWorldPosition - ProbeInfo.TranslatedWorldPosition);

		#if 0
		{
			//float WorldDistance = GetProbeTMin(ProbeInfo);
			float WorldDistance = ComputeMinimalProbeWorldRadiusAtDepth(GBuffer.Depth);

			float TheoricDistance = PROBE_HIERARCHY_MIN_PIXEL_RADIUS;
			float PixelDistance = ProjectWorldDistanceToPixelDistance(ProbeInfo, WorldDistance);

			DebugOutput[PixelCoord] = float4(ProbeOcclusionDistance, GetProbeTMin(ProbeInfo), PixelDistance / TheoricDistance, 0);
		}
		#endif
	}
	else
	{
		ProbeOcclusionDistance = 0.0;
		SelectedProbeIndex = PROBE_INVALID_INDEX;

		//DebugOutput[PixelCoord] = float4(0, 0, 0, 0);
	}

	if (bIsValidViewPixel)
	{
		ResolvedIndexesOutput[PixelCoord] = SelectedProbeIndex;
		ProbeOcclusionDistanceOutput[PixelCoord] = ProbeOcclusionDistance;
		
		//DebugOutput[PixelCoord] = float4(SelectedProbeIndex == PROBE_INVALID_INDEX ? 1 : 0, 0, 0, 0);
	}
}
