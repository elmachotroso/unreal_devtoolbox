// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"
#include "../../SceneTextureParameters.ush"
#include "../../DeferredShadingCommon.ush"


#define DEBUG_OUTPUT 0
#define RESOLVE_TILE_PER_EMIT_TILE (PROBE_HIERARCHY_EMIT_TILE_SIZE / PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE)


//------------------------------------------------------- PARAMETERS

uint2 TilePixelOffset;

RWTexture2D<uint> ProjectedProbesOutput;
RWTexture2D<uint> ProjectedTileCountersOutput;

RWTexture2D<float2> DepthMinMaxOutput_0;
RWTexture2D<float2> DepthMinMaxOutput_1;


#if DEBUG_OUTPUT
RWTexture2D<float4> DebugOutput;
#endif


//------------------------------------------------------- LDS

groupshared float SharedDepthArray[PROBE_HIERARCHY_EMIT_TILE_SIZE * PROBE_HIERARCHY_EMIT_TILE_SIZE];

groupshared uint SharedMip3FurthestDeviceZ[4];
groupshared uint SharedMip3ClosestDeviceZ[4];

groupshared uint SharedMip4ClosestDeviceZ;
groupshared uint SharedMip4FurthestDeviceZ;


//------------------------------------------------------- ENTRY POINT

[numthreads(PROBE_HIERARCHY_EMIT_TILE_SIZE, PROBE_HIERARCHY_EMIT_TILE_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	if (GroupThreadIndex == 0)
	{
		SharedMip4ClosestDeviceZ = asuint(0.0);
		SharedMip4FurthestDeviceZ = asuint(1.0);
	}

	if (GroupThreadIndex < 4)
	{
		SharedMip3ClosestDeviceZ[GroupThreadIndex] = asuint(0.0);
		SharedMip3FurthestDeviceZ[GroupThreadIndex] = asuint(1.0);
	}

	GroupMemoryBarrierWithGroupSync();

	uint2 EmitTileCoord = GroupId;
	uint2 EmitAtomicTileCoord = EmitTileCoordToEmitAtomicTileCoord(EmitTileCoord);

	float2 SceneBufferUV = (float2(int2(DispatchThreadId) - int2(TilePixelOffset)) + 0.5) * View.BufferSizeAndInvSize.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}

	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);

	float2 CenterSceneBufferUV = (GroupId * PROBE_HIERARCHY_EMIT_TILE_SIZE + PROBE_HIERARCHY_EMIT_TILE_SIZE / 2 + 0.5) * View.BufferSizeAndInvSize.zw;
	float2 CenterViewportUV = BufferUVToViewportUV(CenterSceneBufferUV);
	float2 CenterScreenPosition = ViewportUVToScreenPos(CenterViewportUV);
	
	// Sample scene textures.
	FGBufferData GBuffer = GetGBufferDataFromSceneTextures(SceneBufferUV);
	float DeviceZ = SampleDeviceZFromSceneTextures(SceneBufferUV);
	
	bool bComputeIndirectLighting = ShouldComputeIndirectLighting(GBuffer.ShadingModelID);

	{
		SharedDepthArray[GroupThreadIndex] = bComputeIndirectLighting ? ConvertFromDeviceZ(DeviceZ) : -1.0;

		if (bComputeIndirectLighting)
		{
			InterlockedMin(SharedMip4FurthestDeviceZ, asuint(DeviceZ));
			InterlockedMax(SharedMip4ClosestDeviceZ, asuint(DeviceZ));

			uint Mip3PixelIndex = dot(uint2(1, 2), (DispatchThreadId / 8) % 2);

			InterlockedMin(SharedMip3FurthestDeviceZ[Mip3PixelIndex], asuint(DeviceZ));
			InterlockedMax(SharedMip3ClosestDeviceZ[Mip3PixelIndex], asuint(DeviceZ));
		}
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	// Output
	{
		if (GroupThreadIndex == 0)
		{
			DepthMinMaxOutput_1[GroupId] = float2(
				asfloat(SharedMip4ClosestDeviceZ),
				asfloat(SharedMip4FurthestDeviceZ));
		}

		if (GroupThreadIndex < 4)
		{
			uint2 SubTileOffset = TilePixelOffset / 8;

			uint2 DestMip3Coord = GroupId * 2 + uint2(GroupThreadIndex % 2, GroupThreadIndex / 2) - SubTileOffset;

			if (all(DestMip3Coord != ~0))
			{
				DepthMinMaxOutput_0[DestMip3Coord] = float2(
					asfloat(SharedMip3ClosestDeviceZ[GroupThreadIndex]),
					asfloat(SharedMip3FurthestDeviceZ[GroupThreadIndex]));
			}
		}
	}

	// Early return if this tile doesn't have any indirect lighting.
	bool bComputeIndirectLightingOnTile = SharedMip4FurthestDeviceZ != asuint(1.0);
	if (!bComputeIndirectLightingOnTile)
	{
		UNROLL
		for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
		{
			uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
			ProjectedProbesOutput[ProbeStorageCoord] = CompressProbeToProbeMap(/* WorldDepth = */ 0.0, /* WorldRadius = */ 0.0);
		}

		#if DEBUG_OUTPUT
		{
			DebugOutput[DispatchThreadId] = float4(0, 0, 1, 0);
		}
		#endif
		return;
	}

	float TileClosestDepth = ConvertFromDeviceZ(asfloat(SharedMip4ClosestDeviceZ));
	float TileFurthestDepth = ConvertFromDeviceZ(asfloat(SharedMip4FurthestDeviceZ));

	// *2 to to multiply to radius to diameter
	// / sqrt(3) to be conservative for a cube.
	const float WorldRadiusCompareMultiplier = 2.0 * rsqrt(3.0);

	// If depth bounds are within the range of Probe based on the closest pixel, the just emit one Probe immediately
	float MiddleDepth = (TileFurthestDepth + TileClosestDepth) * 0.5;

	float MiddleWorldRadius = ComputeMinimalProbeWorldRadiusAtDepth(MiddleDepth);
	if (bComputeIndirectLightingOnTile && (TileFurthestDepth - TileClosestDepth) < WorldRadiusCompareMultiplier * MiddleWorldRadius)
	{
		if (GroupThreadIndex == 0)
		{
			float MiddleDepth = (TileFurthestDepth + TileClosestDepth) * 0.5;
			float4 CenterClipPosition = float4(CenterScreenPosition * (View.ViewToClip[3][3] < 1.0f ? MiddleDepth : 1.0f), MiddleDepth, 1);

			FProbeInfo ProbeInfo;
			ProbeInfo.TranslatedWorldPosition = mul(CenterClipPosition, View.ScreenToTranslatedWorld).xyz;
			ProbeInfo.WorldRadius = MiddleWorldRadius;
			
			InterlockedAdd(ProjectedTileCountersOutput[EmitAtomicTileCoord], 1);
			
			{
				uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, /* EmitProbeIndex = */ 0);
				ProjectedProbesOutput[ProbeStorageCoord] = CompressProbeToProbeMap(MiddleDepth, MiddleWorldRadius);
			}

			UNROLL
			for (uint EmitProbeIndex = 1; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
			{
				uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
				ProjectedProbesOutput[ProbeStorageCoord] = CompressProbeToProbeMap(/* WorldDepth = */ 0.0, /* WorldRadius = */ 0.0);
			}

			//UNROLL
			//for (uint SubResolveTileId = 0; SubResolveTileId < (RESOLVE_TILE_PER_EMIT_TILE * RESOLVE_TILE_PER_EMIT_TILE); SubResolveTileId++)
			//{
			//	uint2 TileCoord = GroupId * RESOLVE_TILE_PER_EMIT_TILE + uint2(SubResolveTileId % RESOLVE_TILE_PER_EMIT_TILE, SubResolveTileId / RESOLVE_TILE_PER_EMIT_TILE);
			//
			//	BRANCH
			//	if (IsValidTileCoord(TileCoord))
			//	{
			//		uint TileIndex = TileCoordToTileIndex(TileCoord);
			//		
			//		WriteProbeIndexForTile(TileIndex, 0, ProbeIndex);
			//		WriteProbeCountForTile(TileIndex, /* ProbeCount = */ 1);
			//	}
			//}
		}
		
		#if DEBUG_OUTPUT
		{
			DebugOutput[DispatchThreadId] = float4(0, 1, 0, 0);
		}
		#endif
	}
	//else if (0)
	//{
	//	//if (GroupThreadIndex == 0)
	//	//{
	//	//	uint TileIndex = TileCoordToTileIndex(GroupId * (PROBE_HIERARCHY_EMIT_TILE_SIZE / PROBE_HIERARCHY_TILE_CLASSIFICATION_SIZE));
	//	//
	//	//	WriteProbeCountForTile(TileIndex, /* ProbeCount = */ 0);
	//	//	WriteProbeCountForTile(TileIndex + 1, /* ProbeCount = */ 0);
	//	//	WriteProbeCountForTile(TileIndex + 0 + ResolveTileCount.x, /* ProbeCount = */ 0);
	//	//	WriteProbeCountForTile(TileIndex + 1 + ResolveTileCount.x, /* ProbeCount = */ 0);
	//	//}
	//}
	else
	{
		// Sort depths
		{
			float D = SharedDepthArray[GroupThreadIndex];
			
			UNROLL_N(8)
			for (uint i = 0; i < 8; i++)
			{
				bool bTakeMax = (GroupThreadIndex & (2u << i)) == 0;

				LOOP
				for (uint j = 0; j <= i; j++)
				{
					const uint SwapMask = 1u << (i - j);

					uint I1 = GroupThreadIndex ^ SwapMask;

					float D0 = D;
					float D1 = SharedDepthArray[I1];
					
					float DMax = max(D0, D1);
					float DMin = min(D0, D1);
					
					D = (((GroupThreadIndex & SwapMask) != 0) == bTakeMax) ? DMax : DMin;
					
					GroupMemoryBarrierWithGroupSync();

					SharedDepthArray[GroupThreadIndex] = D;
					
					GroupMemoryBarrierWithGroupSync();
				}
			}
		}
		
		#if DEBUG_OUTPUT
		{
			DebugOutput[DispatchThreadId] =
				float4(1, 0, 0, SharedDepthArray[GroupThreadIndex]);
		}
		#endif
		
		// Iterate over the sorted depth.
		if (GroupThreadIndex == 0)
		{
			const uint ResumeIteration = 64;

			uint ProbeTileIndex = 0;
			
			uint Iteration = ResumeIteration;
			uint BrowsedPos = ~0;

			uint SampleCount = 0;
			float ClosestDepth = 0.0;
			float FurthestDepth = 0.0;

			float ProbeDepthArray[PROBE_HIERARCHY_MAX_EMIT_PER_TILE];
			{
				UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
				for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
				{
					ProbeDepthArray[EmitProbeIndex] = 0.0;
				}
			}

			LOOP
			while (Iteration > 0)
			{
				uint NewPos = uint(int(BrowsedPos) + int(Iteration));
				float NewDepth = SharedDepthArray[NewPos];

				float TempMiddleDepth = (NewDepth + ClosestDepth) * 0.5;
				float TempWorldRadius = ComputeMinimalProbeWorldRadiusAtDepth(TempMiddleDepth);

				BRANCH
				if (NewDepth < 0.0)
				{
					BrowsedPos = NewPos;
				}
				else if (SampleCount == 0 && Iteration == 1)
				{
					FurthestDepth = NewDepth;
					ClosestDepth = NewDepth;
					SampleCount = 1;
					
					BrowsedPos = NewPos;
					Iteration = min(ResumeIteration, PROBE_HIERARCHY_EMIT_TILE_SIZE * PROBE_HIERARCHY_EMIT_TILE_SIZE - 1 - BrowsedPos);
				}
				else if (SampleCount != 0 && (NewDepth - ClosestDepth) < (WorldRadiusCompareMultiplier * TempWorldRadius))
				{
					FurthestDepth = NewDepth; 
					SampleCount++;
					
					BrowsedPos = NewPos;
					Iteration = min(Iteration, PROBE_HIERARCHY_EMIT_TILE_SIZE * PROBE_HIERARCHY_EMIT_TILE_SIZE - 1 - BrowsedPos);
				}
				else if (Iteration > 1)
				{
					Iteration = Iteration / 2;
				}
				else
				{
					BRANCH
					if (ProbeTileIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
					{
						float MiddleDepth = (FurthestDepth + ClosestDepth) * 0.5;
						ProbeDepthArray[ProbeTileIndex] = MiddleDepth;
						ProbeTileIndex++;
					}

					ClosestDepth = NewDepth;
					FurthestDepth = NewDepth;
					SampleCount = 1;
					
					BrowsedPos = NewPos;
					Iteration = min(ResumeIteration, PROBE_HIERARCHY_EMIT_TILE_SIZE * PROBE_HIERARCHY_EMIT_TILE_SIZE - 1 - BrowsedPos);
				}
			}
			
			BRANCH
			if (ProbeTileIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
			{
				float MiddleDepth = (ClosestDepth + FurthestDepth) * 0.5;
				ProbeDepthArray[ProbeTileIndex] = MiddleDepth;
				ProbeTileIndex++;
			}
			
			InterlockedAdd(ProjectedTileCountersOutput[EmitAtomicTileCoord], ProbeTileIndex);
			
			UNROLL_N(PROBE_HIERARCHY_MAX_EMIT_PER_TILE)
			for (uint EmitProbeIndex = 0; EmitProbeIndex < PROBE_HIERARCHY_MAX_EMIT_PER_TILE; EmitProbeIndex++)
			{
				float MiddleDepth = ProbeDepthArray[EmitProbeIndex];
				float WorldRadius = ComputeMinimalProbeWorldRadiusAtDepth(MiddleDepth);

				uint2 ProbeStorageCoord = EmitTileCoordToProbeStorageCoord(EmitTileCoord, EmitProbeIndex);
				ProjectedProbesOutput[ProbeStorageCoord] = CompressProbeToProbeMap(MiddleDepth, WorldRadius);
			}
		} // if (GroupThreadIndex == 0)
	} // complex depth discontinuity
}
