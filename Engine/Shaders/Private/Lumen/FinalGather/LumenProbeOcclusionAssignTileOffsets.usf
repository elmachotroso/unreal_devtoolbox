// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenCubemapProbeHierarchy.ush"

#define GROUP_SIZE 8
#define Z_ORDER 1


//------------------------------------------------------- PARAMETERS

uint2 AtomicTileCount;
uint2 AtomicTileExtent;

Texture2D<uint> AtomicTileCounters;
RWTexture2D<uint> AtomicTileOffsetsOutput;
RWBuffer<uint> GlobalCounterOutput;

RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- LDS

#if Z_ORDER

groupshared uint SharedAtomicTileCount[GROUP_SIZE * GROUP_SIZE * PROBE_OCCLUSION_MAX];

#else

groupshared uint SharedProbeCount;

#endif

groupshared uint SharedClassificationTileOffset[PROBE_OCCLUSION_MAX];


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	#if Z_ORDER
	{
		// NOP
	}
	#else
	{
		if (GroupThreadIndex == 0)
		{
			SharedProbeCount = 0;
		}

		GroupMemoryBarrierWithGroupSync();
	}
	#endif
	
	uint2 EmitAtomicTileOffset = 0;
	#if Z_ORDER
	{
		EmitAtomicTileOffset = ZOrder2D(GroupThreadIndex, log2(GROUP_SIZE));
	}
	#else
	{
		EmitAtomicTileOffset = uint2(GroupThreadIndex % GROUP_SIZE, GroupThreadIndex / GROUP_SIZE);
	}
	#endif

	uint2 AtomicTileCoord = GroupId * GROUP_SIZE + EmitAtomicTileOffset;
	bool bIsValidAtomicTile = all(AtomicTileCoord < AtomicTileCount);

	uint ClassificationTileCount[PROBE_OCCLUSION_MAX];
	{
		UNROLL_N(PROBE_OCCLUSION_MAX)
		for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
		{
			ClassificationTileCount[ClassificationId] = AtomicTileCounters.Load(int3(AtomicTileCoord + uint2(0, AtomicTileExtent.y * ClassificationId), 0));
		}
	}

	FLATTEN
	if (!bIsValidAtomicTile)
	{
		UNROLL_N(PROBE_OCCLUSION_MAX)
		for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
		{
			ClassificationTileCount[ClassificationId] = 0;
		}
	}

	uint ClassificationTileOffset[PROBE_OCCLUSION_MAX];
	uint TotalClassificationTileCount[PROBE_OCCLUSION_MAX];
	{
		UNROLL_N(PROBE_OCCLUSION_MAX)
		for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
		{
			ClassificationTileOffset[ClassificationId] = 0;
			TotalClassificationTileCount[ClassificationId] = 0;
		}
	}

	#if Z_ORDER
	{
		{
			UNROLL_N(PROBE_OCCLUSION_MAX)
			for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
			{
				SharedAtomicTileCount[GroupThreadIndex + ClassificationId * GROUP_SIZE * GROUP_SIZE] = ClassificationTileCount[ClassificationId];
			}
		}

		GroupMemoryBarrierWithGroupSync();

		// Commented out due a shader compiler bug on a certain console
		// UNROLL_N(GROUP_SIZE * GROUP_SIZE)
		for (uint i = 0; i < GROUP_SIZE * GROUP_SIZE; i++)
		{
			UNROLL_N(PROBE_OCCLUSION_MAX)
			for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
			{
				uint NeighborClassificationTileCount = SharedAtomicTileCount[i + ClassificationId * GROUP_SIZE * GROUP_SIZE];

				ClassificationTileOffset[ClassificationId] += (i < GroupThreadIndex) ? NeighborClassificationTileCount : 0;
				TotalClassificationTileCount[ClassificationId] += NeighborClassificationTileCount;
			}
		}
	}
	#else
	{
		InterlockedAdd(SharedClassificationTileCount, ClassificationTileCount, /* out */ ClassificationTileOffset);

		GroupMemoryBarrierWithGroupSync();

		TotalClassificationTileCount = SharedClassificationTileCount;
	}
	#endif

	// Globally allocate
	if (GroupThreadIndex == 0)
	{
		UNROLL_N(PROBE_OCCLUSION_MAX)
		for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
		{
			if (TotalClassificationTileCount[ClassificationId] > 0)
			{
				InterlockedAdd(GlobalCounterOutput[ClassificationId], TotalClassificationTileCount[ClassificationId], /* out */ SharedClassificationTileOffset[ClassificationId]);
			}
			else
			{
				SharedClassificationTileOffset[ClassificationId] = 0;
			}
		}
	}
	
	GroupMemoryBarrierWithGroupSync();

	if (bIsValidAtomicTile)
	{
		UNROLL_N(PROBE_OCCLUSION_MAX)
		for (uint ClassificationId = 0; ClassificationId < PROBE_OCCLUSION_MAX; ClassificationId++)
		{
			uint2 OutputCoord = AtomicTileCoord + uint2(0, AtomicTileExtent.y * ClassificationId);
			AtomicTileOffsetsOutput[OutputCoord] = ClassificationTileOffset[ClassificationId] + SharedClassificationTileOffset[ClassificationId];
			DebugOutput[OutputCoord] = float4(
				ClassificationTileOffset[ClassificationId] + SharedClassificationTileOffset[ClassificationId],
				ClassificationTileOffset[ClassificationId],
				SharedClassificationTileOffset[ClassificationId],
				0);
		}
	}
}
