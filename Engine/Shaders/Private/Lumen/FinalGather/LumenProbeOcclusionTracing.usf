// Copyright Epic Games, Inc. All Rights Reserved.

// Generate vector truncation warnings to errors.
#pragma warning(error: 3206)

#define LUMEN_TRACING_CARDS 0
#define LUMEN_TRACING_VOXELS_AFTER_CARDS 1
#define LUMEN_TRACING_VOXELS 2

//------------------------------------------------------- CONFIGS

#define CONFIG_WAVE_LAYOUT WAVE_LAYOUT_ONE_WAVE_PER_TILE

//------------------------------------------------------- INCLUDES

#include "../../Common.ush"
#include "../LumenCardCommon.ush"
#include "../LumenTracingCommon.ush"
#include "../LumenBufferEncoding.ush"
#include "LumenProbeOcclusion.ush"
#include "../LumenRadianceCacheCommon.ush"
#include "../../DeferredShadingCommon.ush"
#include "../../BRDF.ush"
#include "../../MonteCarlo.ush"
#include "../../HybridIndirectLighting.ush"


//------------------------------------------------------- PARAMETERS

float StepFactor;
float VoxelStepFactor;
float CardTraceEndDistanceFromCamera;
float DiffuseConeHalfAngle;
float MinSampleRadius;
float MinTraceDistance;
float MaxTraceDistance;
float MaxMeshSDFTraceDistance;
float SurfaceBias;


//------------------------------------------------------- FUNCTIONS

// TODO: duplicated code with LumenDiffuseIndirect.usf's.
float GetLumenLightingCorrection()
{
	float LightingCorrection = 1.0;

	LightingCorrection *= View.PreExposure;
	
	return LightingCorrection;
}

void QuantizeTraceResult(FTracingPixelInfos PixelInfos, FConeTraceResult TraceResult, out float3 Lighting, out bool bHit)
{
	float Test = InterleavedGradientNoise(PixelInfos.PixelPosition, View.StateFrameIndexMod8);

#if 1
	bHit = TraceResult.Transparency < Test;
	Lighting = TraceResult.Lighting * ((TraceResult.Transparency < 1.0 && bHit) ? rcp(1.0 - TraceResult.Transparency) : 0.0);
#else
	bHit = TraceResult.Transparency < 0.5;
	Lighting = TraceResult.Lighting;
#endif
}

//------------------------------------------------------- RAY TRACING ENTRY POINT

struct FTracingLaneCtx
{
};

FTracingLaneCtx InitTracingLaneCtx(FTracingPixelInfos PixelInfos)
{
	FTracingLaneCtx LaneCtx;
	return LaneCtx;
}

uint3 CullGridSize;
float3 CardGridZParams;
uint MaxCulledCardsPerCell;
uint CardGridPixelSizeShift;
float CardInterpolateInfluenceRadius;

uint ComputeCardGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	uint ZSlice = (uint)(max(0, log2(SceneDepth * CardGridZParams.x + CardGridZParams.y) * CardGridZParams.z));
	ZSlice = min(ZSlice, (uint)(CullGridSize.z - 1));
	uint3 GridCoordinate = uint3(PixelPos >> CardGridPixelSizeShift, ZSlice);
	uint GridIndex = (GridCoordinate.z * CullGridSize.y + GridCoordinate.y) * CullGridSize.x + GridCoordinate.x;
	return GridIndex;
}

void TraceRay(
	FTracingLaneCtx LaneCtx,
	FTracingPixelInfos PixelInfos,
	FTracingRayInfos RayInfos,
	out float3 Lighting,
	out bool bFullyTraced,
	out bool bHit)
{
	float ConeHalfAngle;

	if (RayInfos.BxDFSample.Term == SHADING_TERM_SPECULAR)
	{
		ConeHalfAngle = clamp(RayInfos.ConeHalfAngle, 0.01, DiffuseConeHalfAngle);
	}
	else
	{
		ConeHalfAngle = DiffuseConeHalfAngle;
	}

	float3 WorldPosition = PixelInfos.TranslatedWorldPosition - LWCHackToFloat(PrimaryView.PreViewTranslation) + PixelInfos.GBuffer.WorldNormal * SurfaceBias + SurfaceBias * RayInfos.BxDFSample.L;

	float FinalMaxTraceDistance = min(MaxTraceDistance, RayInfos.TMax);

	FConeTraceInput TraceInput;

	#if DIM_LUMEN_TRACING_PERMUTATION == LUMEN_TRACING_CARDS
	{
		uint CardGridCellIndex = ComputeCardGridCellIndex(PixelInfos.PixelPosition, PixelInfos.GBuffer.Depth);

		uint NumMeshSDFs = NumGridCulledMeshSDFObjects[CardGridCellIndex];
		uint MeshSDFStartOffset = GridCulledMeshSDFObjectStartOffsetArray[CardGridCellIndex];

		uint NumHeightfields = NumGridCulledHeightfieldObjects[CardGridCellIndex];
		uint HeightfieldStartOffset = GridCulledHeightfieldObjectStartOffsetArray[CardGridCellIndex];

		TraceInput.NumMeshSDFs = NumMeshSDFs;
		TraceInput.MeshSDFStartOffset = MeshSDFStartOffset;
		TraceInput.NumHeightfields = NumHeightfields;
		TraceInput.HeightfieldStartOffset = HeightfieldStartOffset;
		TraceInput.CardInterpolateInfluenceRadius = CardInterpolateInfluenceRadius;

		FinalMaxTraceDistance = min(FinalMaxTraceDistance, MaxMeshSDFTraceDistance);
	}
	#endif

	TraceInput.Setup(
		WorldPosition,
		RayInfos.BxDFSample.L,
		ConeHalfAngle, 
		MinSampleRadius,
		MinTraceDistance, 
		FinalMaxTraceDistance,
		StepFactor);
	TraceInput.VoxelStepFactor = VoxelStepFactor;

#if DIM_LUMEN_TRACING_PERMUTATION == LUMEN_TRACING_CARDS
	TraceInput.VoxelTraceStartDistance = FinalMaxTraceDistance;
#else
	bool bContinueCardTracing = (DIM_LUMEN_TRACING_PERMUTATION == LUMEN_TRACING_VOXELS_AFTER_CARDS);
	float VoxelTraceStartDistance = CalculateVoxelTraceStartDistance(MinTraceDistance, FinalMaxTraceDistance, MaxMeshSDFTraceDistance, bContinueCardTracing);
	TraceInput.VoxelTraceStartDistance = VoxelTraceStartDistance;
#endif
		
	FConeTraceResult TraceResult;
	TraceResult = (FConeTraceResult)0;
	TraceResult.Lighting = 0.0;
	TraceResult.Transparency = 1.0;

	#if DIM_LUMEN_TRACING_PERMUTATION == LUMEN_TRACING_CARDS
	{
		ConeTraceLumenSceneCards(TraceInput, TraceResult);
		ConeTraceLumenSceneHeightfields(TraceInput, TraceResult);

		float DistanceFromViewpoint = length(LWCHackToFloat(PrimaryView.WorldCameraOrigin) - WorldPosition);
		float DistanceFade = saturate(4 * DistanceFromViewpoint / CardTraceEndDistanceFromCamera - 3);

		TraceResult.Lighting *= 1 - DistanceFade;
		TraceResult.Transparency = lerp(TraceResult.Transparency, 1, DistanceFade);
	}
	#else
	{
		ConeTraceLumenSceneVoxels(TraceInput, TraceResult);

		if (RayInfos.bIsInfinitRay)
		{
			EvaluateSkyRadianceForCone(RayInfos.BxDFSample.L, tan(ConeHalfAngle), TraceResult);
		}
	}
	#endif

	QuantizeTraceResult(PixelInfos, TraceResult, /* out */ Lighting, /* out */ bHit);

	#if DIM_LUMEN_TRACING_PERMUTATION == LUMEN_TRACING_CARDS
		bFullyTraced = bHit;
	#else
		bFullyTraced = true;
	#endif

	Lighting *= GetLumenLightingCorrection();
} // TraceRay()


//------------------------------------------------------- ENTRY POINT

#include "LumenProbeOcclusionPass.ush"
