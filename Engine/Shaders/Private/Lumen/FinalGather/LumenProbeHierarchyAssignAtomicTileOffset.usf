// Copyright Epic Games, Inc. All Rights Reserved.


//------------------------------------------------------- INCLUDES

#include "../ProbeHierarchy/LumenProbeHierarchy.ush"

#define GROUP_SIZE 8
#define Z_ORDER 1


//------------------------------------------------------- PARAMETERS

uint2 EmitAtomicTileCount;
uint HierarchyLevelId;

Texture2D<uint> TileCounters;
RWTexture2D<uint> TileOffsetsOutput;
RWBuffer<uint> GlobalCounterOutput;

RWTexture2D<float4> DebugOutput;


//------------------------------------------------------- LDS

#if Z_ORDER

groupshared uint SharedAtomicTileCount[GROUP_SIZE * GROUP_SIZE];

#else

groupshared uint SharedProbeCount;

#endif

groupshared uint SharedProbeOffset;


//------------------------------------------------------- ENTRY POINT

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Init LDS.
	#if Z_ORDER
	{
		// NOP
	}
	#else
	{
		if (GroupThreadIndex == 0)
		{
			SharedProbeCount = 0;
		}

		GroupMemoryBarrierWithGroupSync();
	}
	#endif
	
	uint2 EmitAtomicTileOffset = 0;
	#if Z_ORDER
	{
		EmitAtomicTileOffset = ZOrder2D(GroupThreadIndex, log2(GROUP_SIZE));
	}
	#else
	{
		EmitAtomicTileOffset = uint2(GroupThreadIndex % GROUP_SIZE, GroupThreadIndex / GROUP_SIZE);
	}
	#endif

	uint2 EmitAtomicTileCoord = GroupId * GROUP_SIZE + EmitAtomicTileOffset;
	bool bIsValidAtomicTile = all(EmitAtomicTileCoord < EmitAtomicTileCount);

	uint ProbeCount = TileCounters.Load(int3(EmitAtomicTileCoord, 0));
	
	FLATTEN
	if (!bIsValidAtomicTile)
	{
		ProbeCount = 0;
	}

	uint ProbeOffset = 0;
	uint TotalProbeCount = 0;

	#if Z_ORDER
	{
		SharedAtomicTileCount[GroupThreadIndex] = ProbeCount;

		GroupMemoryBarrierWithGroupSync();

		UNROLL_N(GROUP_SIZE * GROUP_SIZE)
		for (uint i = 0; i < GROUP_SIZE * GROUP_SIZE; i++)
		{
			uint NeighborProbeCount = SharedAtomicTileCount[i];
			
			ProbeOffset += (i < GroupThreadIndex) ? NeighborProbeCount : 0;
			TotalProbeCount += NeighborProbeCount;
		}
	}
	#else
	{
		InterlockedAdd(SharedProbeCount, ProbeCount, /* out */ ProbeOffset);

		GroupMemoryBarrierWithGroupSync();

		TotalProbeCount = SharedProbeCount;
	}
	#endif

	// Globally allocate
	if (GroupThreadIndex == 0 && TotalProbeCount > 0)
	{
		InterlockedAdd(GlobalCounterOutput[HierarchyLevelId], TotalProbeCount, /* out */ SharedProbeOffset);
	}
	
	GroupMemoryBarrierWithGroupSync();

	if (bIsValidAtomicTile)
	{
		TileOffsetsOutput[EmitAtomicTileCoord] = ProbeOffset + SharedProbeOffset;
		//DebugOutput[EmitAtomicTileCoord] = float4(ProbeOffset + SharedProbeOffset, 0, 0, 0);
	}
}
