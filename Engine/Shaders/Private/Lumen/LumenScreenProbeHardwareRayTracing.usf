// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../SceneTextureParameters.ush"

#include "LumenCardCommon.ush"
#include "LumenTracingCommon.ush"
#define RADIANCE_CACHE_DEPTH_TEST_SPHERE_PARALLAX 1
#include "LumenRadianceCacheCommon.ush"
#include "LumenScreenProbeCommon.ush"
#include "LumenHardwareRayTracingPipelineCommon.ush"

#ifndef THREADGROUP_SIZE_2D
#define THREADGROUP_SIZE_2D 8
#endif

#ifndef THREADGROUP_SIZE_1D
#define THREADGROUP_SIZE_1D THREADGROUP_SIZE_2D * THREADGROUP_SIZE_2D
#endif

#ifndef DIM_LIGHTING_MODE
#define DIM_LIGHTING_MODE LIGHTING_FROM_SURFACE_CACHE
#endif

#define LIGHTING_MODE_SURFACE_CACHE 0
#define LIGHTING_MODE_HIT_LIGHTING 1

StructuredBuffer<uint> Allocator;
RWBuffer<uint> RWRayAllocator;
[numthreads(1, 1, 1)]
void FConvertRayAllocatorCS()
{
	RWRayAllocator[0] = Allocator[0];
}

Buffer<uint> RayAllocator;
RWBuffer<uint> RWHardwareRayTracingIndirectArgs;

[numthreads(1, 1, 1)]
void FLumenScreenProbeHardwareRayTracingIndirectArgsCS()
{
	RWHardwareRayTracingIndirectArgs[0] = RayAllocator[0];
	RWHardwareRayTracingIndirectArgs[1] = 1;
	RWHardwareRayTracingIndirectArgs[2] = 1;

#if DIM_INLINE_RAYTRACING
	// For RayTraceDispatchIndirect we dispatch in threads but for DispatchIndirectComputeShader we dispatch in thread groups.
	// We need to adjust it to get the same number of threads running.
	RWHardwareRayTracingIndirectArgs[0] = (RWHardwareRayTracingIndirectArgs[0] + INLINE_RAY_TRACING_THREAD_GROUP_SIZE_X - 1) / INLINE_RAY_TRACING_THREAD_GROUP_SIZE_X;
#endif
}


#if LUMEN_HARDWARE_RAYTRACING || LUMEN_HARDWARE_INLINE_RAYTRACING

float3 FarFieldReferencePos;

#include "LumenHardwareRayTracingCommon.ush"

RaytracingAccelerationStructure TLAS;

uint ThreadCount;
uint GroupCount;
int NearFieldLightingMode;
float MaxTraceDistance;
float FarFieldBias;
float FarFieldMaxTraceDistance;
float PullbackBias;
float NormalBias;
float AvoidSelfIntersectionTraceDistance;
int MaxTranslucentSkipCount;
uint MaxTraversalIterations;
int ApplySkyLight;

RWStructuredBuffer<FTraceDataPacked> RWRetraceDataPackedBuffer;

#if LUMEN_HARDWARE_INLINE_RAYTRACING
StructuredBuffer<FHitGroupRootConstants> HitGroupData;
#endif // LUMEN_HARDWARE_INLINE_RAYTRACING

FRayTracedLightingResult EpsilonTrace(RayDesc Ray, inout FRayTracedLightingContext Context)
{
	FRayTracedLightingResult Result = CreateRayTracedLightingResult();

#if ENABLE_NEAR_FIELD_TRACING
	uint OriginalCullingMode = Context.CullingMode;
	Context.CullingMode = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
	Ray.TMax = AvoidSelfIntersectionTraceDistance;

	if (Ray.TMax > Ray.TMin)
	{
		// First trace - short distance with backface culling enabled to avoid self intersecting in cases where the traced geometry doesn't match what's in the GBuffer (Nanite, Ray Tracing LODs, etc)
#if DIM_LIGHTING_MODE == LIGHTING_FROM_SURFACE_CACHE
		{
			Result = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);
		}
#else
		{
			Result = TraceAndCalculateRayTracedLighting(Ray, Context, DIM_LIGHTING_MODE);
		}
#endif // DIM_LIGHTING_MODE
	}
	Context.CullingMode = OriginalCullingMode;
#endif // ENABLE_NEAR_FIELD_TRACING

	return Result;
}

LUMEN_HARDWARE_RAY_TRACING_ENTRY(LumenScreenProbeGatherHardwareRayTracing)
{
	uint ThreadIndex = DispatchThreadIndex.x;
	uint GroupIndex = DispatchThreadIndex.y;

#if DIM_INDIRECT_DISPATCH
	uint Iteration = 0;
	uint DispatchedThreads = RayAllocator[0];
#else
	uint DispatchedThreads = ThreadCount * GroupCount;
	uint IterationCount = (RayAllocator[0] + DispatchedThreads - 1) / DispatchedThreads;
	for (uint Iteration = 0; Iteration < IterationCount; ++Iteration)
#endif
	{
		uint RayIndex = Iteration * DispatchedThreads + GroupIndex * ThreadCount + ThreadIndex;
		if (RayIndex >= RayAllocator[0])
		{
			return;
		}

#if (DIM_LIGHTING_MODE == LIGHTING_MODE_HIT_LIGHTING) || ENABLE_FAR_FIELD_TRACING
		FTraceData TraceData = UnpackTraceData(RWRetraceDataPackedBuffer[RayIndex]);
		uint RayId = TraceData.RayId;
#else
		uint RayId = RayIndex;
#endif // DIM_LIGHTING_MODE

		uint ScreenProbeIndex;
		uint2 TraceTexelCoord;
		float TraceHitDistance;
		DecodeTraceTexel(CompactedTraceTexelData[RayId], ScreenProbeIndex, TraceTexelCoord, TraceHitDistance);

		uint2 ScreenProbeScreenPosition = GetScreenProbeScreenPosition(ScreenProbeIndex);
		uint2 ScreenTileCoord = GetScreenTileCoord(ScreenProbeScreenPosition);
		uint LinearCoord = ScreenTileCoord.y * ScreenProbeViewSize.x + ScreenTileCoord.x;

		float2 ScreenUV = GetScreenUVFromScreenProbePosition(ScreenProbeScreenPosition);
		uint2 ScreenProbeAtlasCoord = uint2(ScreenProbeIndex % ScreenProbeAtlasViewSize.x, ScreenProbeIndex / ScreenProbeAtlasViewSize.x);
		uint2 ScreenProbeTraceCoord = GetTraceBufferCoord(ScreenProbeAtlasCoord, TraceTexelCoord);

		float SceneDepth = GetScreenProbeDepth(ScreenProbeAtlasCoord);
		float3 WorldPosition = GetWorldPositionFromScreenUV(ScreenUV, SceneDepth);
		float3 WorldNormal = GetScreenProbeNormal(ScreenProbeAtlasCoord);

		float2 ProbeUV;
		float ConeHalfAngle;
		GetProbeTracingUV(ScreenProbeAtlasCoord, TraceTexelCoord, GetProbeTexelCenter(ScreenTileCoord), 1, ProbeUV, ConeHalfAngle);

		RayDesc Ray;
		Ray.Origin = WorldPosition;
		Ray.Direction = OctahedronToUnitVector(ProbeUV * 2.0 - 1.0);
		Ray.TMin = max(TraceHitDistance - PullbackBias, 0.0);
#if ENABLE_FAR_FIELD_TRACING
		Ray.TMin = max(Ray.TMin, FarFieldBias);
#endif

		ApplyPositionBias(Ray.Origin, Ray.Direction, WorldNormal, NormalBias);
		FRayCone RayCone = (FRayCone)0;
		RayCone = PropagateRayCone(RayCone, ConeHalfAngle, 0.0);

		uint CullingMode = 0;
		FRayTracedLightingContext Context = CreateRayTracedLightingContext(
			TLAS,
			RayCone,
			ScreenTileCoord,
			ScreenTileCoord.y * ScreenProbeViewSize.x + ScreenTileCoord.x,
			CullingMode,
			MaxTranslucentSkipCount,
			MaxTraversalIterations);
		Context.bCalculateHitVelocity = true;

#if LUMEN_HARDWARE_INLINE_RAYTRACING
		Context.HitGroupData = HitGroupData;
#endif // LUMEN_HARDWARE_INLINE_RAYTRACING

		// Initialize by testing against a small epsilon
		FRayTracedLightingResult Result = EpsilonTrace(Ray, Context);
		if (!Result.bIsHit)
		{
			Ray.TMin = max(Ray.TMin, AvoidSelfIntersectionTraceDistance);
			Ray.TMax = Ray.TMin;
			// Cull TMax by the bounding sphere of the near-field
			if (length(Ray.Origin - LWCHackToFloat(PrimaryView.WorldCameraOrigin)) < MaxTraceDistance)
			{
				float2 Hit = RayIntersectSphere(Ray.Origin, Ray.Direction, float4(LWCHackToFloat(PrimaryView.WorldCameraOrigin), MaxTraceDistance));
				Ray.TMax = (Hit.x > 0) ? Hit.x : ((Hit.y > 0) ? Hit.y : Ray.TMin);
			}

			bool bIsRadianceCacheHit = false;
#if DIM_RADIANCE_CACHE
			{
				float ClipmapDitherRandom = InterleavedGradientNoise(ScreenTileCoord, View.StateFrameIndexMod8);
				FRadianceCacheCoverage Coverage = GetRadianceCacheCoverage(Ray.Origin, Ray.Direction, ClipmapDitherRandom);
				if (Coverage.bValid)
				{
					Ray.TMax = min(Ray.TMax, Coverage.MinTraceDistanceBeforeInterpolation);
					bIsRadianceCacheHit = true;
				}
			}
#endif

			// Set far-field context specialization
			Context.FarFieldMaxTraceDistance = FarFieldMaxTraceDistance;
			Context.FarFieldReferencePos = FarFieldReferencePos;

#if DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
			Result = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);

#if DIM_PACK_TRACE_DATA
			RWRetraceDataPackedBuffer[RayIndex] = PackTraceData(CreateTraceData(
				RayId,
				Result.MaterialShaderIndex,
				Result.Bookmark,
				Result.TraceHitDistance,
				Result.bIsHit || bIsRadianceCacheHit,
				Result.bIsRadianceCompleted,
				Result.bIsFarField));
#endif // DIM_PACK_TRACE_DATA

#else // DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
			// TODO: Hit lighting

#endif // DIM_LIGHTING_MODE
		}

#if DIM_WRITE_FINAL_LIGHTING
		bool bMoving = false;
		if (Result.bIsHit)
		{
			float3 HitWorldPosition = Ray.Origin + Ray.Direction * Result.TraceHitDistance;
			bMoving = IsTraceMoving(WorldPosition, SceneDepth, ScreenProbeAtlasCoord, HitWorldPosition, Result.WorldVelocity);
		}

		RWTraceRadiance[ScreenProbeTraceCoord] = Result.Radiance * View.PreExposure;
		RWTraceHit[ScreenProbeTraceCoord] = EncodeProbeRayDistance(min(Result.TraceHitDistance, MaxTraceDistance), Result.bIsHit, bMoving);
#endif // DIM_WRITE_FINAL_LIGHTING
	}
}

#endif // LUMEN_HARDWARE_RAYTRACING || LUMEN_HARDWARE_INLINE_RAYTRACING