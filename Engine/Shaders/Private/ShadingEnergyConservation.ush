// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

// If EnergyConservation flag is not enabled explicitly then:
// * If strata is enabled: ON by default
// * If strata is disnabled: OFF by default
#if PROJECT_STRATA || MATERIAL_ENERGYCONSERVATION
	#undef USE_ENERGY_CONSERVATION
	#define USE_ENERGY_CONSERVATION 1
#else
	#undef USE_ENERGY_CONSERVATION
	#define USE_ENERGY_CONSERVATION 0
#endif

// Energy compensation/preservation for the various BxDFs. This file provides utility functions to tweak lobe weights
// 
// References:
// [1] "Revisiting physically based shading at Imageworks" - Christopher Kulla & Alejandro Conty
//   https://blog.selfshadow.com/publications/s2017-shading-course/imageworks/s2017_pbs_imageworks_slides_v2.pdf
// [2] "Practical multiple scattering compensation for microfacet models" - Emmanuel Turquin
//   https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
// [3] "A Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting" - Carmelo J. Fdez-AgÃ¼era
//   http://jcgt.org/published/0008/01/03/
// 
// We follow the terminology from [1]:
// Energy compensation: adjust individual BxDFs so that they have unit albedo from all viewing angles, compensating for (for example) the lack of multiple scattering in microfacet BxDFs
// Energy preservation: adjust the combination of lobes (such as diffuse+specular) to ensure we never create additional energy from any angle

// The suggested implementation in [1] is cumbersome for a GPU implementation because it requires table lookups during sampling to achieve low variance. We instead sacrifice reciprocity and
// simply divide the BxDF by its (tabulated/fit) directional albedo to enforce conservation of energy. We follow the approach outlined in [2] to account for spec/cloth and glass, and use
// the split-sum approach from [3] for the diffuse/specular energy preservation case (which generalizes to other lobes as well).

// USE_ENERGY_CONSERVATION controls the implementation details of this file
//    0: disable conservation, all bsdfs are assumed to already have unit albedo from all viewing angles
//    1: use a small baked texture to store the directional albedo (and fresnel weighted albedo)
//    2: use an analytic approximation to directional albedo (doesn't require any textures to be bound and can be faster -- WIP)

float2 GGXEnergyLookup(float Roughness, float NoV)
{
#if USE_ENERGY_CONSERVATION == 1
	return View.ShadingEnergyGGXSpecTexture.SampleLevel(View.ShadingEnergySampler, float2(NoV, Roughness), 0);
#elif USE_ENERGY_CONSERVATION == 2
	const float r = Roughness;
	const float c = NoV;
	const float E = 1.0 - saturate(pow(r, c / r) * ((r * c + 0.0266916) / (0.466495 + c)));
	const float Ef = Pow5(1 - c) * pow(2.36651 * pow(c, 4.7703 * r) + 0.0387332, r);
	return float2(E, Ef);
#else
	return float2(1, 0);
#endif
}

float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{
	// Following [2] Eq 18, we simply divide the whole bsdf by its single scattering albedo to conserve energy
	// This break reciprocity, but is much simpler than the approach outlined in [1] which requires substantially more computation.
#if USE_ENERGY_CONSERVATION == 1
	// NOTE: Eta is encoded for [1,3] range only, energy loss will happens above 3.0 - but this keeps more resolution on the visually significant portion of the range
	float2 E = View.ShadingEnergyGGXGlassTexture.SampleLevel(View.ShadingEnergySampler, float3(NoV, Roughness, max(Eta, rcp(Eta)) * 0.5 - 0.5), 0);
	return Eta >= 1.0 ? E.x : E.y;
#else
	// TODO: find an analytic fit for this case
	return 1.0;
#endif
}

float2 ClothEnergyLookup(float Roughness, float NoV)
{
#if USE_ENERGY_CONSERVATION == 1
	return View.ShadingEnergyClothSpecTexture.SampleLevel(View.ShadingEnergySampler, float2(NoV, Roughness), 0);
#elif USE_ENERGY_CONSERVATION == 2
	// Simple analytical fit (avoids building a table)
	// NOTE: this fit is not exact near grazing angles for roughness ~0.7
	const float c = NoV;
	const float r = Roughness;
	return float2(
		(0.526422 / ((-0.227114 + r) * (-0.968835 + r) * ((5.38869 - 20.2835 * c) * r) - (-1.18761 - ((2.58744 - c) * c)))) + 0.0615456,
		0.0 // TODO: is it worth capturing this? this term is close to 0 (and experiments with the tabulated form show it doesn't have much impact)
	);
#else
	return float2(1, 0);
#endif
}

float DiffuseEnergyLookup(float Roughness, float NoV)
{
#if USE_ENERGY_CONSERVATION == 1
	//return View.ShadingEnergyDiffuseTexture.SampleLevel(View.ShadingEnergySampler, float2(NoV, Roughness), 0);
	// For now we do not apply Chan diffuse energy preservation on diffuse ambiant.
	// This is because Chan is built for F=0.04 and unfortunately this causes ambient to darken a grazing angles.
	// STRATA_TODO Apply the inverse of Fresnel with F=0.04 on Chan when building the table.
	return 1.0f;
#elif USE_ENERGY_CONSERVATION == 2
	// TODO
	return 1.f;
#else
	return 1.f;
#endif
}

struct FBxDFEnergyTerms {
	float3 W; // overall weight to scale the lobe BxDF by to ensure energy conservation
	float3 E; // Directional albedo of the lobe for energy preservation and lobe picking
};

// Given a split-sum approximation of directional albedo for a BxDF, compute multiple scattering weight and multiple scattering directional albedo
// while taking into account the fresnel term (assumed to be F_Schlick)
FBxDFEnergyTerms ComputeFresnelEnergyTerms(float2 E, float3 F0, float3 F90) 
{
	FBxDFEnergyTerms Result;
	// [2] Eq 16: this restores the missing energy of the bsdf, while also accounting for the fact that the fresnel term causes some energy to be absorbed
	// NOTE: using F0 here is an approximation, but for schlick fresnel Favg is almost exactly equal to F0
	Result.W = View.bShadingEnergyConservation ? (1.0 + F0 * ((1 - E.x) / E.x)) : 1.0f;
	// Now estimate the amount of energy reflected off this specular lobe so that we can remove it from underlying BxDF layers (like diffuse)
	// This relies on the split-sum approximation as in [3] Sec 4.
	// This term can also be useful to compute the probability of choosing among lobes
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

FBxDFEnergyTerms ComputeGGXSpecEnergyTerms(float Roughness, float NoV, float3 F0, float3 F90)
{
	FBxDFEnergyTerms Out;
#if USE_ENERGY_CONSERVATION > 0
	{
		Out = ComputeFresnelEnergyTerms(GGXEnergyLookup(Roughness, NoV), F0, F90);
	}
#else
	{
		Out.W = 1.0f;
		Out.E = F0;
	}
#endif
	return Out;
}

FBxDFEnergyTerms ComputeGGXSpecEnergyTerms(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); // See F_Schlick implementation
	return ComputeGGXSpecEnergyTerms(Roughness, NoV, F0, F90);
}

FBxDFEnergyTerms ComputeClothEnergyTerms(float Roughness, float NoV, float3 F0, float3 F90)
{
	FBxDFEnergyTerms Out;
#if USE_ENERGY_CONSERVATION > 0
	{
		Out = ComputeFresnelEnergyTerms(ClothEnergyLookup(Roughness, NoV), F0, F90);
	}
#else
	{
		Out.W = 1.0f;
		Out.E = F0;
	}
#endif
	return Out;
}

FBxDFEnergyTerms ComputeClothEnergyTerms(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); // See F_Schlick implementation
	return ComputeClothEnergyTerms(Roughness, NoV, F0, F90);
}

FBxDFEnergyTerms ComputeDiffuseEnergyTerms(float Roughness, float NoV)
{
	FBxDFEnergyTerms Out;
#if USE_ENERGY_CONSERVATION > 0
	{
		Out.E = DiffuseEnergyLookup(Roughness, NoV);
	}
#else
	{
		Out.E = 1.0f;
	}
#endif
	Out.W = 1.0f;
	return Out;
}

// Return the energy absorbed by upper layer (e.g., for the specular layer attenuation onto diffuse)
float3 ComputeEnergyPreservation(FBxDFEnergyTerms EnergyTerms)
{
#if USE_ENERGY_CONSERVATION > 0
	// Use the directional albedo luminance to avoid color-shift due to metallic specular (for which the energy should be absorbed, not transmitted)
	return View.bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;
#else
	return 1.0f;
#endif
}

// Return the energy conservation weight factor for account energy loss in the BSDF model (i.e. due to micro-facet multiple scattering)
float3 ComputeEnergyConservation(FBxDFEnergyTerms EnergyTerms)
{
	return EnergyTerms.W;
}