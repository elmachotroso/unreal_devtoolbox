// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- ENUMS

/** Kernel enum */
	#define KERNEL_1X1 0
	#define KERNEL_3X3 1
	#define KERNEL_3X3_PLUS 2


//------------------------------------------------------- CONFIG

#define TILE_SIZE 16

#define CONFIG_ACCUMULATE_KARIS_WEIGHTING 1

#define CONFIG_KERNEL (KERNEL_3X3)

// Use a spread factor the size of the clamping box in the history comparison to avoid one flickering input pixel
// to flicker the entire comparison neighborhood
#define CONFIG_KERNEL_SPREAD_FACTOR 3

// Uses a spread factor that varies slightly between 2x2 pixel neighborhood to reduce chances of inteference
// against structured input.
#define CONFIG_USE_DYNAMIC_SPREAD_FACTOR 1


//------------------------------------------------------- PARAMETERS

float3 OutputQuantizationError;

Texture2D<tsr_halfC> InputTexture;
Texture2D<tsr_halfC> PredictionSceneColorTexture;
Texture2D<tsr_half> ParallaxRejectionMaskTexture;

RWTexture2D<tsr_halfC> FilteredInputOutput;
RWTexture2D<tsr_halfC> FilteredPredictionSceneColorOutput;
RWTexture2D<tsr_half>  InputSceneColorLdrLumaOutput;


//------------------------------------------------------- FUNCTIONS

tsr_half ComputeColorWeight(tsr_halfC Color)
#if CONFIG_ACCUMULATE_KARIS_WEIGHTING
{
	return HdrWeight4(Color);
}
#else
{
	return tsr_half(1);
}
#endif

tsr_half ParallaxRejectionMaskToHistoryValidity(tsr_half ParallaxRejectionMask)
{
	return (ParallaxRejectionMask < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD)) ? tsr_half(0.0) : tsr_half(1.0);
}

//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint GroupWaveIndex = GetGroupWaveIndex(GroupThreadIndex, /* GroupSize = */ TILE_SIZE * TILE_SIZE);

	float4 Debug = 0.0;
	
	tsr_short2 DispatchThreadId = (
		tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
		Map16x16Tile2x2Lane(GroupThreadIndex));
		
	tsr_short2 InputPixelPos = tsr_short2(InputPixelPosMin) + DispatchThreadId;

	// Fetch center of the kernel
	tsr_halfC CenterInput;
	tsr_halfC FilteredInput;
	tsr_half FilteredInputWeight;
	tsr_halfC FilteredHistory;
	tsr_half FilteredHistoryWeight;

	{
		tsr_half SampleSpatialWeight = 1.0;

		tsr_halfC InputSample = InputTexture[InputPixelPos];
		tsr_halfC HistorySample = PredictionSceneColorTexture[InputPixelPos];
		tsr_half HistorySampleValidity = ParallaxRejectionMaskToHistoryValidity(
			ParallaxRejectionMaskTexture[InputPixelPos]);
		
		tsr_half InputWeight = ComputeColorWeight(InputSample);
		tsr_half HistoryWeight = HistorySampleValidity * ComputeColorWeight(HistorySample);

		CenterInput = InputSample;

		FilteredInput       = (SampleSpatialWeight * InputWeight) * InputSample;
		FilteredInputWeight = (SampleSpatialWeight * InputWeight);
		
		FilteredHistory       = (SampleSpatialWeight * HistoryWeight) * HistorySample;
		FilteredHistoryWeight = (SampleSpatialWeight * HistoryWeight);
	}
	
	uint StartSampleId;
	uint SampleCount;
	uint SampleTrackId;
	
	#if CONFIG_KERNEL == KERNEL_1X1
	{
		StartSampleId = 0;
		SampleCount = 0;
	}
	#elif CONFIG_KERNEL == KERNEL_3X3 || CONFIG_KERNEL == KERNEL_3X3_PLUS
	{
		StartSampleId = 0;
		SampleCount = 9;
	}
	#else
		#error Unknown kernel
	#endif

	#if CONFIG_USE_DYNAMIC_SPREAD_FACTOR
		tsr_short2 DynamicSpreadFactor = (
			tsr_short(CONFIG_KERNEL_SPREAD_FACTOR) +
			tsr_short2((tsr_ushort2(InputPixelPos) % tsr_ushort(2)) ^ (tsr_ushort2(InputPixelPos.yx) % tsr_ushort(2))));
	#else
		tsr_short2 DynamicSpreadFactor = tsr_short(CONFIG_KERNEL_SPREAD_FACTOR);
	#endif

	// Fetch neighborhood of the kernel
	UNROLL
	for (uint SampleId = StartSampleId; SampleId < SampleCount; SampleId++)
	{
		tsr_short2 Offset;
		tsr_half SampleSpatialWeight;
		
		#if CONFIG_KERNEL == KERNEL_1X1
		{
			Offset = 0;
			SampleSpatialWeight = tsr_half(1.0);
			continue;
		}
		#elif CONFIG_KERNEL == KERNEL_3X3 || CONFIG_KERNEL == KERNEL_3X3_PLUS
		{
			if (SampleId == 4)
			{
				continue;
			}
			Offset = tsr_short2(kOffsets3x3[SampleId]);
			
			#if CONFIG_KERNEL == KERNEL_3X3_PLUS
				if (abs(Offset.x) + abs(Offset.y) > 1)
				{
					continue;
				}
			#endif
			
			#if 0
				SampleSpatialWeight = tsr_half(1.0);
			#elif 1
				SampleSpatialWeight = tsr_half(rcp(abs(Offset.x) + 1.0) * rcp(abs(Offset.y) + 1.0));
			#else
				SampleSpatialWeight = tsr_half(rcp(abs(Offset.x) + abs(Offset.y)));
			#endif
		}
		#else
			#error Unknown kernel
		#endif
		
		tsr_short2 SampleInputPixelPos = InputPixelPos + ClampPixelOffset(
			InputPixelPos,
			DynamicSpreadFactor * Offset, Offset,
			InputPixelPosMin, InputPixelPosMax);

		tsr_halfC InputSample = InputTexture[SampleInputPixelPos];
		tsr_halfC HistorySample = PredictionSceneColorTexture[SampleInputPixelPos];
		tsr_half HistorySampleValidity = ParallaxRejectionMaskToHistoryValidity(
			ParallaxRejectionMaskTexture[SampleInputPixelPos]);

		#if CONFIG_SCENE_COLOR_OVERFLOW
			#if CONFIG_SCENE_COLOR_APLHA
				InputSample = min(InputSample, LargestSceneColorRGBA);
			#else
				InputSample = min(InputSample, LargestSceneColorRGB);
			#endif
		#endif

		tsr_half InputWeight = HistorySampleValidity * ComputeColorWeight(InputSample);
		tsr_half HistoryWeight = HistorySampleValidity * ComputeColorWeight(HistorySample);

		FilteredInput       += (SampleSpatialWeight * InputWeight) * InputSample;
		FilteredInputWeight += (SampleSpatialWeight * InputWeight);
		
		FilteredHistory       += (SampleSpatialWeight * HistoryWeight) * HistorySample;
		FilteredHistoryWeight += (SampleSpatialWeight * HistoryWeight);
	}

	{
		FilteredInput *= SafeRcp(FilteredInputWeight);
		FilteredHistory *= SafeRcp(FilteredHistoryWeight);
	}
	
	// Compute the LDR luma used for spatial anti-aliasing's computation of the TexelOffset
	#if DIM_OUTPUT_ANTI_ALIASING_LUMA
	tsr_half CenterLumaLDR;
	{
		const tsr_half SpatialAAExposure = tsr_half(0.5);

		#if 0
			tsr_half3 CenterInputLDR = CenterInput / (SpatialAAExposure + CenterInput);
			CenterLumaLDR = dot(CenterInputLDR, half3(0.299f, 0.587f, 0.114f));
		#elif 0
			tsr_half CenterLuma = max(CenterInput.r, max(CenterInput.g, CenterInput.b));
			CenterLumaLDR = CenterLuma / (SpatialAAExposure + CenterLuma);
		#else
			tsr_half CenterLuma = dot(CenterInput.rgb, half3(0.299f, 0.587f, 0.114f));
			CenterLumaLDR = CenterLuma / (SpatialAAExposure + CenterLuma);
		#endif
	}
	#endif // DIM_OUTPUT_ANTI_ALIASING_LUMA
	
	tsr_short2 OutputPixelPos;
	#if 1
		ISOLATE
		{
			OutputPixelPos = (
				tsr_short2(InputPixelPosMin) +
				tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
				Map16x16Tile2x2Lane(GetGroupThreadIndex(GroupThreadIndex, GroupWaveIndex)));
		}
	#else
		OutputPixelPos = InputPixelPos;
	#endif

	#if CONFIG_ENABLE_STOCASTIC_QUANTIZATION
	{
		uint2 Random = Rand3DPCG16(int3(OutputPixelPos, View.StateFrameIndexMod8)).xy;
		tsr_half E = tsr_half(Hammersley16(0, 1, Random).x);
		
		FilteredInput = QuantizeForFloatRenderTarget(FilteredInput, E.x, OutputQuantizationError);
		FilteredHistory = QuantizeForFloatRenderTarget(FilteredHistory, E.x, OutputQuantizationError);
	}
	#endif

	OutputPixelPos.x = all(OutputPixelPos < tsr_short2(LowFrequencyInfo_ViewportMax)) ? OutputPixelPos.x : ~tsr_short(0);

	FilteredInputOutput[OutputPixelPos] = FilteredInput;
	FilteredPredictionSceneColorOutput[OutputPixelPos] = FilteredHistory;

	#if DIM_OUTPUT_ANTI_ALIASING_LUMA
	{
		InputSceneColorLdrLumaOutput[OutputPixelPos] = CenterLumaLDR;
	}
	#endif

	#if DEBUG_OUTPUT
	{
		DebugOutput[OutputPixelPos - LowFrequencyInfo_ViewportMin] = Debug;
	}
	#endif
}
