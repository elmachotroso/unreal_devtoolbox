// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8

#define CONFIG_SAMPLES 9
#define CONFIG_SAMPLE_PAIRS ((CONFIG_SAMPLES - 1) / 2)

#if CONFIG_BUTTERFLY_KERNEL
	#if CONFIG_SAMPLES == 9
		#define CONFIG_PRE_FETCH_SAMPLES 4
	#else
		#define CONFIG_PRE_FETCH_SAMPLES 3
	#endif
#else
	#define CONFIG_PRE_FETCH_SAMPLES (CONFIG_SAMPLES)
#endif


//------------------------------------------------------- PARAMETERS

float MaxHollFillPixelVelocity;

Texture2D<uint> PrevClosestDepthTexture;
Texture2D<float2> DilatedVelocityTexture;
Texture2D<tsr_half> ParallaxRejectionMaskTexture;

RWTexture2D<float2> HoleFilledVelocityOutput;
RWTexture2D<tsr_half2> HoleFilledVelocityMaskOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;

	uint2 DispatchThreadId = (
		ZOrder2D(GroupThreadIndex, uint(log2(float(TILE_SIZE)))) +
		GroupId * uint2(TILE_SIZE, TILE_SIZE));
	tsr_short2 LaneOffsetSign = GetLaneOffsetSign();

	tsr_short2 InputPixelPos = tsr_short2(InputInfo_ViewportMin + DispatchThreadId);
	
	float2 ScreenPos = ApplyScreenTransform(float2(InputPixelPos), InputPixelPosToScreenPos);

	float2 EncodedVelocityNeighborhood[CONFIG_PRE_FETCH_SAMPLES];
	tsr_half ParallaxRejectionMaskNeighborhood[CONFIG_PRE_FETCH_SAMPLES];
	ISOLATE
	{
		UNROLL_N(CONFIG_PRE_FETCH_SAMPLES)
		for (uint i = 0; i < CONFIG_PRE_FETCH_SAMPLES; i++)
		{
			tsr_short2 SampleInputPixelPos;
			#if CONFIG_BUTTERFLY_KERNEL
			{
				tsr_short2 Offset = tsr_short2(Offsets2x2[i]) * LaneOffsetSign;
				
				SampleInputPixelPos = InputPixelPos + Offset;
			}
			#else
			{
				tsr_short2 Offset;
				#if CONFIG_SAMPLES == 9
					Offset = tsr_short2(kOffsets3x3[kSquareIndexes3x3[i]]);
				#elif CONFIG_SAMPLES == 5
					Offset = tsr_short2(kOffsets3x3[kPlusIndexes3x3[i]]);
				#endif
					
				SampleInputPixelPos = InputPixelPos + ClampPixelOffset(
					InputPixelPos,
					Offset, Offset,
					InputPixelPosMin, InputPixelPosMax);
			}
			#endif

			EncodedVelocityNeighborhood[i] = DilatedVelocityTexture[SampleInputPixelPos];
			ParallaxRejectionMaskNeighborhood[i] = ParallaxRejectionMaskTexture[SampleInputPixelPos];
		}
	}
	
	float2 ScreenVelocity = DecodeVelocityFromTexture(float4(EncodedVelocityNeighborhood[0], 0.0, 0.0)).xy;
	
	// Get the closest hole filling velocity.
	float2 HoleFillingPixelVelocity;
	float HoleFillingOutOfRange;
	{
		float2 PrevScreenPos = ScreenPos - ScreenVelocity;
		float2 PrevInputBufferUV = (InputInfo_ScreenPosToViewportScale * PrevScreenPos + InputInfo_ScreenPosToViewportBias) * InputInfo_ExtentInverse;
		
		FBilinearSampleInfos BilinearInter = GetBilinearSampleLevelInfos(PrevInputBufferUV, InputInfo_Extent, InputInfo_ExtentInverse);
		
		bool bIsValidHoleFillingPixelVelocity = false;
		uint EncodedHoleFillingVelocity = 0;
		UNROLL_N(4)
		for (uint i = 0; i < 4; i++)
		{
			uint2 PixelPos = GetSamplePixelCoord(BilinearInter, i);

			bool bValidPixelPos = all(PixelPos >= InputInfo_ViewportMin && PixelPos < InputInfo_ViewportMax);

			uint SampleHistoryClosestDeviceZ = PrevClosestDepthTexture[PixelPos];

			bIsValidHoleFillingPixelVelocity = bIsValidHoleFillingPixelVelocity || bValidPixelPos;

			FLATTEN
			if (bValidPixelPos)
			{
				EncodedHoleFillingVelocity = max(EncodedHoleFillingVelocity, SampleHistoryClosestDeviceZ);
			}
		}

		DecodeHoleFillingVelocity(EncodedHoleFillingVelocity, /* out */ HoleFillingPixelVelocity, /* out */ HoleFillingOutOfRange);

		if (!bIsValidHoleFillingPixelVelocity)
		{
			HoleFillingOutOfRange = 0.0;
		}
		
		//Debug.r = EncodedHoleFillingVelocity;
		//Debug.r = f16tof32(EncodedHoleFillingVelocity >> VELOCITY_HOLE_FILLING_BITS);
		//Debug.r = f16tof32(EncodedHoleFillingVelocity);
		//Debug.r = abs(EncodedHoleFillingVelocity % (1 << VELOCITY_HOLE_FILLING_LENGTH_BITS));
	}
	
	// Preprocessed the prefetched samples
	float2 PixelVelocityNeighborhood[CONFIG_PRE_FETCH_SAMPLES];
	float PixelVelocityLengthNeighborhood[CONFIG_PRE_FETCH_SAMPLES];
	{
		UNROLL_N(CONFIG_PRE_FETCH_SAMPLES)
		for (uint i = 0; i < CONFIG_PRE_FETCH_SAMPLES; i++)
		{
			PixelVelocityNeighborhood[i] = DecodeVelocityFromTexture(float4(EncodedVelocityNeighborhood[i], 0.0, 0.0)).xy * ScreenVelocityToInputPixelVelocity;
			PixelVelocityLengthNeighborhood[i] = dot(PixelVelocityNeighborhood[i], PixelVelocityNeighborhood[i]);
		}
	}
	
	float2 EndodedScreenVelocity = EncodedVelocityNeighborhood[0];

	bool bIsParallaxRejected = ParallaxRejectionMaskNeighborhood[0] < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD);

	tsr_half HoleFilledVelocityMask = tsr_half(0.0);
	tsr_half RejectHighFrequency = tsr_half(0.0);
	//tsr_half IsVelocityEdge = tsr_half(0.0);

	{
		float2 ScreenPixelVelocity = ScreenVelocity * ScreenVelocityToInputPixelVelocity;
		float ScreenPixelVelocityLength = dot(ScreenPixelVelocity, ScreenPixelVelocity);
		
		UNROLL_N(CONFIG_SAMPLE_PAIRS)
		for (uint i = 0; i < CONFIG_SAMPLE_PAIRS; i++)
		ISOLATE
		{
			tsr_short2 Offset0;
			tsr_short2 Offset1;
			
			float2 NeighborEncodedVelocity0;
			float2 NeighborEncodedVelocity1;

			float2 NeighborPixelVelocity0;
			float2 NeighborPixelVelocity1;

			float NeighborPixelVelocityLength0;
			float NeighborPixelVelocityLength1;
			
			bool bNeighborIsParallaxRejected0;
			bool bNeighborIsParallaxRejected1;
			
			#if CONFIG_BUTTERFLY_KERNEL
			{
				const uint PairIndex = i;
				
				const uint ButterflyArray0[] = { 0x0, 0x0, 0x0, 0x1 };
				const uint ButterflyArray1[] = { 0x1, 0x2, 0x3, 0x2 };
				
				uint FetchIndex[2];
				FWaveBroadcastSettings BroadcastSettings[2];
				BroadcastSettings[0] = InitWaveXorButterfly(ButterflyArray0[PairIndex]);
				BroadcastSettings[1] = InitWaveXorButterfly(ButterflyArray1[PairIndex]);
				
				if (PairIndex == 3)
				{
					FetchIndex[0] = 2;
					FetchIndex[1] = 1;
					Offset0 = tsr_short2(-1, 1);
				}
				else
				{
					FetchIndex[0] = PairIndex + 1;
					FetchIndex[1] = PairIndex + 1;
					Offset0 = tsr_short2(Offsets2x2[PairIndex + 1]);
				}

				Offset0 *= LaneOffsetSign;
				Offset1 = -Offset0;

				NeighborEncodedVelocity0 = WaveBroadcast(BroadcastSettings[0], EncodedVelocityNeighborhood[FetchIndex[0]]);
				NeighborEncodedVelocity1 = WaveBroadcast(BroadcastSettings[1], EncodedVelocityNeighborhood[FetchIndex[1]]);
			
				NeighborPixelVelocity0 = WaveBroadcast(BroadcastSettings[0], PixelVelocityNeighborhood[FetchIndex[0]]);
				NeighborPixelVelocity1 = WaveBroadcast(BroadcastSettings[1], PixelVelocityNeighborhood[FetchIndex[1]]);
			
				NeighborPixelVelocityLength0 = tsr_half(WaveBroadcast(BroadcastSettings[0], PixelVelocityLengthNeighborhood[FetchIndex[0]]));
				NeighborPixelVelocityLength1 = tsr_half(WaveBroadcast(BroadcastSettings[1], PixelVelocityLengthNeighborhood[FetchIndex[1]]));
				
				bNeighborIsParallaxRejected0 = WaveBroadcast(BroadcastSettings[0], ParallaxRejectionMaskNeighborhood[FetchIndex[0]]) < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD);
				bNeighborIsParallaxRejected1 = WaveBroadcast(BroadcastSettings[1], ParallaxRejectionMaskNeighborhood[FetchIndex[1]]) < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD);
			}
			#else
			{
				const uint NeightbordId0 = i + 1;
				const uint NeightbordId1 = i + 1 + CONFIG_SAMPLE_PAIRS;
			
				#if CONFIG_SAMPLES == 9
					Offset0 = tsr_short2(kOffsets3x3[kSquareIndexes3x3[NeightbordId0]]);
					Offset1 = tsr_short2(kOffsets3x3[kSquareIndexes3x3[NeightbordId1]]);
				#elif CONFIG_SAMPLES == 5
					Offset0 = tsr_short2(kOffsets3x3[kPlusIndexes3x3[NeightbordId0]]);
					Offset1 = tsr_short2(kOffsets3x3[kPlusIndexes3x3[NeightbordId1]]);
				#endif
					
				NeighborEncodedVelocity0 = EncodedVelocityNeighborhood[NeightbordId0];
				NeighborEncodedVelocity1 = EncodedVelocityNeighborhood[NeightbordId1];
			
				NeighborPixelVelocity0 = PixelVelocityNeighborhood[NeightbordId0];
				NeighborPixelVelocity1 = PixelVelocityNeighborhood[NeightbordId1];
			
				NeighborPixelVelocityLength0 = dot(NeighborPixelVelocity0, NeighborPixelVelocity0);
				NeighborPixelVelocityLength1 = dot(NeighborPixelVelocity1, NeighborPixelVelocity1);
				
				bNeighborIsParallaxRejected0 = ParallaxRejectionMaskNeighborhood[NeightbordId0] < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD);
				bNeighborIsParallaxRejected1 = ParallaxRejectionMaskNeighborhood[NeightbordId1] < tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD);
			}
			#endif

			tsr_half2 NeighborDeltaPixelVelocity0 = tsr_half2(ScreenPixelVelocity - NeighborPixelVelocity0);
			tsr_half2 NeighborDeltaPixelVelocity1 = tsr_half2(ScreenPixelVelocity - NeighborPixelVelocity1);
			
			// Detect edge of the velocity
			//{
			//	tsr_half MaxDeltaVelocityLength = saturate(max(NeighborPixelVelocityLength0, NeighborPixelVelocityLength1));
			//
			//	if (i == 0)
			//		IsVelocityEdge = MaxDeltaVelocityLength;
			//	else
			//		IsVelocityEdge = max(IsVelocityEdge, MaxDeltaVelocityLength);
			//}

			// Detect and hole fill pixel thin parallax rejection to reduce distractnesss.
			{
				bool bIsPixelThinRejection = bIsParallaxRejected && !bNeighborIsParallaxRejected0 && !bNeighborIsParallaxRejected1;

				tsr_half IsSomeWhatIdentical0 = saturate(tsr_half(1.0) - dot(NeighborDeltaPixelVelocity0, NeighborDeltaPixelVelocity0));
				tsr_half IsSomeWhatIdentical1 = saturate(tsr_half(1.0) - dot(NeighborDeltaPixelVelocity1, NeighborDeltaPixelVelocity1));

				FLATTEN
				if (bIsPixelThinRejection && NeighborPixelVelocityLength0 > ScreenPixelVelocityLength && IsSomeWhatIdentical1 > 0.0)
				{
					EndodedScreenVelocity = NeighborEncodedVelocity0;
					HoleFilledVelocityMask = tsr_half(1.0);
				}
				else if (bIsPixelThinRejection && NeighborPixelVelocityLength1 > ScreenPixelVelocityLength && IsSomeWhatIdentical0 > 0.0)
				{
					EndodedScreenVelocity = NeighborEncodedVelocity1;
					HoleFilledVelocityMask = tsr_half(1.0);
				}
			}

			// Reject high frequency on velocity edge discontinuity.
			{
				tsr_half IsOverlapingEdge0 = tsr_half(1.0) - dot(saturate(NeighborDeltaPixelVelocity0 * Offset0), tsr_half(1.0).xx); // * saturate(ScreenPixelVelocityLength - NeighborPixelVelocityLength0);
				tsr_half IsOverlapingEdge1 = tsr_half(1.0) - dot(saturate(NeighborDeltaPixelVelocity1 * Offset1), tsr_half(1.0).xx); // * saturate(ScreenPixelVelocityLength - NeighborPixelVelocityLength1);
				
				tsr_half IsOverlapingEdge = min(IsOverlapingEdge0, IsOverlapingEdge1);

				if (i == 0)
					RejectHighFrequency = IsOverlapingEdge;
				else
					RejectHighFrequency = min(RejectHighFrequency, IsOverlapingEdge);
			}
		}

		// If the hole filling velocity has better result that the neighborhood, use that.
		FLATTEN
		if (tsr_half(HoleFillingOutOfRange) > HoleFilledVelocityMask && bIsParallaxRejected)
		{
			float VelocityDelta = length(ScreenPixelVelocity - HoleFillingPixelVelocity);

			float2 HoleFillingVelocity = HoleFillingPixelVelocity * InputPixelVelocityToScreenVelocity;

			EndodedScreenVelocity = EncodeVelocityToTexture(float3(HoleFillingVelocity, 0.0)).xy;
			HoleFilledVelocityMask = tsr_half(HoleFillingOutOfRange) * tsr_half(saturate(MaxHollFillPixelVelocity - VelocityDelta));
		}

		// Remove noise from high frequency rejections.
		RejectHighFrequency = saturate(tsr_half(1.0) - RejectHighFrequency * tsr_half(1.1));

		// Do not reject high frequency additionally where hole filling happen
		RejectHighFrequency = max(RejectHighFrequency, HoleFilledVelocityMask);
	}

	if (all(InputPixelPos < tsr_short2(InputInfo_ViewportMax)))
	{
		HoleFilledVelocityOutput[InputPixelPos] = EndodedScreenVelocity;
		HoleFilledVelocityMaskOutput[InputPixelPos] = tsr_half2(HoleFilledVelocityMask, RejectHighFrequency);

		#if DEBUG_OUTPUT
		{
			DebugOutput[InputPixelPos] = Debug;
		}
		#endif
	}
}
