// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	VirtualShadowMapProjection.usf: 
=============================================================================*/

#define SUPPORT_CONTACT_SHADOWS 1
#include "../Common.ush"
#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "../DeferredLightingCommon.ush"
#include "../LightShaderParameters.ush"
#include "../LightGridCommon.ush"
#include "../HairStrands/HairStrandsVisibilityCommon.ush"
#include "../Visualization.ush"
#include "VirtualShadowMapPageAccessCommon.ush"
#include "VirtualShadowMapProjectionCommon.ush"
#include "VirtualShadowMapProjectionDirectional.ush"
#include "VirtualShadowMapProjectionSpot.ush"
#include "VirtualShadowMapTransmissionCommon.ush"
#include "/Engine/Shared/VirtualShadowMapDefinitions.h"

#if HAS_HAIR_STRANDS
#define VOXEL_TRAVERSAL_TYPE VOXEL_TRAVERSAL_LINEAR_MIPMAP
#define VOXEL_TRAVERSAL_DEBUG 0
#include "../HairStrands/HairStrandsVoxelPageCommon.ush"
#include "../HairStrands/HairStrandsVoxelPageTraversal.ush"
#endif

#ifndef DIRECTIONAL_LIGHT
#define DIRECTIONAL_LIGHT 0
#endif

#ifndef VISUALIZE_OUTPUT
#define VISUALIZE_OUTPUT 0
#endif

#define CONTACT_SHADOW_SAMPLES 8

float4 EncodeLightAttenuationFromMask(float ShadowMask, float SSSTransmission)
{
	const float ShadowFadeFraction = 1;

	// 0 is shadowed, 1 is unshadowed
	// RETURN_COLOR not needed unless writing to SceneColor;
	//float FadedShadow = lerp(1.0f, Square(ShadowMask), ShadowFadeFraction);
	//float FadedSSSShadow = lerp(1.0f, Square(SSSTransmission), ShadowFadeFraction);
	float FadedShadow = lerp(1.0f, ShadowMask, ShadowFadeFraction);
	float FadedSSSShadow = lerp(1.0f, SSSTransmission, ShadowFadeFraction);

	// the channel assignment is documented in ShadowRendering.cpp (look for Light Attenuation channel assignment)
	return EncodeLightAttenuation(half4(FadedShadow, FadedSSSShadow, FadedShadow, FadedSSSShadow));
}

Texture2D<float2> InputShadowFactor;

void VirtualShadowMapCompositePS(
	in float4 SvPosition : SV_Position,
	out float4 OutShadowMask : SV_Target)
{
	float2 ShadowFactor = InputShadowFactor.Load(int3(SvPosition.xy, 0));
	OutShadowMask = EncodeLightAttenuationFromMask(ShadowFactor.x, ShadowFactor.y);
}


SCHEDULER_MIN_PRESSURE
MAX_OCCUPENCY

// Returns hit distance or negative if miss
float VirtualShadowMapScreenRayCast(
	float3 RayOriginTranslatedWorld, float3 RayDirection, float RayLength,
	int NumSteps, float Dither)
{
	float StepOffset = Dither - 0.5f;

	bool bHitCastContactShadow = false;
	float HitDistance = ShadowRayCast(
		RayOriginTranslatedWorld, RayDirection, RayLength,
		NumSteps, StepOffset, bHitCastContactShadow);

	return (bHitCastContactShadow) ? HitDistance : -1.0f;
}

float3 GetEstimatedGeoWorldNormal(float3 TranslatedWorldPosition, float2 ScreenUV)
{
	// Figure out slope, we do world space since that is the space where we might override using the shading normal...
	float3 TranslatedWorldPositionDDX = DDX(TranslatedWorldPosition);
	float3 TranslatedWorldPositionDDY = DDY(TranslatedWorldPosition);
	float3 EstimatedGeoWorldNormal = cross(TranslatedWorldPositionDDX, TranslatedWorldPositionDDY);

	// Handle NaNs; will cause it to revert to shading normal below
	float LengthSq = dot(EstimatedGeoWorldNormal, EstimatedGeoWorldNormal);
	EstimatedGeoWorldNormal = LengthSq > 1e-8f ? normalize(EstimatedGeoWorldNormal) : float3(0, 0, 0);

#if 1
	// NOTE: Gbuffer normal is not the surface normal for hair; hair lighting takes a different path but possibly
	// necessary to do some sort of special casing here (disable normal offset and biasing entirely?).
	FGBufferData GBufferData = GetGBufferData(ScreenUV);
	// If the estimated geo normal is too far out we assume it's broken (derivative includes other surfaces or background) and fall back to the shading normal
	if (dot(GBufferData.WorldNormal, EstimatedGeoWorldNormal) < 0.25f)
	{
		EstimatedGeoWorldNormal = GBufferData.WorldNormal;
	}
#endif

	return EstimatedGeoWorldNormal;
}

FLightShaderParameters ConvertFromLocal( const FLocalLightData LightData )
{
	FLightShaderParameters Light = (FLightShaderParameters)0;
	Light.Position					= LightData.LightPositionAndInvRadius.xyz - LWCHackToFloat(PrimaryView.PreViewTranslation);
	Light.TranslatedWorldPosition	= LightData.LightPositionAndInvRadius.xyz;
	Light.InvRadius					= LightData.LightPositionAndInvRadius.w;
	Light.Color						= LightData.LightColorAndFalloffExponent.xyz;
	Light.FalloffExponent			= LightData.LightColorAndFalloffExponent.w;
	Light.Direction					= LightData.LightDirectionAndShadowMask.xyz;
	Light.Tangent					= LightData.LightTangentAndSoftSourceRadius.xyz;
	Light.SpotAngles				= LightData.SpotAnglesAndSourceRadiusPacked.xy;
	Light.SpecularScale				= 1;
	Light.SourceRadius				= LightData.SpotAnglesAndSourceRadiusPacked.z;
	Light.SoftSourceRadius			= LightData.LightTangentAndSoftSourceRadius.w;
	Light.SourceLength				= f16tof32(asuint(LightData.SpotAnglesAndSourceRadiusPacked.w));
	return Light;
}

float4 ComputeRandom4(uint2 PixelPosition)
{
	const uint InSeed = View.StateFrameIndexMod8;
	const uint2 Seed0 = Rand3DPCG16(int3(PixelPosition, InSeed)).xy;
	const uint2 Seed1 = Rand3DPCG16(int3(PixelPosition + 17, InSeed)).xy;
	return float4(
		Hammersley16(InSeed, 8, Seed0),
		Hammersley16(InSeed, 8, Seed1));
}

int4 ProjectionRect;
float ContactShadowLength;
float NormalBias;
int SMRTRayCount;					// 0 = off
int SMRTSamplesPerRay;
float SMRTRayLengthScale;			// Directional lights
float SMRTCotMaxRayAngleFromLight;	// Spot/point lights
float SMRTTexelDitherScale;			// Currently only directional lights

// One pass projection
RWTexture2D< uint4 >OutShadowMaskBits;

// Single light per pass
// Light parameters loaded via GetRootLightShaderParameters();
int LightUniformVirtualShadowMapId;
RWTexture2D< float2 > OutShadowFactor;

// Visualization output
StructuredBuffer< FPhysicalPageMetaData > PhysicalPageMetaData;
RWTexture2D< float4 > OutVisualize;
int VisualizeModeId;
int VisualizeVirtualShadowMapId;

// Type of input data consume by the page allocation (i.e., data read from the source buffer: Gbuffer, HairStrands data, ...)
#define INPUT_TYPE_GBUFFER 0
#define INPUT_TYPE_HAIRSTRANDS 1
uint InputType;
uint bCullBackfacingPixels;

FVirtualShadowMapSampleResult ProjectLight(
	int VirtualShadowMapId,
	FLightShaderParameters Light,
	uint2 PixelPos,
	float SceneDepth,
	float ContactShadowLengthWorld,
	float3 TranslatedWorldPosition,
	half3 GBufferNormal,
	const half Noise)
{
	const uint ShadingModelID = GetGBufferDataUint(PixelPos).ShadingModelID;
	const bool bIsHairInput = InputType == INPUT_TYPE_HAIRSTRANDS;

	// NOTE: If PrimaryView.PreViewTranslation is guaranteed to be the camera position we can simplify
	const float DistanceToCamera = length(TranslatedWorldPosition - View.TranslatedWorldCameraOrigin);
	const float NormalBiasLength = max(0.01f, NormalBias * DistanceToCamera / View.ViewToClip._11);

#if DIRECTIONAL_LIGHT
	float3 L = Light.Direction;
	bool bInLightRegion = true;
#else	
	float3 ToLight = Light.TranslatedWorldPosition - TranslatedWorldPosition;
	float d2 = dot( ToLight, ToLight );
	float InvDist = rsqrt( d2 );
	half3 L = ToLight * InvDist;
	
	bool bInLightRadius = InvDist >= Light.InvRadius;
	bool bInLightCone = dot( L, Light.Direction ) >= Light.SpotAngles.x;
	bool bInLightRegion = bInLightRadius && bInLightCone;
#endif // DIRECTIONAL_LIGHT

	FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();

	const bool bValidPixel = bIsHairInput || ShadingModelID != SHADINGMODELID_UNLIT;

	BRANCH
	if (bInLightRegion && bValidPixel)
	{
		const bool bBackfaceCull = (bCullBackfacingPixels != 0) && !bIsHairInput && !IsSubsurfaceModel(ShadingModelID);

		const half3 WorldNormal = (bIsHairInput || ShadingModelID == SHADINGMODELID_HAIR) ? L : GBufferNormal;
		TranslatedWorldPosition += WorldNormal * NormalBiasLength;

		if (SMRTRayCount > 0)
		{
		#if DIRECTIONAL_LIGHT
			Result = TraceDirectional(
				VirtualShadowMapId,
				Light,
				PixelPos,
				SceneDepth,
				TranslatedWorldPosition,
				ContactShadowLengthWorld,
				SMRTRayCount,
				SMRTSamplesPerRay,
				SMRTRayLengthScale,
				Noise,
				bBackfaceCull,
				WorldNormal,
				SMRTTexelDitherScale);
		#else
			Result = TraceLocalLight(
				VirtualShadowMapId,
				Light,
				PixelPos,
				SceneDepth,
				TranslatedWorldPosition,
				ContactShadowLengthWorld,
				SMRTRayCount,
				SMRTSamplesPerRay,
				SMRTCotMaxRayAngleFromLight,
				Noise,
				bBackfaceCull,
				WorldNormal);
		#endif // DIRECTIONAL_LIGHT
		}
		else
		{
			Result = SampleVirtualShadowMapTranslatedWorld(
				VirtualShadowMapId,
				TranslatedWorldPosition,
				ContactShadowLengthWorld,
				WorldNormal);
		}

		// Do not run contact shadow when computing the hair shadow mask (i.e. shadow mask applied on hair, has the scene 
		// depth buffer contains fully opaque depth, which create false positive intersection resulting in wrong self shadowing)
		if (!bIsHairInput)
		{
			if (ContactShadowLengthWorld > 0.0f)
			{
				half ContactShadowHitDistance = VirtualShadowMapScreenRayCast(TranslatedWorldPosition, L, ContactShadowLengthWorld, CONTACT_SHADOW_SAMPLES, Noise);
				if (ContactShadowHitDistance > 0.0f)
				{
					Result.ShadowFactor = 0.0f;
					Result.OccluderDistance = ContactShadowHitDistance;
				}
			}
		}

		// Hair strands voxel traversal to apply hair shadow on top of opaque geometry
		#if HAS_HAIR_STRANDS
		if (!bIsHairInput)
		{
			float3 RayStart = 0;
			float3 RayEnd = 0;
			bool bCastHairRay = false;
			float4 Random = 0;
			if (Result.ShadowFactor > 0)
			{
				Random = ComputeRandom4(PixelPos);
				uint RayIndex = min(Random.w * SMRTRayCount, SMRTRayCount - 1);

			#if DIRECTIONAL_LIGHT
				bCastHairRay = GenerateRayDirectional(
					Light,
					PixelPos,
					TranslatedWorldPosition,
					ContactShadowLengthWorld,
					RayIndex,
					SMRTRayCount,
					RayStart,
					RayEnd);
			#else
				bCastHairRay = GenerateRayLocalLight(
					Light,
					PixelPos,
					TranslatedWorldPosition,
					WorldNormal,
					SMRTCotMaxRayAngleFromLight,
					RayIndex,
					SMRTRayCount,
					RayStart,
					RayEnd);
			#endif
			}

			if (bCastHairRay)
			{
				// Jitter start position to mask/compensate coarse voxel resolution
				{
					const float PositionBiasScale = 0.5f;
					const float3 DepthBias = VirtualVoxel.VoxelWorldSize * (VirtualVoxel.DepthBiasScale_Shadow * L + PositionBiasScale * (Random.xyz * 2 - 1));
					RayStart += DepthBias;
				}

				const float DistanceThreshold = 100000.0f;
				const float CoverageThreshold = 0.995f; // When Coverage is high, we do not trace shadow on opaque since hair/fur is covering the background.

				FVirtualVoxelCommonDesc CommonDesc;
				CommonDesc.PageCountResolution		= VirtualVoxel.PageCountResolution;
				CommonDesc.VoxelWorldSize			= VirtualVoxel.VoxelWorldSize;
				CommonDesc.PageTextureResolution	= VirtualVoxel.PageTextureResolution;
				CommonDesc.PageResolution			= VirtualVoxel.PageResolution;

				FHairTraversalSettings TraversalSettings = InitHairTraversalSettings();
				TraversalSettings.DensityScale		= VirtualVoxel.DensityScale_Shadow;
				TraversalSettings.CountThreshold	= 1;
				TraversalSettings.DistanceThreshold = DistanceThreshold;
				TraversalSettings.bDebugEnabled		= false;
				TraversalSettings.SteppingScale		= VirtualVoxel.SteppingScale_Shadow;
				TraversalSettings.Random			= Random.xyz;
				TraversalSettings.PixelRadius		= SceneDepth * VirtualVoxel.HairCoveragePixelRadiusAtDepth1;
				TraversalSettings.bUseOpaqueVisibility = false;
				TraversalSettings.bCastShadow		= true;

				const uint VoxelDescCount = VirtualVoxel.NodeDescCount;
				for (uint VoxelDescIt=0; VoxelDescIt<VoxelDescCount; ++VoxelDescIt)
				{
					const FPackedVirtualVoxelNodeDesc PackedNode = VirtualVoxel.NodeDescBuffer[VoxelDescIt];
					const FVirtualVoxelNodeDesc NodeDesc = UnpackVoxelNode(PackedNode, VirtualVoxel.PageResolution);

					FHairTraversalResult HairResult = InitHairTraversalResult();
					HairResult = ComputeHairCountVirtualVoxel(
						RayStart,
						RayEnd,
						CommonDesc,
						NodeDesc,
						VirtualVoxel.PageIndexBuffer,
						VirtualVoxel.PageIndexOccupancyBuffer,
						VirtualVoxel.PageTexture,
						TraversalSettings);

					Result.ShadowFactor = min(Result.ShadowFactor, saturate(1 - HairResult.HairCount));
				}
			}
		}
		#endif
	}

	return Result;
}

void OutputVisualize( uint2 PixelPos, FVirtualShadowMapSampleResult Result )
{
	// NOTE: Important to *not* write output if it isn't a recognized mode, as a different
	// pass may write that output instead.
	float3 Output = float3( 1, 0, 1 );
	bool bWriteOutput = false;

	if ( Result.bValid )
	{
		bWriteOutput = true;

		uint2 vPage = Result.VirtualTexelAddress.xy >> VSM_LOG2_PAGE_SIZE;
		uint2 pPage = Result.PhysicalTexelAddress.xy >> VSM_LOG2_PAGE_SIZE;
		bool bValidPageAddress = all( pPage < uint2(VirtualShadowMap.PhysicalPoolSizePages) );
		
		FPhysicalPageMetaData pPageMeta = (FPhysicalPageMetaData)0;
		if (bValidPageAddress)
		{
			pPageMeta = PhysicalPageMetaData[VSMPhysicalPageAddressToIndex(pPage)];
		}

		if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_SHADOW_FACTOR )
		{
			Output = Result.ShadowFactor.xxx;
		}
		else if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_CLIPMAP_OR_MIP )
		{
			float3 Color = IntToColor( Result.ClipmapIndexOrMipLevel );
			Output = 0.8f*Color + 0.2f*Result.ShadowFactor.xxx;
		}
		else if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_VIRTUAL_PAGE && bValidPageAddress )
		{
			float3 PageColor = IntToColor( vPage.x + ( vPage.y << 10U ) );
			float3 MipColor = IntToColor( Result.ClipmapIndexOrMipLevel );
			Output = 0.4f*PageColor + 0.4f*MipColor + 0.2f*Result.ShadowFactor.xxx;
		}		
		else if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_SMRT_RAY_COUNT )
		{
			Output = GreenToRedTurbo( float( Result.RayCount ) / float( SMRTRayCount ) );
		}
		else if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_CACHED_PAGE && bValidPageAddress )
		{
			bool bUncachedDynamic = (pPageMeta.Flags & VSM_DYNAMIC_UNCACHED_FLAG) != 0;
			bool bUncachedStatic = (pPageMeta.Flags & VSM_STATIC_UNCACHED_FLAG) != 0;
			// Red = both uncached, blue = only static cached, green otherwise
			float3 CacheColor = float3(0, 1, 0);
			if (bUncachedDynamic)
			{
				CacheColor = bUncachedStatic ? float3(1, 0, 0) : float3(0, 0, 1);
			}
			float3 PageColor = IntToColor(vPage.x + (vPage.y << 10U));
			Output = 0.55f*CacheColor + 0.25f*PageColor + 0.2f*Result.ShadowFactor.xxx;
		}
		/*
		else if ( VisualizeModeId == VIRTUAL_SHADOW_MAP_VISUALIZE_CACHED_PAGE_AGE && bValidPageAddress )
		{
			float3 Color = GreenToRedTurbo( 1.0f - 0.1f * float(pPageMeta.Age) );
			Output = lerp( Color, Result.ShadowFactor.xxx, 0.15f );
		}
		else if ( VisualizeModeId == 6 )	// OccluderDistance
		{
			Output = ColorMapViridis( 0.001f * Result.OccluderDistance );
		}
		*/
		else
		{
			bWriteOutput = false;
		}
	}

	if (bWriteOutput)
	{
		OutVisualize[PixelPos] = float4(Output, 1.0f);
	}
}


[numthreads(8, 8, 1)]
void VirtualShadowMapProjection(
	uint3	GroupId				: SV_GroupID,
	uint	GroupIndex			: SV_GroupIndex,
	uint3	DispatchThreadId	: SV_DispatchThreadID )
{
	// Morton order within a group so page access/atomics are more coherent and wave-swizzled gradients are possible.
	uint2 PixelCoord = DispatchThreadId.xy;
	uint2 LocalPixelPos = 8 * GroupId.xy + MortonDecode( GroupIndex );
	uint2 PixelPos = LocalPixelPos + uint2( ProjectionRect.xy );
	if ( any( PixelPos >= uint2( ProjectionRect.zw ) ) )
	{
		return;
	}
	
	float DeviceZ = SceneTexturesStruct.SceneDepthTexture.Load( int3( PixelPos, 0 ) ).r;
	const bool bIsHairInput = InputType == INPUT_TYPE_HAIRSTRANDS;
	#if HAS_HAIR_STRANDS
	if (bIsHairInput)
	{
		DeviceZ = HairStrands.HairOnlyDepthTexture.Load(int3(PixelPos, 0)).x;
		if (DeviceZ == 0)
		{
			return;
		}
	}
	#endif
	const float SceneDepth = ConvertFromDeviceZ( DeviceZ );

	const float4 SvPosition = float4( float2( PixelPos ) + 0.5, DeviceZ, 1.0f );
	const float3 TranslatedWorldPosition = SvPositionToTranslatedWorld( SvPosition );

	const float ContactShadowLengthWorld = ContactShadowLength * View.ClipToView[1][1] * SceneDepth;
	const half Noise = InterleavedGradientNoise( SvPosition.xy, View.StateFrameIndexMod8 );

	const half3 GBufferNormal = GetGBufferDataUint( PixelPos, true ).WorldNormal;
	const half SubsurfaceOpacity = bIsHairInput ? 1.0f : GetSubsurfaceOpacityFromGbuffer( PixelPos );

	FVirtualShadowMapSampleResult VisualizeResult = InitVirtualShadowMapSampleResult();

#if ONE_PASS_PROJECTION
	uint EyeIndex = 0; // TODO: Instanced stereo
	uint GridLinearIndex = ComputeLightGridCellIndex( LocalPixelPos, SceneDepth, EyeIndex );
	const FCulledLightsGridData CulledLightGridData = GetCulledLightsGrid( GridLinearIndex, EyeIndex );

	// We can only handle so many lights in our output encoding right now, so no purpose in computing more
	uint LightCount = min(GetPackedShadowMaskMaxLightCount(), CulledLightGridData.NumLocalLights);

	uint4 ShadowMask = InitializePackedShadowMask();

	LOOP
	for (uint Index = 0; Index < LightCount; ++Index)
	{
		const FLocalLightData LightData = GetLocalLightData( CulledLightGridData.DataStartIndex + Index, EyeIndex );
		int VirtualShadowMapId = LightData.VirtualShadowMapId;

		if (VirtualShadowMapId != INDEX_NONE)
		{
			FLightShaderParameters Light = ConvertFromLocal( LightData );

			FVirtualShadowMapSampleResult Result = ProjectLight(
				VirtualShadowMapId,
				Light,
				PixelPos,
				SceneDepth,
				ContactShadowLengthWorld,
				TranslatedWorldPosition,
				GBufferNormal,
				Noise);

			// NOTE: Subsurface opacity is handled in the clustered shading pass in the one pass projection path

			PackShadowMask(ShadowMask, Result.ShadowFactor, Index);

			if (VisualizeVirtualShadowMapId == VirtualShadowMapId)
			{
				VisualizeResult = Result;
			}
		}
	}

	OutShadowMaskBits[ PixelPos ] = ~ShadowMask;

#else // !ONE_PASS_PROJECTION
	{
		int VirtualShadowMapId = LightUniformVirtualShadowMapId;
		FLightShaderParameters Light = GetRootLightShaderParameters(PrimaryView.PreViewTranslation);

		FVirtualShadowMapSampleResult Result = ProjectLight(
			VirtualShadowMapId,
			Light,
			PixelPos,
			SceneDepth,
			ContactShadowLengthWorld,
			TranslatedWorldPosition,
			GBufferNormal,
			Noise);
		
		half SSSTransmission = Result.ShadowFactor;
		if ( SubsurfaceOpacity < 1.0f )
		{
			SSSTransmission = ComputeSimpleSubsurfaceTransmissionFromVirtualShadowMap(
				VirtualShadowMapId,
				TranslatedWorldPosition,
				SubsurfaceOpacity);
		}

		OutShadowFactor[ PixelPos ] = half2( Result.ShadowFactor, SSSTransmission );

		if (VisualizeVirtualShadowMapId == VirtualShadowMapId)
		{
			VisualizeResult = Result;
		}
	}
#endif // ONE_PASS_PROJECTION

#if VISUALIZE_OUTPUT
	if (InputType == INPUT_TYPE_GBUFFER)
	{
		OutputVisualize( PixelPos, VisualizeResult );
	}
#endif // VISUALIZE_OUTPUT
}
