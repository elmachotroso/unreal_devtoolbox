// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "IKRigDefinition.h"

#include "IKRetargeter.generated.h"

struct FIKRetargetPose;

struct UE_DEPRECATED(5.1, "Use URetargetChainSettings instead.") FRetargetChainMap;
USTRUCT()
struct IKRIG_API FRetargetChainMap
{
	GENERATED_BODY()

	FRetargetChainMap() = default;
	FRetargetChainMap(const FName& TargetChain) : TargetChain(TargetChain){}
	
	UPROPERTY(EditAnywhere, Category = Offsets)
	FName SourceChain = NAME_None;
	
	UPROPERTY(EditAnywhere, Category = Offsets)
	FName TargetChain = NAME_None;
};

UENUM(BlueprintType)
enum class ERetargetTranslationMode : uint8
{
	None			UMETA(DisplayName = "None"),
	GloballyScaled	UMETA(DisplayName = "Globally Scaled"),
	Absolute		UMETA(DisplayName = "Absolute"),
};

UENUM(BlueprintType)
enum class ERetargetRotationMode : uint8
{
	
	Interpolated		UMETA(DisplayName = "Interpolated"),
	OneToOne			UMETA(DisplayName = "One to One"),
	OneToOneReversed	UMETA(DisplayName = "One to One Reversed"),
	None				UMETA(DisplayName = "None"),
};

UCLASS()
class IKRIG_API URetargetChainSettings: public UObject
{
	GENERATED_BODY()

	public:
	
	URetargetChainSettings() = default;
	
	URetargetChainSettings(const FName& TargetChain) : TargetChain(TargetChain){}
	
	/** The chain on the Source IK Rig asset to copy animation FROM. */
	UPROPERTY(VisibleAnywhere, Category = "Chain Mapping")
	FName SourceChain = NAME_None;

	/** The chain on the Target IK Rig asset to copy animation TO. */
	UPROPERTY(VisibleAnywhere, Category = "Chain Mapping")
	FName TargetChain = NAME_None;

	/** Whether to copy the shape of the chain from the source skeleton using the Rotation and Translation modes. Default is true.
	* NOTE: All FK operations run before the IK pass to copy the shape of the FK chain from the source skeleton. */
	UPROPERTY(EditAnywhere, Category = "FK Adjustments")
	bool CopyPoseUsingFK = true;
	
	/** Determines how rotation is copied from the source chain to the target chain. Default is Interpolated.
	* Interpolated: Source and target chains are normalized by their length, then each target bone rotation is generated by finding the rotation at the same normalized distance on the source chain and interpolating between the neighboring bones.
	* One to One: Each target bone rotation is copied from the equivalent bone in the source chain, based on the order in the chain, starting at the root of the chain. If the target chain has more bones than the source, the extra bones will remain at their reference pose.
	* One to One Reversed: Same as One-to-One, but starting from the tip of the chain.
	* None: The rotation of each target bone in the chain is left at the reference pose. */
	UPROPERTY(EditAnywhere, Category = "FK Adjustments")
	ERetargetRotationMode RotationMode;

	/** Range +/- infinity. Default 1. Scales the amount of rotation that is applied.
	*  If Rotation Mode is None this parameter has no effect.
	*  Otherwise, this parameter blends the rotation of each bone in the chain from the base retarget pose (0) to the retargeted pose (1).*/
	UPROPERTY(EditAnywhere, Category = "FK Adjustments", meta = (UIMin = "0.0", UIMax = "1.0"))
	float RotationAlpha = 1.0f;

	/** Determines how translation is copied from the source chain to the target chain. Default is None.
	* None: Translation of target bones are left unmodified from the retarget pose.
	* Globally Scaled: Translation of target bone is set to the source bone offset multiplied by the global scale of the skeleton (determined by the relative height difference between retarget root bones).
	* Absolute: Translation of target bone is set to the absolute position of the source bone. */
	UPROPERTY(EditAnywhere, Category = "FK Adjustments")
	ERetargetTranslationMode TranslationMode;

	/** Range +/- infinity. Default 1. Scales the amount of translation that is applied. Exact behavior depends on the Translation Mode.
	*  In None Mode, this parameter has no effect.
	*  In Globally Scaled and Absolute modes, the translation offset is scaled by this parameter.*/
	UPROPERTY(EditAnywhere, Category = "FK Adjustments", meta = (UIMin = "0.0", UIMax = "1.0"))
	float TranslationAlpha = 1.0f;

	/** Whether to modify the location of the IK goal on this chain. Default is true.
	 * NOTE: This only has an effect if the chain has an IK Goal assigned to it in the Target IK Rig asset.
	 * NOTE: If off, and this chain has an IK Goal, the IK will still be evaluated, but the Goal is set to the input bone location (from the FK pass).*/
	UPROPERTY(EditAnywhere, Category = "IK Adjustments")
	bool DriveIKGoal = true;

	/** Range 0 to 1. Default 0. Blends IK goal position from retargeted location (0) to source bone location (1).
	*  At 0 the goal is placed at the retargeted location.
	*  At 1 the goal is placed at the location of the source chain's end bone. */
	UPROPERTY(EditAnywhere, Category = "IK Adjustments", meta = (ClampMin = "0.0", ClampMax = "1.0", UIMin = "0.0", UIMax = "1.0"))
	float BlendToSource = 0.0f;
	
	/** Range 0 to 1. Default 1. Weight each axis separately when using Blend To Source.
	*  At 0 the goal is placed at the retargeted location.
	*  At 1 the goal is placed at the location of the source chain's end bone. */
	UPROPERTY(EditAnywhere, Category = "IK Adjustments", meta = (ClampMin = "0.0", ClampMax = "1.0", UIMin = "0.0", UIMax = "1.0"))
	FVector BlendToSourceWeights = FVector::OneVector;

	/** Default 0, 0, 0. Apply static global-space offset to IK goal position. */
	UPROPERTY(EditAnywhere, Category = "IK Adjustments")
	FVector StaticOffset;
	
	/** Range 0 to 5. Default 1. Brings IK goal closer (-) or further (+) from origin of chain.
	*  At 0 the effector is placed at the origin of the chain.
	*  Values greater than 1 will stretch the chain beyond the retargeted length. */
	UPROPERTY(EditAnywhere, Category = "IK Adjustments", meta = (ClampMin = "0.0", ClampMax = "5.0", UIMin = "0.1", UIMax = "2.0"))
	float Extension = 1.0f;

	/** Range 0 to 1. Default 0. Blends IK goal from retargeted velocity (0) to source bone velocity (1).
	*  At 0 the goal is placed at the retargeted location.
	*  At 1 the goal is placed at the retargeted location but clamped by the velocity of the source chain's end bone.
	*  Values between 0 and 1 will blend the applied velocity between the retargeted amount and the source bone amount.*/
	UPROPERTY(EditAnywhere, Category = "Experimental (May Change)", meta = (ClampMin = "0.0", ClampMax = "1.0", UIMin = "0.0", UIMax = "1.0"))
	float MatchSourceVelocity = 0.0f;

	/** Range 0 to 1000. Default 5. The maximum speed a source goal can be moving before being considered statically planted.
	*  At 0 the goal is placed at the retargeted location.
	*  At 1 the goal is placed at the retargeted location but clamped by the velocity of the source chain's end bone.
	*  Values between 0 and 1 will blend the applied velocity between the retargeted amount and the source bone amount.*/
	UPROPERTY(EditAnywhere, Category = "Experimental (May Change)", meta = (ClampMin = "0.0", ClampMax = "100.0", UIMin = "0.0", UIMax = "100.0"))
	float VelocityThreshold = 5.0f;

	/** Range 0 to 1. Default is 1.0. Blend IK effector at the end of this chain towards the original position
	*  on the source skeleton (0.0) or the position on the retargeted target skeleton (1.0). */
	//UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = IkMode, meta = (ClampMin = "0.0", ClampMax = "1.0", UIMin = "0.0", UIMax = "1.0"))
	//float IkToSourceOrTarget = 1.0f;

	/** Range 0 to 1. Default 0. Allow the chain to stretch by translating to reach the IK goal locations.
	*  At 0 the chain will not stretch at all. At 1 the chain will be allowed to stretch double it's full length to reach IK. */
	//UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Stretch, meta = (ClampMin = "0.0", ClampMax = "1.0", UIMin = "0.0", UIMax = "1.0"))
	//float StretchTolerance = 0.0f;

	/** When true, the source IK position is calculated relative to a source bone and applied relative to a target bone. */
	//UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = IkMode)
	//bool bIkRelativeToSourceBone = false;
	
	/** A bone in the SOURCE skeleton that the IK location is relative to. */
	//UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = IkMode, meta = (EditCondition="bIkRelativeToSourceBone"))
	//FName IkRelativeSourceBone;
	
	/** A bone in the TARGET skeleton that the IK location is relative to.
	 * This is usually the same bone as the source skeleton, but may have a different name in the target skeleton. */
	//UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = IkMode, meta = (EditCondition="bIkRelativeToSourceBone"))
	//FName IkRelativeTargetBone;
};

USTRUCT()
struct IKRIG_API FIKRetargetPose
{
	GENERATED_BODY()
	
public:
	
	FIKRetargetPose() = default;
	
	UPROPERTY(EditAnywhere, Category = RetargetPose)
	FVector RootTranslationOffset = FVector::ZeroVector;
	
	UPROPERTY(EditAnywhere, Category = RetargetPose)
	TMap<FName, FQuat> BoneRotationOffsets;

	// returns true if this is a new offset (not previously recorded)
	void SetBoneRotationOffset(FName BoneName, FQuat RotationOffset, const FIKRigSkeleton& Skeleton);

	void AddTranslationDeltaToRoot(FVector TranslateDelta);

	void SortHierarchically(const FIKRigSkeleton& Skeleton);
};


UCLASS(Blueprintable)
class IKRIG_API UIKRetargeter : public UObject
{
	GENERATED_BODY()
public:

	/** Get read-only access to the source IK Rig asset */
	const UIKRigDefinition* GetSourceIKRig() const { return SourceIKRigAsset.Get(); };
	/** Get read-only access to the target IK Rig asset */
	const UIKRigDefinition* GetTargetIKRig() const { return TargetIKRigAsset.Get(); };
	/** Get read-write access to the source IK Rig asset.
	 * WARNING: do not use for editing the data model. Use Controller class instead. */
	 UIKRigDefinition* GetSourceIKRigWriteable() const { return SourceIKRigAsset.Get(); };
	/** Get read-write access to the target IK Rig asset.
	 * WARNING: do not use for editing the data model. Use Controller class instead. */
	UIKRigDefinition* GetTargetIKRigWriteable() const { return TargetIKRigAsset.Get(); };
	/** Get read-only access to the chain mapping */
	const TArray<TObjectPtr<URetargetChainSettings>> GetAllChainSettings() const { return ChainSettings; };
	/** Get read-only access to a retarget pose */
	const FIKRetargetPose* GetCurrentRetargetPose() const { return &RetargetPoses[CurrentRetargetPose]; };

	/* Get name of Source IK Rig property */
	static const FName GetSourceIKRigPropertyName();
	/* Get name of Target IK Rig property */
	static const FName GetTargetIKRigPropertyName();
#if WITH_EDITOR
	/* Get name of Target Preview Mesh property */
	static const FName GetTargetPreviewMeshPropertyName();
#endif
	/* Get name of default pose */
	static const FName GetDefaultPoseName();

#if WITH_EDITOR
	bool IsInEditRetargetPoseMode() const { return bEditRetargetPoseMode; }
#endif
	
	virtual void PostLoad() override;

private:

	/** The rig to copy animation FROM.*/
	UPROPERTY(VisibleAnywhere, Category = Rigs)
	TObjectPtr<UIKRigDefinition> SourceIKRigAsset = nullptr;
	
	/** The rig to copy animation TO.*/
	UPROPERTY(EditAnywhere, Category = Rigs)
	TObjectPtr<UIKRigDefinition> TargetIKRigAsset = nullptr;

public:

#if WITH_EDITORONLY_DATA
	/** The Skeletal Mesh to preview the retarget on.*/
	UPROPERTY(EditAnywhere, Category = Rigs)
	TObjectPtr<USkeletalMesh> TargetPreviewMesh = nullptr;
#endif
	
	/** When false, translational motion of skeleton root is not copied. Useful for debugging.*/
	UPROPERTY(EditAnywhere, Category = RetargetPhases)
	bool bRetargetRoot = true;
	
	/** When false, limbs are not copied via FK. Useful for debugging limb issues suspected to be caused by FK pose.*/
	UPROPERTY(EditAnywhere, Category = RetargetPhases)
	bool bRetargetFK = true;
	
	/** When false, IK is not applied as part of retargeter. Useful for debugging limb issues suspected to be caused by IK.*/
	UPROPERTY(EditAnywhere, Category = RetargetPhases)
	bool bRetargetIK = true;

#if WITH_EDITORONLY_DATA
	/** Move the target actor in the viewport for easier visualization next to the source actor.*/
	UPROPERTY(EditAnywhere, Category = TargetActorPreview, meta = (UIMin = "-2000.0", UIMax = "2000.0"))
	float TargetActorOffset = 150.0f;

	/** Scale the target actor in the viewport for easier visualization next to the source actor.*/
	UPROPERTY(EditAnywhere, Category = TargetActorPreview, meta = (UIMin = "0.01", UIMax = "10.0"))
	float TargetActorScale = 1.0f;

	/** The visual size of the bones in the viewport when editing the retarget pose.*/
	UPROPERTY(EditAnywhere, Category = PoseEditSettings, meta = (ClampMin = "0.0", UIMin = "0.01", UIMax = "10.0"))
	float BoneDrawSize = 8.0f;

private:
	/** A special editor-only mode which forces the retargeter to output the current retarget reference pose,
	* rather than actually running the retarget and outputting the retargeted pose. Used in Edit-Pose mode.*/
	UPROPERTY()
	bool bEditRetargetPoseMode = false;

	/** The controller responsible for managing this asset's data (all editor mutation goes through this) */
	UPROPERTY(Transient)
	TObjectPtr<UObject> Controller;
#endif
	
private:
	/** The set of retarget poses available as options for retargeting.*/
	UPROPERTY()
	TMap<FName, FIKRetargetPose> RetargetPoses;

	/** (OLD VERSION) Mapping of chains to copy animation between source and target rigs.*/
	PRAGMA_DISABLE_DEPRECATION_WARNINGS
	UPROPERTY()
	TArray<FRetargetChainMap> ChainMapping_DEPRECATED;
	PRAGMA_ENABLE_DEPRECATION_WARNINGS
	
	/** Settings for how to map source chains to target chains.*/
	UPROPERTY()
	TArray<TObjectPtr<URetargetChainSettings>> ChainSettings;
	
	/** The set of retarget poses available as options for retargeting.*/
	UPROPERTY()
	FName CurrentRetargetPose = DefaultPoseName;
	static const FName DefaultPoseName;

	friend class UIKRetargeterController;
};
