// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfaceGeometryCollection.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * static mesh constants and context
 * -----------------------------------------------------------------
 */

#define SMALL_NUMBER 1e-8
#define MAX_DISTANCE 1e+38
#define BOX_INDEX 0
#define SPHERE_INDEX 1
#define CAPSULE_INDEX 2

struct FDIGeometryCollectionContext
{
	float3 BoundsMin;
	float3 BoundsMax;
	uint NumPieces;	
	Buffer<float4>		WorldTransformBuffer;
	Buffer<float4>		PrevWorldTransformBuffer;
	Buffer<float4>		WorldInverseTransformBuffer;
	Buffer<float4>		PrevWorldInverseTransformBuffer;
	Buffer<float4>		BoundsBuffer;
}; 

#define DIGEOMETRYCOLLECTION_DECLARE_CONSTANTS(NAME)\
float3 BoundsMin_##NAME;\
float3 BoundsMax_##NAME;\
uint NumPieces_##NAME;\
Buffer<float4>		WorldTransformBuffer_##NAME;\
Buffer<float4>		PrevWorldTransformBuffer_##NAME;\
Buffer<float4>		WorldInverseTransformBuffer_##NAME;\
Buffer<float4>		PrevWorldInverseTransformBuffer_##NAME;\
Buffer<float4>		BoundsBuffer_##NAME;\


#define DIGEOMETRYCOLLECTION_MAKE_CONTEXT(NAME)\
FDIGeometryCollectionContext DIContext; \
DIContext.BoundsMin = BoundsMin_##NAME;\
DIContext.BoundsMax = BoundsMax_##NAME;\
DIContext.NumPieces = NumPieces_##NAME;\
DIContext.WorldTransformBuffer =  WorldTransformBuffer_##NAME;\
DIContext.PrevWorldTransformBuffer = PrevWorldTransformBuffer_##NAME;\
DIContext.WorldInverseTransformBuffer = WorldInverseTransformBuffer_##NAME;\
DIContext.PrevWorldInverseTransformBuffer = PrevWorldInverseTransformBuffer_##NAME;\
DIContext.BoundsBuffer = BoundsBuffer_##NAME;\



/* -----------------------------------------------------------------
 * Position / Transform utils
 * -----------------------------------------------------------------
 */

float3 DIGeometryCollection_GetCurrentPosition(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3(DIContext.WorldTransformBuffer[BufferOffset].w, DIContext.WorldTransformBuffer[BufferOffset+1].w, DIContext.WorldTransformBuffer[BufferOffset+2].w);
}

float3 DIGeometryCollection_GetPreviousPosition(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3(DIContext.WorldTransformBuffer[BufferOffset].w, DIContext.WorldTransformBuffer[BufferOffset+1].w, DIContext.WorldTransformBuffer[BufferOffset+2].w);
}

float3x4 DIGeometryCollection_GetCurrentTransform(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.WorldTransformBuffer[BufferOffset], DIContext.WorldTransformBuffer[BufferOffset+1], DIContext.WorldTransformBuffer[BufferOffset+2]);
}

float3x4 DIGeometryCollection_GetInverseTransform(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.WorldInverseTransformBuffer[BufferOffset], DIContext.WorldInverseTransformBuffer[BufferOffset+1], DIContext.WorldInverseTransformBuffer[BufferOffset+2]);
}

float3x4 DIGeometryCollection_GetPreviousTransform(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.PrevWorldTransformBuffer[BufferOffset], DIContext.PrevWorldTransformBuffer[BufferOffset+1], DIContext.PrevWorldTransformBuffer[BufferOffset+2]);
}

float3x4 DIGeometryCollection_GetPreviousInverse(in FDIGeometryCollectionContext DIContext, in int ElementIndex)
{
	const int BufferOffset = 3 * ElementIndex;
    return float3x4(DIContext.PrevWorldInverseTransformBuffer[BufferOffset], DIContext.PrevWorldInverseTransformBuffer[BufferOffset+1], DIContext.PrevWorldInverseTransformBuffer[BufferOffset+2]);
}


/* -----------------------------------------------------------------
 * Collision detection utils
 * -----------------------------------------------------------------
 */

// Given a world space position (WorldPosition) compute the sphere closest point (position,normal,velocity)
float DIGeometryCollection_GetSphereProjection(in float3 LocalPosition, in float3 SphereCenter, in float SphereRadius, in int SphereIndex,
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float3 DeltaPosition = LocalPosition - SphereCenter;
	const float DeltaLength = length(DeltaPosition);
	const float SphereDistance = DeltaLength - SphereRadius;

	if (SphereDistance < OutMinDistance)
	{
		OutMinDistance = SphereDistance;
		OutElementIndex = SphereIndex;

		OutClosestNormal = (DeltaLength > SMALL_NUMBER) ? DeltaPosition / DeltaLength : float3(0,0,0);
		OutClosestPosition = LocalPosition - OutClosestNormal*SphereDistance;
	}
	return SphereDistance;
}

// Given a world space position (WorldPosition) compute the sphere closest point (position,normal,velocity)
float DIGeometryCollection_GetCapsuleProjection(in float3 LocalPosition, in float2 CapsuleSize, in int CapsuleIndex,
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float HalfLength = 0.5 * CapsuleSize.y;
	const float3 SphereCenter = float3(0,0,clamp(LocalPosition.z, -HalfLength, HalfLength));

	return DIGeometryCollection_GetSphereProjection(LocalPosition,SphereCenter,CapsuleSize.x,CapsuleIndex,
			OutClosestPosition,OutClosestNormal,OutElementIndex,OutMinDistance);
}

// Given a world space position (WorldPosition) compute the sphere closest point (position,normal,velocity)
float DIGeometryCollection_GetBoxProjection(in float3 LocalPosition, in float3 BoxExtent, in int BoxIndex, 
			inout float3 OutClosestPosition, inout float3 OutClosestNormal, inout int OutElementIndex, inout float OutMinDistance)
{
	const float3 HalfExtent = 0.5 * BoxExtent;
	const float3 DeltaPosition = abs(LocalPosition) - HalfExtent;

	const int ClosestAxis = ((DeltaPosition.x > DeltaPosition.y) && (DeltaPosition.x > DeltaPosition.z)) ? 0 : ( DeltaPosition.y > DeltaPosition.z) ? 1 : 2;
	const float OutsideDistance = length(max(DeltaPosition,0.0));
	const float BoxDistance = OutsideDistance + min(DeltaPosition[ClosestAxis],0.0);

	if (BoxDistance < OutMinDistance)
	{
		OutMinDistance = BoxDistance;
		OutElementIndex = BoxIndex;

		if (BoxDistance <= 0)
		{
			const bool NegativeSide = LocalPosition[ClosestAxis] < 0.0;

			OutClosestPosition = LocalPosition;
			OutClosestNormal = float3(0,0,0);
			if( ClosestAxis == 0) 
			{
				OutClosestPosition.x = NegativeSide ? -HalfExtent.x : HalfExtent.x;
				OutClosestNormal.x = NegativeSide ? -1.0 : 1.0;
			}
			else if( ClosestAxis == 1) 
			{
				OutClosestPosition.y = NegativeSide ? -HalfExtent.y : HalfExtent.y;
				OutClosestNormal.y = NegativeSide ? -1.0 : 1.0;
			}
			else if( ClosestAxis == 2) 
			{
				OutClosestPosition.z = NegativeSide ? -HalfExtent.z : HalfExtent.z;
				OutClosestNormal.z = NegativeSide ? -1.0 : 1.0;
			}
		}
		else
		{
			OutClosestPosition = clamp(LocalPosition,-HalfExtent,HalfExtent);
			OutClosestNormal = (LocalPosition - OutClosestPosition) / OutsideDistance;
		}
	}
	return BoxDistance;
}


/* -----------------------------------------------------------------
 * Get the closest element to the world position
 * -----------------------------------------------------------------
 */

float3 DIGeometryCollection_GetLocalPosition(in FDIGeometryCollectionContext DIContext, in float3 WorldPosition, in int ElementIndex, in float TimeFraction )
{
	const float3 CurrentLocal = mul(DIGeometryCollection_GetInverseTransform(DIContext,ElementIndex), float4(WorldPosition,1.0)).xyz;
	const float3 PreviousLocal = mul(DIGeometryCollection_GetPreviousInverse(DIContext,ElementIndex), float4(WorldPosition,1.0)).xyz;

	return PreviousLocal + TimeFraction * (CurrentLocal-PreviousLocal);
}

// Given a world space position (WorldPosition) compute the static mesh closest point (position,normal,velocity)
void DIGeometryCollection_GetClosestPointNoNormal(in FDIGeometryCollectionContext DIContext, in float3 WorldPosition, in float DeltaTime, in float TimeFraction, out float OutClosestDistance, out float3 OutClosestPosition, out float3 OutClosestVelocity)
{	
	float3 CollisionPosition = float3(0,0,0);
	float3 CollisionNormal = float3(0,0,0);
	OutClosestDistance = MAX_DISTANCE;	
	
	OutClosestPosition = float3(0,0,0);
	OutClosestVelocity = float3(0,0,0);
	
	
	[branch]
	if (WorldPosition.x < DIContext.BoundsMin.x || 
		WorldPosition.y < DIContext.BoundsMin.y || 
		WorldPosition.z < DIContext.BoundsMin.z || 
		WorldPosition.x > DIContext.BoundsMax.x || 
		WorldPosition.y > DIContext.BoundsMax.y || 
		WorldPosition.z > DIContext.BoundsMax.z)
	{
		return;
	}
	

	int ClosestTransform = -1;
	for (int CurrTransform = 0; CurrTransform < DIContext.NumPieces; ++CurrTransform)
	{
		float3 LocalPosition = DIGeometryCollection_GetLocalPosition(DIContext,WorldPosition,CurrTransform,TimeFraction);
		
		DIGeometryCollection_GetBoxProjection(LocalPosition, DIContext.BoundsBuffer[CurrTransform].xyz, CurrTransform,
				CollisionPosition, CollisionNormal, ClosestTransform, OutClosestDistance);
	}

	if (ClosestTransform != -1)
	{
		const float3 PreviousPosition = mul(DIGeometryCollection_GetPreviousTransform(DIContext,ClosestTransform), float4(CollisionPosition,1.0)).xyz;
		const float3 CurrentPosition = mul(DIGeometryCollection_GetCurrentTransform(DIContext,ClosestTransform), float4(CollisionPosition,1.0)).xyz;
		OutClosestVelocity = ( CurrentPosition - PreviousPosition ) / DeltaTime;
		OutClosestPosition = PreviousPosition + TimeFraction * (CurrentPosition-PreviousPosition);		
	}
}