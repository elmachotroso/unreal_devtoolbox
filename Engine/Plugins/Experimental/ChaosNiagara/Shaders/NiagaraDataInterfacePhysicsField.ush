// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
NiagaraDataInterfacePhysicsField.ush 
=============================================================================*/

#pragma once

/* -----------------------------------------------------------------
 * Field System constants and context
 * -----------------------------------------------------------------
 */

#include "/Engine/Private/PhysicsFieldShared.ush"

struct FDIPhysicsFieldContext
{
	Buffer<float> ClipmapBuffer;
	float3 ClipmapCenter;
	float ClipmapDistance;
	int ClipmapResolution;
	int ClipmapExponent;
	int ClipmapCount;
	int TargetCount;
	int4 FieldTargets[MAX_PHYSICS_FIELD_TARGETS];
	float3 SystemLWCTile;
};

#define DIPhysicsField_DECLARE_CONSTANTS(NAME)\
Buffer<float> ClipmapBuffer_##NAME;\
float3 ClipmapCenter_##NAME;\
float ClipmapDistance_##NAME;\
int ClipmapResolution_##NAME;\
int ClipmapExponent_##NAME;\
int ClipmapCount_##NAME;\
int TargetCount_##NAME;\
int4 FieldTargets_##NAME[MAX_PHYSICS_FIELD_TARGETS];\
float3 SystemLWCTile_##NAME;\

#define DIPhysicsField_MAKE_CONTEXT(NAME)\
FDIPhysicsFieldContext DIContext; \
DIContext.ClipmapBuffer = ClipmapBuffer_##NAME;\
DIContext.ClipmapCenter = ClipmapCenter_##NAME;\
DIContext.ClipmapDistance = ClipmapDistance_##NAME;\
DIContext.ClipmapResolution = ClipmapResolution_##NAME;\
DIContext.ClipmapExponent = ClipmapExponent_##NAME;\
DIContext.ClipmapCount = ClipmapCount_##NAME;\
DIContext.TargetCount = TargetCount_##NAME;\
DIContext.FieldTargets = FieldTargets_##NAME;\
DIContext.SystemLWCTile = SystemLWCTile_##NAME;\

float3 DIPhysicsField_SamplePhysicsVectorField(in FDIPhysicsFieldContext DIContext, in float3 WorldPosition, in int VectorTarget)
{
	// LWC_TODO: fix this when the physics field functions are lwc ready
	FLWCVector3 SamplePos = MakeLWCVector3(DIContext.SystemLWCTile, WorldPosition);
	
	return PhysicsField_SamplePhysicsVectorField(LWCHackToFloat(SamplePos), VectorTarget, DIContext.FieldTargets, DIContext.TargetCount, DIContext.ClipmapCenter, DIContext.ClipmapDistance, 
				DIContext.ClipmapExponent, DIContext.ClipmapCount, DIContext.ClipmapResolution, DIContext.ClipmapBuffer);
}

float DIPhysicsField_SamplePhysicsScalarField(in FDIPhysicsFieldContext DIContext, in float3 WorldPosition, in int ScalarTarget)
{
	// LWC_TODO: fix this when the physics field functions are lwc ready
	FLWCVector3 SamplePos = MakeLWCVector3(DIContext.SystemLWCTile, WorldPosition);
	
	return PhysicsField_SamplePhysicsScalarField(LWCHackToFloat(SamplePos), ScalarTarget, DIContext.FieldTargets, DIContext.TargetCount, DIContext.ClipmapCenter, DIContext.ClipmapDistance,
				DIContext.ClipmapExponent, DIContext.ClipmapCount, DIContext.ClipmapResolution, DIContext.ClipmapBuffer);
}

int DIPhysicsField_SamplePhysicsIntegerField(in FDIPhysicsFieldContext DIContext, in float3 WorldPosition, in int IntegerTarget)
{
	// LWC_TODO: fix this when the physics field functions are lwc ready
	FLWCVector3 SamplePos = MakeLWCVector3(DIContext.SystemLWCTile, WorldPosition);
	
	return PhysicsField_SamplePhysicsIntegerField(LWCHackToFloat(SamplePos), IntegerTarget, DIContext.FieldTargets, DIContext.TargetCount, DIContext.ClipmapCenter, DIContext.ClipmapDistance,
				DIContext.ClipmapExponent, DIContext.ClipmapCount, DIContext.ClipmapResolution, DIContext.ClipmapBuffer);
}