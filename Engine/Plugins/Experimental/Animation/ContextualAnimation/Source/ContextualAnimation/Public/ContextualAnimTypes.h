// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Animation/AnimSequence.h"
#include "Templates/SubclassOf.h"
#include "ContextualAnimTypes.generated.h"

CONTEXTUALANIMATION_API DECLARE_LOG_CATEGORY_EXTERN(LogContextualAnim, Log, All);

class AActor;
class UAnimMontage;
class UContextualAnimMetadata;

/** Container for alignment tracks */
USTRUCT()
struct CONTEXTUALANIMATION_API FContextualAnimAlignmentTrackContainer
{
	GENERATED_BODY()

	UPROPERTY()
	FAnimSequenceTrackContainer Tracks;

	UPROPERTY()
	float SampleInterval = 0.f;

	void Initialize(int32 InNumTracks, float InSampleInterval)
	{
		Tracks.AnimationTracks.Empty(InNumTracks);
		Tracks.TrackNames.Empty(InNumTracks);
		SampleInterval = InSampleInterval;
	}

	void Empty()
	{
		Tracks.AnimationTracks.Empty();
		Tracks.TrackNames.Empty();
		SampleInterval = 0.f;
	}

	FTransform ExtractTransformAtTime(int32 TrackIndex, float Time) const;
	FTransform ExtractTransformAtTime(const FName& TrackName, float Time) const;
};

USTRUCT()
struct CONTEXTUALANIMATION_API FContextualAnimRoleBonePair
{
	GENERATED_BODY()

	UPROPERTY()
	FName RoleName = NAME_None;

	UPROPERTY()
	FName BoneName = NAME_None;
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimData
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	UAnimMontage* Animation = nullptr;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float AnimMaxStartTime = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bRequireFlyingMode = false;

	/** Container for alignment tracks */
	UPROPERTY()
	FContextualAnimAlignmentTrackContainer AlignmentData;

	/** Container for auto generate IK Target Tracks */
	UPROPERTY()
	FContextualAnimAlignmentTrackContainer IKTargetData;

	/** Lookup map to go from TrackName to Target Role and Parent Bone */
	UPROPERTY()
	TMap<FName, FContextualAnimRoleBonePair> IKTargetTrackLookupMap;

	UPROPERTY(EditAnywhere, Instanced, Category = "Defaults")
	UContextualAnimMetadata* Metadata = nullptr;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform MeshToScene;

	/** Index in the container of AnimData that owns us */
	UPROPERTY()
	int32 Index = INDEX_NONE;

	float GetSyncTimeForWarpSection(int32 WarpSectionIndex) const;
	float GetSyncTimeForWarpSection(const FName& WarpSectionName) const;

	FORCEINLINE FTransform GetAlignmentTransformAtTime(float Time) const { return AlignmentData.ExtractTransformAtTime(0, Time); }
	FORCEINLINE FTransform GetAlignmentTransformAtEntryTime() const { return AlignmentData.ExtractTransformAtTime(0, 0.f); }
	FORCEINLINE FTransform GetAlignmentTransformAtSyncTime() const { return AlignmentData.ExtractTransformAtTime(0, GetSyncTimeForWarpSection(0)); }

	float FindBestAnimStartTime(const FVector& LocalLocation) const;

	static const FContextualAnimData EmptyAnimData;
};

/** Defines when the actor should start playing the animation */
UENUM(BlueprintType)
enum class EContextualAnimJoinRule : uint8
{
	Default,
	Late
};

USTRUCT(BlueprintType)
struct FContextualAnimTransitionContainer
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TArray<FName> FromSections;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName ToSection = NAME_None;

	UPROPERTY(EditAnywhere, Instanced, Category = "Defaults")
	class UContextualAnimTransition* Transition = nullptr;

	//@TODO: Remove this from here it should be on the EdMode
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bForceTransition = false;
};

UENUM(BlueprintType)
enum class EContextualAnimIKTargetProvider : uint8
{
	/** 
	 * IK Targets are auto generated from the animations 
	 * @see: UContextualAnimSceneAssetBase::GenerateIKTargetTracks
	 */
	Autogenerated,

	/** IK Target defined by a bone or a socket in the animation */
	Bone,

	//@TODO: Add collision query methods
};

USTRUCT(BlueprintType)
struct FContextualAnimIKTargetBoneParams
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName TargetRole = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName BoneName = NAME_None;
};

USTRUCT(BlueprintType)
struct FContextualAnimIKTargetDefinition
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName IKGoalName = NAME_None;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName BoneName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName AlphaCurveName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	EContextualAnimIKTargetProvider Provider = EContextualAnimIKTargetProvider::Autogenerated;

	//@TODO: Hide from the UI when Type != Auto
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults", meta = (EditCondition = "Provider == EContextualAnimIKTargetProvider::Autogenerated"))
	FContextualAnimIKTargetBoneParams AutoParams;

	//@TODO: Hide from the UI when Type != Bone
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults", meta = (EditCondition = "Provider == EContextualAnimIKTargetProvider::Bone"))
	FContextualAnimIKTargetBoneParams BoneParams;
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimIKTarget
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FName GoalName = NAME_None;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float Alpha = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;

	FContextualAnimIKTarget(){}
	FContextualAnimIKTarget(const FName& InGoalName, float InAlpha, const FTransform& InTransform)
		: GoalName(InGoalName), Alpha(InAlpha), Transform(InTransform){}

	static const FContextualAnimIKTarget InvalidIKTarget;
};

USTRUCT(BlueprintType)
struct CONTEXTUALANIMATION_API FContextualAnimTrackSettings
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TSubclassOf<AActor> PreviewActorClass;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	EContextualAnimJoinRule JoinRule = EContextualAnimJoinRule::Default;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TArray<FContextualAnimIKTargetDefinition> IKTargetDefinitions;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults", AdvancedDisplay)
	FTransform MeshToComponent = FTransform(FRotator(0.f, -90.f, 0.f));
};

USTRUCT(BlueprintType)
struct FContextualAnimTrack
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FContextualAnimTrackSettings Settings;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FContextualAnimData AnimData;
};

USTRUCT(BlueprintType)
struct FContextualAnimCompositeTrack
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FContextualAnimTrackSettings Settings;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TArray<FContextualAnimData> AnimDataContainer;

	FTransform GetRootTransformForAnimDataAtIndex(int32 Index) const;
};

USTRUCT(BlueprintType)
struct FContextualAnimSceneBindings
{
	GENERATED_BODY()

	/** Map with actors to bind to each role in the scene */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TMap<FName, AActor*> RoleToActorMap;

	/** Desired AnimDataIndex. If INDEX_NONE the Manager will attempt to find the best AnimData to use */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	int32 AnimDataIndex = INDEX_NONE;

	/** Desired start time. Only relevant if AnimDataIndex != INDEX_NONE */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	float AnimStartTime = 0.f;
};

///////////////////////////////////////////////////////////////////////

/** Stores the result of a query function */
USTRUCT(BlueprintType)
struct FContextualAnimQueryResult
{
	GENERATED_BODY()

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<UAnimMontage> Animation;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	FTransform EntryTransform;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	FTransform SyncTransform;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	float AnimStartTime = 0.f;

	UPROPERTY(BlueprintReadWrite, Category = "Defaults")
	int32 DataIndex = INDEX_NONE;

	void Reset()
	{
		Animation.Reset();
		EntryTransform = SyncTransform = FTransform::Identity;
		AnimStartTime = 0.f;
		DataIndex = INDEX_NONE;
	}

	FORCEINLINE bool IsValid() const { return DataIndex != INDEX_NONE; }
};

/** Stores the parameters passed into query function */
USTRUCT(BlueprintType)
struct FContextualAnimQueryParams
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<const AActor> Querier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform QueryTransform;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bComplexQuery = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	bool bFindAnimStartTime = false;

	FContextualAnimQueryParams() {}

	FContextualAnimQueryParams(const AActor* InQuerier, bool bInComplexQuery, bool bInFindAnimStartTime)
		: Querier(InQuerier), bComplexQuery(bInComplexQuery), bFindAnimStartTime(bInFindAnimStartTime) {}

	FContextualAnimQueryParams(const FTransform& InQueryTransform, bool bInComplexQuery, bool bInFindAnimStartTime)
		: QueryTransform(InQueryTransform), bComplexQuery(bInComplexQuery), bFindAnimStartTime(bInFindAnimStartTime) {}
};

USTRUCT(BlueprintType)
struct FContextualAnimQuerier
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<const AActor> Actor = nullptr;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;

	FContextualAnimQuerier(){}
	FContextualAnimQuerier(const AActor* InActor) : Actor(InActor) {}
	FContextualAnimQuerier(const FTransform& InTransform) : Transform(InTransform) {}
};

USTRUCT(BlueprintType)
struct FContextualAnimQueryContext
{
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	TWeakObjectPtr<const AActor> Actor = nullptr;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Defaults")
	FTransform Transform;

	FContextualAnimQueryContext() {}
	FContextualAnimQueryContext(const AActor* InActor) : Actor(InActor) {}
	FContextualAnimQueryContext(const FTransform& InTransform) : Transform(InTransform) {}
};