// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Plugin/ComputeFramework/Private/ComputeKernelCommon.ush"
#include "/Engine/Private/GpuSkinCommon.ush"

// todo: These should be set by compute graph permutations when that is working.
#define ENABLE_DEFORMER_BONES 1
#define MERGE_DUPLICATED_VERTICES 0

// The following should come from project settings and be set on compute graph kernel compilation.
// GPUSKIN_BONE_INDEX_UINT16
// GPUSKIN_UNLIMITED_BONE_INFLUENCE

uint DI_LOCAL(NumVertices);
uint DI_LOCAL(NumTriangles);
uint DI_LOCAL(NumBoneInfluences);
uint DI_LOCAL(NumTexCoords);
uint DI_LOCAL(IndexBufferStart);
uint DI_LOCAL(InputStreamStart);
uint DI_LOCAL(InputWeightStart);
uint DI_LOCAL(InputWeightStride);
uint DI_LOCAL(InputWeightIndexSize);

Buffer<uint> DI_LOCAL(IndexBuffer);
Buffer<float> DI_LOCAL(PositionInputBuffer);
Buffer<SNORM float4> DI_LOCAL(TangentInputBuffer);
Buffer<float2> DI_LOCAL(UVInputBuffer);
Buffer<float4> DI_LOCAL(BoneMatrices);
Buffer<uint> DI_LOCAL(InputWeightStream);
Buffer<uint> DI_LOCAL(InputWeightLookupStream);
Buffer<uint> DI_LOCAL(DuplicatedIndicesIndices);
Buffer<uint> DI_LOCAL(DuplicatedIndices);

DI_IMPL_READ(ReadNumVertices, uint, void)
{
	return DI_LOCAL(NumVertices);
}

DI_IMPL_READ(ReadNumTriangles, uint, void)
{
	return DI_LOCAL(NumTriangles);
}

DI_IMPL_READ(ReadIndexBuffer, uint, uint Index)
{
	uint BufferIndex = DI_LOCAL(IndexBufferStart) + Index;
	return DI_LOCAL(IndexBuffer)[BufferIndex] - DI_LOCAL(InputStreamStart);
}

DI_IMPL_READ(ReadPosition, float3, uint VertexIndex)
{
	uint BufferIndex = (DI_LOCAL(InputStreamStart) + VertexIndex) * 3;
	return float3(DI_LOCAL(PositionInputBuffer)[BufferIndex], DI_LOCAL(PositionInputBuffer)[BufferIndex + 1], DI_LOCAL(PositionInputBuffer)[BufferIndex + 2]);
}

DI_IMPL_READ(ReadTangentX, float4, uint VertexIndex)
{
	uint BufferIndex = (DI_LOCAL(InputStreamStart) + VertexIndex) * 2;
	return TangentBias_SkinCache(DI_LOCAL(TangentInputBuffer)[BufferIndex]);
}

DI_IMPL_READ(ReadTangentZ, float4, uint VertexIndex)
{
	uint BufferIndex = (DI_LOCAL(InputStreamStart) + VertexIndex) * 2;
	return TangentBias_SkinCache(DI_LOCAL(TangentInputBuffer)[BufferIndex + 1]);
}

DI_IMPL_READ(ReadUV0, float2, uint VertexIndex)
{
	uint BufferIndex = (DI_LOCAL(InputStreamStart) + VertexIndex) * DI_LOCAL(NumTexCoords);
	return DI_LOCAL(UVInputBuffer)[BufferIndex];
}

#if !GPUSKIN_UNLIMITED_BONE_INFLUENCE

int4 DI_LOCAL(GetBlendIndices)(uint StreamOffset, uint ExtraInfluenceIndex)
{
	int4 UnpackedBlendIndices = 0;

#if GPUSKIN_BONE_INDEX_UINT16
	StreamOffset += GPUSKIN_VB_OFFSET_INFLUENCEBONES + 2 * ExtraInfluenceIndex;
	uint PackedBlendIndices = DI_LOCAL(InputWeightStream)[StreamOffset];
	UnpackedBlendIndices.x = PackedBlendIndices & 0xffff;
	UnpackedBlendIndices.y = PackedBlendIndices >> 16 & 0xffff;
	PackedBlendIndices = DI_LOCAL(InputWeightStream)[StreamOffset + 1];
	UnpackedBlendIndices.z = PackedBlendIndices & 0xffff;
	UnpackedBlendIndices.w = PackedBlendIndices >> 16 & 0xffff;
#else // GPUSKIN_BONE_INDEX_UINT16
	StreamOffset += GPUSKIN_VB_OFFSET_INFLUENCEBONES + ExtraInfluenceIndex;
	uint PackedBlendIndices = DI_LOCAL(InputWeightStream)[StreamOffset];
	UnpackedBlendIndices.x = PackedBlendIndices & 0xff;
	UnpackedBlendIndices.y = PackedBlendIndices >> 8 & 0xff;
	UnpackedBlendIndices.z = PackedBlendIndices >> 16 & 0xff;
	UnpackedBlendIndices.w = PackedBlendIndices >> 24 & 0xff;
#endif // GPUSKIN_BONE_INDEX_UINT16

	return UnpackedBlendIndices;
}

float4 DI_LOCAL(GetBlendWeights)(uint StreamOffset, uint ExtraInfluenceIndex)
{
	StreamOffset += ((DI_LOCAL(NumBoneInfluences) + 3) / 4) + ExtraInfluenceIndex;
	uint PackedBlendWeights = DI_LOCAL(InputWeightStream)[StreamOffset];
	
	float4 UnpackedBlendWeights = 0;
	UnpackedBlendWeights.x = float(PackedBlendWeights & 0xff) / 255.0f;
	UnpackedBlendWeights.y = float(PackedBlendWeights >> 8 & 0xff) / 255.0f;
	UnpackedBlendWeights.z = float(PackedBlendWeights >> 16 & 0xff) / 255.0f;
	UnpackedBlendWeights.w = float(PackedBlendWeights >> 24 & 0xff) / 255.0f;
	return UnpackedBlendWeights;
}

#endif // GPUSKIN_UNLIMITED_BONE_INFLUENCE

float3x4 DI_LOCAL(GetBoneMatrix)(uint BoneIndex)
{
	uint BufferIndex = BoneIndex * 3;
	return float3x4(DI_LOCAL(BoneMatrices)[BufferIndex], DI_LOCAL(BoneMatrices)[BufferIndex + 1], DI_LOCAL(BoneMatrices)[BufferIndex + 2]);
}

DI_IMPL_READ(ReadBlendMatrix, float3x4, uint VertexIndex)
{
#if !ENABLE_DEFORMER_BONES

	return float3x4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0);

#elif GPUSKIN_UNLIMITED_BONE_INFLUENCE

	float3x4 BlendMatrix = (float3x4)0;

	uint BlendOffsetCount = DI_LOCAL(InputWeightLookupStream)[VertexIndex];
	int NumBoneInfluencesLocal = BlendOffsetCount & 0xff;
	int StreamOffset = BlendOffsetCount >> 8;
	int WeightsOffset = StreamOffset + (DI_LOCAL(InputWeightIndexSize) * NumBoneInfluencesLocal);

	for (int InfluenceIndex = 0; InfluenceIndex < NumBoneInfluencesLocal; InfluenceIndex++)
	{
		int BoneIndexOffset = StreamOffset + (DI_LOCAL(InputWeightIndexSize) * InfluenceIndex);
		int BoneIndex = DI_LOCAL(InputWeightStream)[BoneIndexOffset];
		if (DI_LOCAL(InputWeightIndexSize) > 1)
		{
			BoneIndex = DI_LOCAL(InputWeightStream)[BoneIndexOffset + 1] << 8 | BoneIndex;
		}
		float BoneWeight = float(DI_LOCAL(InputWeightStream)[WeightsOffset + InfluenceIndex]) / 255.0f;
		BlendMatrix += BoneWeight * GetBoneMatrix(BoneIndex);
	}

	return BlendMatrix;

#else // !GPUSKIN_UNLIMITED_BONE_INFLUENCE

	float3x4 BlendMatrix = (float3x4)0;

	uint StreamOffset = DI_LOCAL(InputWeightStart) + (VertexIndex * (DI_LOCAL(InputWeightStride) / 4));

	if (DI_LOCAL(NumBoneInfluences) > 0)
	{
		int4 BlendIndices = DI_LOCAL(GetBlendIndices)(StreamOffset, 0);
		float4 BlendWeights = DI_LOCAL(GetBlendWeights)(StreamOffset, 0);
	
		BlendMatrix += BlendWeights.x * DI_LOCAL(GetBoneMatrix)(BlendIndices.x);
		BlendMatrix += BlendWeights.y * DI_LOCAL(GetBoneMatrix)(BlendIndices.y);
		BlendMatrix += BlendWeights.z * DI_LOCAL(GetBoneMatrix)(BlendIndices.z);
		BlendMatrix += BlendWeights.w * DI_LOCAL(GetBoneMatrix)(BlendIndices.w);
	}

	// todo[CF]: make this a permutation when permutation support is working again?
	if (DI_LOCAL(NumBoneInfluences) > 4)
	{
		int4 BlendIndices = DI_LOCAL(GetBlendIndices)(StreamOffset, 1);
		float4 BlendWeights = DI_LOCAL(GetBlendWeights)(StreamOffset, 1);

		BlendMatrix += BlendWeights.x * DI_LOCAL(GetBoneMatrix)(BlendIndices.x);
		BlendMatrix += BlendWeights.y * DI_LOCAL(GetBoneMatrix)(BlendIndices.y);
		BlendMatrix += BlendWeights.z * DI_LOCAL(GetBoneMatrix)(BlendIndices.z);
		BlendMatrix += BlendWeights.w * DI_LOCAL(GetBoneMatrix)(BlendIndices.w);
	}

	return BlendMatrix;

#endif
}

DI_IMPL_READ(ReadNumVertexBones, uint, uint VertexIndex)
{
#if !ENABLE_DEFORMER_BONES
	return 0;
#elif GPUSKIN_UNLIMITED_BONE_INFLUENCE
	uint BlendOffsetCount = DI_LOCAL(InputWeightLookupStream)[VertexIndex];
	return BlendOffsetCount & 0xff;
#else // !GPUSKIN_UNLIMITED_BONE_INFLUENCE
	return DI_LOCAL(NumBoneInfluences);
#endif
}

DI_IMPL_READ(ReadBoneMatrix, float3x4, uint VertexIndex, uint BoneIndex)
{
#if !ENABLE_DEFORMER_BONES

	return float3x4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0);

#elif GPUSKIN_UNLIMITED_BONE_INFLUENCE
	
	uint BlendOffsetCount = DI_LOCAL(InputWeightLookupStream)[VertexIndex];
	int StreamOffset = BlendOffsetCount >> 8;

	int BoneIndexOffset = StreamOffset + (DI_LOCAL(InputWeightIndexSize) * BoneIndex);
	int BoneGlobalIndex = DI_LOCAL(InputWeightStream)[BoneIndexOffset];
	if (DI_LOCAL(InputWeightIndexSize) > 1)
	{
		BoneGlobalIndex = DI_LOCAL(InputWeightStream)[BoneIndexOffset + 1] << 8 | BoneGlobalIndex;
	}
	
	return GetBoneMatrix(BoneGlobalIndex);

#else // !GPUSKIN_UNLIMITED_BONE_INFLUENCE
	
	uint StreamOffset = DI_LOCAL(InputWeightStart) + (VertexIndex * (DI_LOCAL(InputWeightStride) / 4));
	int BlendIndex = DI_LOCAL(GetBlendIndices)(StreamOffset, BoneIndex / 4)[BoneIndex & 0x3];
	return DI_LOCAL(GetBoneMatrix)(BlendIndex);

#endif
}

DI_IMPL_READ(ReadBoneWeight, float, uint VertexIndex, uint BoneIndex)
{
#if !ENABLE_DEFORMER_BONES

	return 0;

#elif GPUSKIN_UNLIMITED_BONE_INFLUENCE
	
	uint BlendOffsetCount = DI_LOCAL(InputWeightLookupStream)[VertexIndex];
	int NumBoneInfluencesLocal = BlendOffsetCount & 0xff;
	int StreamOffset = BlendOffsetCount >> 8;
	int WeightsOffset = StreamOffset + (DI_LOCAL(InputWeightIndexSize) * NumBoneInfluencesLocal);

	return float(DI_LOCAL(InputWeightStream)[WeightsOffset + BoneIndex]) / 255.0f;

#else // !GPUSKIN_UNLIMITED_BONE_INFLUENCE
	
	uint StreamOffset = DI_LOCAL(InputWeightStart) + (VertexIndex * (DI_LOCAL(InputWeightStride) / 4));
	float BlendWeight = DI_LOCAL(GetBlendWeights)(StreamOffset, BoneIndex / 4)[BoneIndex & 0x3];
	return BlendWeight;

#endif
}

DI_IMPL_READ(ReadDuplicatedIndicesStart, uint, uint VertexIndex)
{
#if MERGE_DUPLICATED_VERTICES 
	return DI_LOCAL(DuplicatedIndicesIndices)[VertexIndex * 2 + 1];
#else
	return 0;
#endif
}

DI_IMPL_READ(ReadDuplicatedIndicesLength, uint, uint VertexIndex)
{
#if MERGE_DUPLICATED_VERTICES 
	return DI_LOCAL(DuplicatedIndicesIndices)[VertexIndex * 2];
#else
	return 0;
#endif
}

DI_IMPL_READ(ReadDuplicatedIndex, uint, uint Index)
{
#if MERGE_DUPLICATED_VERTICES 
	return DI_LOCAL(DuplicatedIndices)[Index];
#else
	return 0;
#endif
}
